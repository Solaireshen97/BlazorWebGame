@page "/"
@using BlazorWebGame.Refactored.Application.Services
@using BlazorWebGame.Refactored.Domain.Events
@using BlazorWebGame.Refactored.Infrastructure.Events.Core
@implements IDisposable

<PageTitle>BlazorWebGame - 事件驱动架构演示</PageTitle>

<div class="game-dashboard">
    <div class="row">
        <div class="col-md-8">
            <div class="card">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5 class="mb-0">
                        <i class="bi bi-activity me-2"></i>事件驱动架构演示
                    </h5>
                    @if (CurrentCharacter != null)
                    {
                        <small class="text-muted">角色: @CurrentCharacter.Name</small>
                    }
                </div>
                <div class="card-body">
                    @if (CurrentCharacter != null)
                    {
                        <div class="alert alert-success">
                            <h6><i class="bi bi-check-circle me-2"></i>游戏引擎已启动！</h6>
                            <p class="mb-0">基于事件驱动的新架构正在运行，所有操作都通过事件总线进行通信。</p>
                        </div>
                        
                        <div class="row">
                            <div class="col-md-4 mb-3">
                                <button class="btn btn-primary w-100" @onclick="StartMiningActivity" disabled="@_isProcessing">
                                    <i class="bi bi-pickaxe me-2"></i>开始挖矿
                                </button>
                            </div>
                            <div class="col-md-4 mb-3">
                                <button class="btn btn-success w-100" @onclick="StartFishingActivity" disabled="@_isProcessing">
                                    <i class="bi bi-fish me-2"></i>开始钓鱼
                                </button>
                            </div>
                            <div class="col-md-4 mb-3">
                                <button class="btn btn-info w-100" @onclick="StartCraftingActivity" disabled="@_isProcessing">
                                    <i class="bi bi-hammer me-2"></i>开始制作
                                </button>
                            </div>
                        </div>

                        @if (_activeActivities.Any())
                        {
                            <h6 class="mt-4">当前活动</h6>
                            @foreach (var activity in _activeActivities.Values)
                            {
                                <div class="card mb-2">
                                    <div class="card-body">
                                        <div class="d-flex justify-content-between align-items-center">
                                            <div>
                                                <strong>@GetActivityTypeDisplayName(activity.Type)</strong>
                                                <div class="progress mt-2" style="height: 20px;">
                                                    <div class="progress-bar" role="progressbar" 
                                                         style="width: @(activity.Progress * 100)%">
                                                        @((activity.Progress * 100).ToString("F1"))%
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="text-end">
                                                <small class="text-muted">剩余: @activity.RemainingTime.ToString(@"mm\:ss")</small>
                                                <br>
                                                <button class="btn btn-sm btn-outline-danger" @onclick="() => StopActivity(activity.Id)">
                                                    停止
                                                </button>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            }
                        }
                    }
                    else
                    {
                        <div class="text-center py-4">
                            <i class="bi bi-person-x text-muted" style="font-size: 2rem;"></i>
                            <p class="text-muted mt-2">正在加载角色...</p>
                        </div>
                    }
                </div>
            </div>
        </div>
        
        <div class="col-md-4">
            <div class="card mb-3">
                <div class="card-header">
                    <h6 class="mb-0"><i class="bi bi-person-circle me-2"></i>角色信息</h6>
                </div>
                <div class="card-body">
                    @if (CurrentCharacter != null)
                    {
                        <div class="character-stats">
                            <div class="d-flex justify-content-between mb-2">
                                <span>角色ID:</span>
                                <small class="text-muted">@CurrentCharacter.Id.ToString()[..8]...</small>
                            </div>
                            <div class="d-flex justify-content-between mb-2">
                                <span>姓名:</span>
                                <strong>@CurrentCharacter.Name</strong>
                            </div>
                            <div class="d-flex justify-content-between mb-2">
                                <span>等级:</span>
                                <strong>@CurrentCharacter.Level</strong>
                            </div>
                            <div class="d-flex justify-content-between mb-2">
                                <span>活跃活动:</span>
                                <strong>@_activeActivities.Count</strong>
                            </div>
                        </div>
                    }
                    else
                    {
                        <p class="text-muted">加载中...</p>
                    }
                </div>
            </div>
            
            <div class="card">
                <div class="card-header">
                    <h6 class="mb-0"><i class="bi bi-activity me-2"></i>事件日志</h6>
                </div>
                <div class="card-body">
                    <div class="notifications" style="max-height: 300px; overflow-y: auto;">
                        @if (_eventLog.Any())
                        {
                            @foreach (var eventEntry in _eventLog.TakeLast(10).Reverse())
                            {
                                <div class="notification-item mb-2 p-2 border-start border-primary border-3">
                                    <small class="text-muted">@eventEntry.Timestamp.ToString("HH:mm:ss")</small>
                                    <div><strong>@eventEntry.EventType</strong></div>
                                    <small class="text-muted">@eventEntry.Description</small>
                                </div>
                            }
                        }
                        else
                        {
                            <p class="text-muted">暂无事件记录</p>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
    
    <div class="row mt-4">
        <div class="col-12">
            <div class="card border-info">
                <div class="card-header bg-light">
                    <h6 class="mb-0 text-info">
                        <i class="bi bi-cpu me-2"></i>系统状态
                    </h6>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-3">
                            <div class="text-center">
                                <div class="h4 mb-0 text-success">@_totalEventsProcessed</div>
                                <small class="text-muted">已处理事件</small>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="text-center">
                                <div class="h4 mb-0 text-info">@_activeActivities.Count</div>
                                <small class="text-muted">活跃活动</small>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="text-center">
                                <div class="h4 mb-0 text-warning">@(_gameTickCount)</div>
                                <small class="text-muted">游戏Tick</small>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="text-center">
                                <div class="h4 mb-0 text-primary">运行中</div>
                                <small class="text-muted">引擎状态</small>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    [Inject] private IGameStateManager GameStateManager { get; set; } = default!;
    [Inject] private IEventBus EventBus { get; set; } = default!;
    [Inject] private ILogger<Home> Logger { get; set; } = default!;

    private Domain.Entities.Character? CurrentCharacter => GameStateManager.CurrentCharacter;
    private readonly Dictionary<Guid, ActivityInstance> _activeActivities = new();
    private readonly List<EventLogEntry> _eventLog = new();
    private bool _isProcessing = false;
    private int _totalEventsProcessed = 0;
    private long _gameTickCount = 0;

    protected override async Task OnInitializedAsync()
    {
        // 订阅相关事件
        EventBus.Subscribe<GameTickEvent>(OnGameTick);
        EventBus.Subscribe<NewActivityStartedEvent>(OnActivityStarted);
        EventBus.Subscribe<NewActivityCompletedEvent>(OnActivityCompleted);
        EventBus.Subscribe<ActivityProgressEvent>(OnActivityProgress);
        EventBus.Subscribe<ItemAcquiredEvent>(OnItemAcquired);
        EventBus.Subscribe<GameInitializedEvent>(OnGameInitialized);
        EventBus.Subscribe<GameReadyEvent>(OnGameReady);

        await base.OnInitializedAsync();
    }

    private async Task OnGameTick(GameTickEvent evt, CancellationToken cancellationToken)
    {
        _gameTickCount = evt.TickNumber;
        
        // 每10个tick更新一次UI，避免过于频繁的重绘
        if (evt.TickNumber % 10 == 0)
        {
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task OnActivityStarted(NewActivityStartedEvent evt, CancellationToken cancellationToken)
    {
        _totalEventsProcessed++;
        LogEvent("ActivityStarted", $"{GetActivityTypeDisplayName(evt.ActivityType)} 已开始");
        await InvokeAsync(StateHasChanged);
    }

    private async Task OnActivityCompleted(NewActivityCompletedEvent evt, CancellationToken cancellationToken)
    {
        _totalEventsProcessed++;
        _activeActivities.Remove(evt.ActivityId);
        
        var rewardsText = evt.Rewards.Any() ? 
            $"获得奖励: {string.Join(", ", evt.Rewards.Select(r => $"{r.Id} x{r.Quantity}"))}" : 
            "活动完成";
        
        LogEvent("ActivityCompleted", rewardsText);
        await InvokeAsync(StateHasChanged);
    }

    private async Task OnActivityProgress(ActivityProgressEvent evt, CancellationToken cancellationToken)
    {
        if (_activeActivities.ContainsKey(evt.ActivityId))
        {
            var activity = _activeActivities[evt.ActivityId];
            // 更新活动实例，但不需要每次都重绘UI
        }
    }

    private async Task OnItemAcquired(ItemAcquiredEvent evt, CancellationToken cancellationToken)
    {
        _totalEventsProcessed++;
        LogEvent("ItemAcquired", $"获得物品: {evt.ItemId} x{evt.Quantity}");
        await InvokeAsync(StateHasChanged);
    }

    private async Task OnGameInitialized(GameInitializedEvent evt, CancellationToken cancellationToken)
    {
        _totalEventsProcessed++;
        LogEvent("GameInitialized", "游戏引擎已初始化");
        await InvokeAsync(StateHasChanged);
    }

    private async Task OnGameReady(GameReadyEvent evt, CancellationToken cancellationToken)
    {
        _totalEventsProcessed++;
        LogEvent("GameReady", "游戏已准备就绪");
        await InvokeAsync(StateHasChanged);
    }

    private async Task StartMiningActivity()
    {
        if (CurrentCharacter == null || _isProcessing) return;
        
        _isProcessing = true;
        try
        {
            await EventBus.PublishAsync(new StartActivityCommand(CurrentCharacter.Id.ToString(), EventActivityType.Mining));
        }
        finally
        {
            _isProcessing = false;
        }
    }

    private async Task StartFishingActivity()
    {
        if (CurrentCharacter == null || _isProcessing) return;
        
        _isProcessing = true;
        try
        {
            await EventBus.PublishAsync(new StartActivityCommand(CurrentCharacter.Id.ToString(), EventActivityType.Fishing));
        }
        finally
        {
            _isProcessing = false;
        }
    }

    private async Task StartCraftingActivity()
    {
        if (CurrentCharacter == null || _isProcessing) return;
        
        _isProcessing = true;
        try
        {
            await EventBus.PublishAsync(new StartActivityCommand(CurrentCharacter.Id.ToString(), EventActivityType.Crafting));
        }
        finally
        {
            _isProcessing = false;
        }
    }

    private async Task StopActivity(Guid activityId)
    {
        if (CurrentCharacter == null) return;
        
        await EventBus.PublishAsync(new StopActivityCommand(activityId, CurrentCharacter.Id.ToString()));
        _activeActivities.Remove(activityId);
    }

    private string GetActivityTypeDisplayName(EventActivityType type)
    {
        return type switch
        {
            EventActivityType.Mining => "挖矿",
            EventActivityType.Fishing => "钓鱼",
            EventActivityType.Crafting => "制作",
            EventActivityType.Gathering => "采集",
            EventActivityType.Battle => "战斗",
            EventActivityType.Quest => "任务",
            _ => "未知活动"
        };
    }

    private void LogEvent(string eventType, string description)
    {
        _eventLog.Add(new EventLogEntry
        {
            Timestamp = DateTime.Now,
            EventType = eventType,
            Description = description
        });

        // 只保留最新的20条记录
        if (_eventLog.Count > 20)
        {
            _eventLog.RemoveAt(0);
        }
    }

    public void Dispose()
    {
        // 取消事件订阅
        // 注意：在实际实现中，EventBus应该提供取消订阅的方法
    }

    private class EventLogEntry
    {
        public DateTime Timestamp { get; set; }
        public string EventType { get; set; } = "";
        public string Description { get; set; } = "";
    }

    // 简化的ActivityInstance类（用于UI显示）
    private class ActivityInstance
    {
        public Guid Id { get; set; }
        public string CharacterId { get; set; } = "";
        public EventActivityType Type { get; set; }
        public DateTime StartTime { get; set; }
        public TimeSpan Duration { get; set; }
        public double Progress => Math.Min(1.0, (DateTime.UtcNow - StartTime).TotalSeconds / Duration.TotalSeconds);
        public TimeSpan RemainingTime => Duration - (DateTime.UtcNow - StartTime);
        public bool IsCompleted => Progress >= 1.0;
    }
}

<style>
    .game-dashboard {
        padding: 1rem 0;
    }

    .character-stats {
        font-size: 0.9rem;
    }

    .notification-item {
        font-size: 0.85rem;
        border-radius: 4px;
        background-color: #f8f9fa;
    }

    .card {
        box-shadow: 0 1px 3px rgba(0,0,0,0.1);
        border: 1px solid #e0e0e0;
    }

    .card-header {
        background-color: #f8f9fa;
        border-bottom: 1px solid #dee2e6;
    }

    .btn-outline-danger:hover,
    .btn-outline-success:hover,
    .btn-outline-info:hover,
    .btn-outline-warning:hover {
        transform: translateY(-1px);
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }
</style>
