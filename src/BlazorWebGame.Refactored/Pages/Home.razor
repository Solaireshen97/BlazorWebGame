@page "/"
@using BlazorWebGame.Refactored.Presentation.State
@using BlazorWebGame.Refactored.Presentation.Components
@using Fluxor
@inherits FluxorComponent

<PageTitle>BlazorWebGame - 主页</PageTitle>

<div class="game-dashboard">
    <div class="row">
        <div class="col-md-8">
            <div class="card">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5 class="mb-0">
                        <i class="bi bi-activity me-2"></i>当前活动
                    </h5>
                    @if (CurrentCharacter != null)
                    {
                        <small class="text-muted">角色: @CurrentCharacter.Name</small>
                    }
                </div>
                <div class="card-body">
                    @if (CurrentCharacter?.Activities?.ActiveSlots?.Any() == true)
                    {
                        @foreach (var activity in CurrentCharacter.Activities.ActiveSlots.Values)
                        {
                            <ActivityProgressBar 
                                ActivityName="@activity.Type.ToString()"
                                ActivityDescription="@GetActivityDescription(activity)"
                                ProgressPercentage="@GetActivityProgress(activity)"
                                RemainingTime="@GetRemainingTime(activity)"
                                TotalTime="@GetTotalTime(activity)"
                                IsCompleted="@IsActivityCompleted(activity)"
                                IsPaused="@IsActivityPaused(activity)"
                                Rewards="@GetActivityRewards(activity)"
                                OnPause="@(() => PauseActivity(activity.Id))"
                                OnResume="@(() => ResumeActivity(activity.Id))"
                                OnCancel="@(() => CancelActivity(activity.Id))" />
                        }
                    }
                    else
                    {
                        <div class="text-center py-4">
                            <i class="bi bi-clock text-muted" style="font-size: 2rem;"></i>
                            <p class="text-muted mt-2">当前没有进行中的活动</p>
                            <a href="/activities" class="btn btn-primary">开始新活动</a>
                        </div>
                    }
                </div>
            </div>
        </div>
        
        <div class="col-md-4">
            <div class="card mb-3">
                <div class="card-header">
                    <h6 class="mb-0"><i class="bi bi-person-circle me-2"></i>角色信息</h6>
                </div>
                <div class="card-body">
                    @if (CurrentCharacter != null)
                    {
                        <div class="character-stats">
                            <div class="d-flex justify-content-between mb-2">
                                <span>等级:</span>
                                <strong>@CurrentCharacter.Level</strong>
                            </div>
                            <div class="d-flex justify-content-between mb-2">
                                <span>经验:</span>
                                <strong>@CurrentCharacter.Experience.ToString()</strong>
                            </div>
                            <div class="d-flex justify-content-between mb-2">
                                <span>职业:</span>
                                <strong>@CurrentCharacter.Class</strong>
                            </div>
                            <div class="d-flex justify-content-between mb-2">
                                <span>活动槽位:</span>
                                <strong>@(CurrentCharacter.Activities?.ActiveSlots?.Count ?? 0) / @(CurrentCharacter.Activities?.MaxSlots ?? 0)</strong>
                            </div>
                        </div>
                    }
                    else
                    {
                        <p class="text-muted">请先选择或创建角色</p>
                        <a href="/characters" class="btn btn-outline-primary btn-sm">管理角色</a>
                    }
                </div>
            </div>
            
            <div class="card">
                <div class="card-header">
                    <h6 class="mb-0"><i class="bi bi-bell me-2"></i>系统通知</h6>
                </div>
                <div class="card-body">
                    <div class="notifications">
                        @if (Notifications?.Any() == true)
                        {
                            @foreach (var notification in Notifications.Take(5))
                            {
                                <div class="notification-item mb-2 p-2 border-start border-primary border-3">
                                    <small class="text-muted">@notification.Timestamp.ToString("HH:mm")</small>
                                    <div>@notification.Message</div>
                                </div>
                            }
                        }
                        else
                        {
                            <p class="text-muted">暂无新通知</p>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
    
    <div class="row mt-4">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    <h6 class="mb-0"><i class="bi bi-graph-up me-2"></i>快速操作</h6>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-3 col-sm-6 mb-3">
                            <a href="/battle" class="btn btn-outline-danger w-100">
                                <i class="bi bi-sword me-2"></i>开始战斗
                            </a>
                        </div>
                        <div class="col-md-3 col-sm-6 mb-3">
                            <a href="/activities" class="btn btn-outline-success w-100">
                                <i class="bi bi-tree me-2"></i>采集资源
                            </a>
                        </div>
                        <div class="col-md-3 col-sm-6 mb-3">
                            <a href="/inventory" class="btn btn-outline-info w-100">
                                <i class="bi bi-box me-2"></i>查看背包
                            </a>
                        </div>
                        <div class="col-md-3 col-sm-6 mb-3">
                            <a href="/characters" class="btn btn-outline-warning w-100">
                                <i class="bi bi-person-gear me-2"></i>角色管理
                            </a>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    [Inject] private IState<AppState> AppState { get; set; } = default!;
    [Inject] private IDispatcher Dispatcher { get; set; } = default!;

    private Domain.Entities.Character? CurrentCharacter => AppState.Value.Characters?.CurrentCharacter;
    private IEnumerable<Domain.Entities.Notification>? Notifications => AppState.Value.Notifications?.Items;

    private string GetActivityDescription(Domain.Entities.Activity activity)
    {
        return activity.Type switch
        {
            Domain.ValueObjects.ActivityType.Gathering => "采集资源中...",
            Domain.ValueObjects.ActivityType.Crafting => "制作物品中...",
            Domain.ValueObjects.ActivityType.Battle => "战斗中...",
            Domain.ValueObjects.ActivityType.Training => "训练中...",
            _ => "未知活动"
        };
    }

    private double GetActivityProgress(Domain.Entities.Activity activity)
    {
        if (activity.Duration.TotalSeconds == 0) return 0;
        var elapsed = DateTime.UtcNow - activity.StartTime;
        return Math.Min(100, (elapsed.TotalSeconds / activity.Duration.TotalSeconds) * 100);
    }

    private TimeSpan GetRemainingTime(Domain.Entities.Activity activity)
    {
        var elapsed = DateTime.UtcNow - activity.StartTime;
        var remaining = activity.Duration - elapsed;
        return remaining.TotalSeconds > 0 ? remaining : TimeSpan.Zero;
    }

    private TimeSpan GetTotalTime(Domain.Entities.Activity activity)
    {
        return activity.Duration;
    }

    private bool IsActivityCompleted(Domain.Entities.Activity activity)
    {
        return GetRemainingTime(activity) <= TimeSpan.Zero;
    }

    private bool IsActivityPaused(Domain.Entities.Activity activity)
    {
        return activity.State == Domain.ValueObjects.ActivityState.Paused;
    }

    private IEnumerable<string> GetActivityRewards(Domain.Entities.Activity activity)
    {
        // This would normally come from the activity configuration
        return activity.Type switch
        {
            Domain.ValueObjects.ActivityType.Gathering => new[] { "木材", "石材", "经验值" },
            Domain.ValueObjects.ActivityType.Crafting => new[] { "制作物品", "熟练度", "经验值" },
            Domain.ValueObjects.ActivityType.Battle => new[] { "经验值", "金币", "装备" },
            Domain.ValueObjects.ActivityType.Training => new[] { "属性提升", "经验值" },
            _ => Array.Empty<string>()
        };
    }

    private void PauseActivity(Guid activityId)
    {
        Dispatcher.Dispatch(new PauseActivityAction(activityId));
    }

    private void ResumeActivity(Guid activityId)
    {
        Dispatcher.Dispatch(new ResumeActivityAction(activityId));
    }

    private void CancelActivity(Guid activityId)
    {
        Dispatcher.Dispatch(new CancelActivityAction(activityId));
    }
}

<style>
    .game-dashboard {
        padding: 1rem 0;
    }

    .character-stats {
        font-size: 0.9rem;
    }

    .notification-item {
        font-size: 0.85rem;
        border-radius: 4px;
        background-color: #f8f9fa;
    }

    .card {
        box-shadow: 0 1px 3px rgba(0,0,0,0.1);
        border: 1px solid #e0e0e0;
    }

    .card-header {
        background-color: #f8f9fa;
        border-bottom: 1px solid #dee2e6;
    }

    .btn-outline-danger:hover,
    .btn-outline-success:hover,
    .btn-outline-info:hover,
    .btn-outline-warning:hover {
        transform: translateY(-1px);
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }
</style>
