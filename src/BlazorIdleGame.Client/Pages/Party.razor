@page "/party"
@using BlazorIdleGame.Client.Models
@using BlazorIdleGame.Client.Components.Party
@using BlazorIdleGame.Client.Store.PartyStore
@using BlazorIdleGame.Client.Store.GameStore
@using Fluxor
@using Fluxor.Blazor.Web.Components
@inherits FluxorComponent

@inject IState<BlazorIdleGame.Client.Store.PartyStore.PartyState> PartyState
@inject IState<BlazorIdleGame.Client.Store.GameStore.GameState> GameState
@inject IDispatcher Dispatcher

<PageTitle>BlazorIdleGame - ÁªÑÈòü</PageTitle>

<div class="party-page">
    <div class="page-header">
        <h1>ÁªÑÈòüÁ≥ªÁªü</h1>
        <nav aria-label="breadcrumb">
            <ol class="breadcrumb">
                <li class="breadcrumb-item"><a href="/game">Ê∏∏Êàè</a></li>
                <li class="breadcrumb-item active" aria-current="page">ÁªÑÈòü</li>
            </ol>
        </nav>
    </div>

    @if (!string.IsNullOrEmpty(PartyState.Value.ErrorMessage))
    {
        <div class="alert alert-danger" role="alert">
            <strong>ÈîôËØØ:</strong> @PartyState.Value.ErrorMessage
        </div>
    }

    <div class="party-content">
        @if (PartyState.Value.CurrentParty != null)
        {
            <!-- ÂΩìÂâçÈòü‰ºç‰ø°ÊÅØ -->
            <div class="current-party-section">
                <PartyInfoComponent 
                    Party="PartyState.Value.CurrentParty" 
                    CurrentPlayerId="@GetCurrentPlayerId()" />
            </div>
        }
        else
        {
            <!-- ÂàõÂª∫ÊàñÂä†ÂÖ•Èòü‰ºç -->
            <div class="party-management">
                <div class="create-party-section">
                    <div class="section-card">
                        <h4>ÂàõÂª∫Èòü‰ºç</h4>
                        <div class="create-form">
                            <div class="form-group">
                                <label for="partyName">Èòü‰ºçÂêçÁß∞</label>
                                <input type="text" id="partyName" class="form-control" 
                                       placeholder="ËæìÂÖ•Èòü‰ºçÂêçÁß∞" @bind="NewPartyName" />
                            </div>
                            <div class="form-group">
                                <label for="maxMembers">ÊúÄÂ§ß‰∫∫Êï∞</label>
                                <select id="maxMembers" class="form-control" @bind="MaxMembers">
                                    <option value="2">2‰∫∫</option>
                                    <option value="3">3‰∫∫</option>
                                    <option value="4">4‰∫∫</option>
                                    <option value="5">5‰∫∫</option>
                                </select>
                            </div>
                            <button class="btn btn-success btn-block" 
                                    @onclick="CreateParty" 
                                    disabled="@(string.IsNullOrWhiteSpace(NewPartyName) || PartyState.Value.IsLoading)">
                                @if (PartyState.Value.IsLoading)
                                {
                                    <span class="spinner-border spinner-border-sm" role="status"></span>
                                    <span>ÂàõÂª∫‰∏≠...</span>
                                }
                                else
                                {
                                    <span>ÂàõÂª∫Èòü‰ºç</span>
                                }
                            </button>
                        </div>
                    </div>
                </div>
                
                <div class="join-party-section">
                    <div class="section-card">
                        <h4>ÂèØÁî®Èòü‰ºç</h4>
                        
                        <div class="refresh-section">
                            <button class="btn btn-outline-primary btn-sm" 
                                    @onclick="RefreshAvailableParties"
                                    disabled="@PartyState.Value.IsLoading">
                                @if (PartyState.Value.IsLoading)
                                {
                                    <span class="spinner-border spinner-border-sm" role="status"></span>
                                }
                                else
                                {
                                    <span>üîÑ</span>
                                }
                                Âà∑Êñ∞ÂàóË°®
                            </button>
                        </div>
                        
                        @if (PartyState.Value.AvailableParties.Any())
                        {
                            <div class="available-parties">
                                @foreach (var party in PartyState.Value.AvailableParties)
                                {
                                    <div class="party-card">
                                        <div class="party-card-header">
                                            <h6>@party.Name</h6>
                                            <span class="party-status @GetStatusClass(party.Status)">
                                                @GetStatusText(party.Status)
                                            </span>
                                        </div>
                                        
                                        <div class="party-card-body">
                                            <div class="party-info">
                                                <span class="info-item">
                                                    <strong>‰∫∫Êï∞:</strong> @party.Members.Count / @party.MaxMembers
                                                </span>
                                                <span class="info-item">
                                                    <strong>ÈòüÈïø:</strong> @GetLeaderName(party)
                                                </span>
                                                <span class="info-item">
                                                    <strong>ÂàõÂª∫:</strong> @party.CreatedAt.ToString("MM-dd HH:mm")
                                                </span>
                                            </div>
                                            
                                            <div class="party-members-preview">
                                                @foreach (var member in party.Members.Take(3))
                                                {
                                                    <span class="member-tag">
                                                        @if (member.IsLeader) { <span>üëë</span> }
                                                        @member.Name (Lv.@member.Level)
                                                    </span>
                                                }
                                                @if (party.Members.Count > 3)
                                                {
                                                    <span class="member-tag more">+@(party.Members.Count - 3)Êõ¥Â§ö</span>
                                                }
                                            </div>
                                        </div>
                                        
                                        <div class="party-card-actions">
                                            <button class="btn btn-primary btn-sm" 
                                                    @onclick="() => JoinParty(party.Id)"
                                                    disabled="@(party.IsFull || PartyState.Value.IsLoading)">
                                                @if (party.IsFull)
                                                {
                                                    <span>Èòü‰ºçÂ∑≤Êª°</span>
                                                }
                                                else
                                                {
                                                    <span>Âä†ÂÖ•Èòü‰ºç</span>
                                                }
                                            </button>
                                        </div>
                                    </div>
                                }
                            </div>
                        }
                        else
                        {
                            <div class="no-parties">
                                <p>ÊöÇÊó†ÂèØÁî®Èòü‰ºç</p>
                                <small class="text-muted">ÂàõÂª∫‰∏Ä‰∏™Êñ∞Èòü‰ºçÊàñÁ®çÂêéÂÜçËØï</small>
                            </div>
                        }
                    </div>
                </div>
            </div>
        }
        
        <!-- Èòü‰ºçÈÇÄËØ∑ -->
        @if (PartyState.Value.PendingInvites.Any())
        {
            <div class="invites-section">
                <div class="section-card">
                    <h5>Èòü‰ºçÈÇÄËØ∑</h5>
                    @foreach (var invite in PartyState.Value.PendingInvites)
                    {
                        <div class="invite-card">
                            <div class="invite-info">
                                <strong>@invite.PartyName</strong>
                                <small>Êù•Ëá™ @invite.InviterName ÁöÑÈÇÄËØ∑</small>
                                <small class="expire-time">
                                    ËøáÊúüÊó∂Èó¥: @invite.ExpireTime.ToString("MM-dd HH:mm")
                                </small>
                            </div>
                            <div class="invite-actions">
                                <button class="btn btn-success btn-sm" @onclick="() => AcceptInvite(invite)">
                                    Êé•Âèó
                                </button>
                                <button class="btn btn-outline-secondary btn-sm" @onclick="() => DeclineInvite(invite)">
                                    ÊãíÁªù
                                </button>
                            </div>
                        </div>
                    }
                </div>
            </div>
        }
    </div>
</div>

@code {
    [Inject] private NavigationManager Navigation { get; set; } = default!;

    private string NewPartyName = "";
    private int MaxMembers = 5;

    protected override void OnInitialized()
    {
        // Ëá™Âä®Âà∑Êñ∞ÂèØÁî®Èòü‰ºçÂàóË°®
        if (!PartyState.Value.AvailableParties.Any() && !PartyState.Value.IsLoading)
        {
            RefreshAvailableParties();
        }
    }

    private void CreateParty()
    {
        if (!string.IsNullOrWhiteSpace(NewPartyName))
        {
            Dispatcher.Dispatch(new CreatePartyAction(NewPartyName.Trim(), MaxMembers));
            NewPartyName = "";
        }
    }

    private void JoinParty(string partyId)
    {
        Dispatcher.Dispatch(new JoinPartyAction(partyId));
    }

    private void RefreshAvailableParties()
    {
        Dispatcher.Dispatch(new LoadAvailablePartiesAction());
    }

    private void AcceptInvite(PartyInvite invite)
    {
        Dispatcher.Dispatch(new JoinPartyAction(invite.PartyId));
        // TODO: ‰ªéÈÇÄËØ∑ÂàóË°®‰∏≠ÁßªÈô§
    }

    private void DeclineInvite(PartyInvite invite)
    {
        // TODO: ÂÆûÁé∞ÊãíÁªùÈÇÄËØ∑ÁöÑÈÄªËæë
    }

    private string? GetCurrentPlayerId()
    {
        return GameState.Value.CurrentGameState?.Player.Id;
    }

    private string GetLeaderName(PartyInfo party)
    {
        var leader = party.Members.FirstOrDefault(m => m.IsLeader);
        return leader?.Name ?? "Êú™Áü•";
    }

    private string GetStatusClass(PartyStatus status)
    {
        return status switch
        {
            PartyStatus.Idle => "idle",
            PartyStatus.Preparing => "preparing",
            PartyStatus.InActivity => "in-activity",
            PartyStatus.Disbanding => "disbanding",
            _ => ""
        };
    }

    private string GetStatusText(PartyStatus status)
    {
        return status switch
        {
            PartyStatus.Idle => "Á©∫Èó≤",
            PartyStatus.Preparing => "ÂáÜÂ§á‰∏≠",
            PartyStatus.InActivity => "Ê¥ªÂä®‰∏≠",
            PartyStatus.Disbanding => "Ëß£Êï£‰∏≠",
            _ => "Êú™Áü•"
        };
    }
}

<style>
    .party-page {
        padding: 20px;
        min-height: 100vh;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    }

    .page-header {
        background: rgba(255, 255, 255, 0.95);
        border-radius: 12px;
        padding: 20px;
        margin-bottom: 30px;
        box-shadow: 0 4px 12px rgba(0,0,0,0.1);
    }

    .page-header h1 {
        margin: 0 0 10px 0;
        color: #333;
        font-size: 2.2em;
    }

    .breadcrumb {
        margin: 0;
        background: transparent;
        padding: 0;
    }

    .party-content {
        display: flex;
        flex-direction: column;
        gap: 30px;
    }

    .current-party-section {
        background: rgba(255, 255, 255, 0.95);
        border-radius: 12px;
        padding: 20px;
        box-shadow: 0 4px 8px rgba(0,0,0,0.1);
    }

    .party-management {
        display: grid;
        grid-template-columns: 400px 1fr;
        gap: 30px;
    }

    .section-card {
        background: rgba(255, 255, 255, 0.95);
        border-radius: 12px;
        padding: 25px;
        box-shadow: 0 4px 8px rgba(0,0,0,0.1);
    }

    .section-card h4, .section-card h5 {
        margin: 0 0 20px 0;
        color: #333;
        border-bottom: 2px solid #dee2e6;
        padding-bottom: 10px;
    }

    .create-form {
        display: flex;
        flex-direction: column;
        gap: 20px;
    }

    .form-group {
        display: flex;
        flex-direction: column;
        gap: 8px;
    }

    .form-group label {
        font-weight: bold;
        color: #333;
    }

    .refresh-section {
        margin-bottom: 20px;
        text-align: right;
    }

    .available-parties {
        display: flex;
        flex-direction: column;
        gap: 15px;
        max-height: 600px;
        overflow-y: auto;
    }

    .party-card {
        border: 2px solid #dee2e6;
        border-radius: 8px;
        background: white;
        transition: all 0.2s ease;
    }

    .party-card:hover {
        transform: translateY(-2px);
        box-shadow: 0 6px 12px rgba(0,0,0,0.15);
        border-color: #007bff;
    }

    .party-card-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 15px 20px;
        border-bottom: 1px solid #dee2e6;
        background: #f8f9fa;
    }

    .party-card-header h6 {
        margin: 0;
        color: #333;
        font-size: 1.1em;
    }

    .party-status {
        padding: 4px 12px;
        border-radius: 20px;
        font-size: 0.8em;
        font-weight: bold;
    }

    .party-status.idle {
        background: #e2e3e5;
        color: #383d41;
    }

    .party-status.preparing {
        background: #fff3cd;
        color: #856404;
    }

    .party-status.in-activity {
        background: #d4edda;
        color: #155724;
    }

    .party-card-body {
        padding: 15px 20px;
    }

    .party-info {
        display: flex;
        flex-direction: column;
        gap: 8px;
        margin-bottom: 15px;
    }

    .info-item {
        font-size: 0.9em;
        color: #6c757d;
    }

    .party-members-preview {
        display: flex;
        flex-wrap: wrap;
        gap: 8px;
    }

    .member-tag {
        background: #e7f3ff;
        color: #0066cc;
        padding: 4px 8px;
        border-radius: 12px;
        font-size: 0.8em;
        font-weight: bold;
    }

    .member-tag.more {
        background: #f8f9fa;
        color: #6c757d;
    }

    .party-card-actions {
        padding: 15px 20px;
        border-top: 1px solid #dee2e6;
        background: #f8f9fa;
        text-align: right;
    }

    .no-parties {
        text-align: center;
        padding: 40px 20px;
        color: #6c757d;
    }

    .no-parties p {
        margin-bottom: 8px;
        font-size: 1.1em;
    }

    .invites-section {
        background: rgba(255, 255, 255, 0.95);
        border-radius: 12px;
        padding: 20px;
        box-shadow: 0 4px 8px rgba(0,0,0,0.1);
    }

    .invite-card {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 15px;
        background: #fff3cd;
        border: 1px solid #ffeaa7;
        border-radius: 8px;
        margin-bottom: 10px;
    }

    .invite-info {
        display: flex;
        flex-direction: column;
        gap: 4px;
    }

    .invite-info strong {
        color: #333;
        font-size: 1.1em;
    }

    .invite-info small {
        color: #6c757d;
        font-size: 0.9em;
    }

    .expire-time {
        color: #856404 !important;
        font-weight: bold;
    }

    .invite-actions {
        display: flex;
        gap: 10px;
    }

    /* Ëá™ÂÆö‰πâÊªöÂä®Êù° */
    .available-parties::-webkit-scrollbar {
        width: 6px;
    }

    .available-parties::-webkit-scrollbar-track {
        background: #f1f1f1;
        border-radius: 3px;
    }

    .available-parties::-webkit-scrollbar-thumb {
        background: #c1c1c1;
        border-radius: 3px;
    }

    @media (max-width: 1200px) {
        .party-management {
            grid-template-columns: 1fr;
        }
    }

    @media (max-width: 768px) {
        .party-page {
            padding: 10px;
        }

        .page-header h1 {
            font-size: 1.8em;
        }

        .party-card-header {
            flex-direction: column;
            gap: 10px;
            align-items: flex-start;
        }

        .invite-card {
            flex-direction: column;
            gap: 10px;
            align-items: flex-start;
        }

        .invite-actions {
            width: 100%;
            justify-content: stretch;
        }

        .invite-actions button {
            flex: 1;
        }
    }
</style>