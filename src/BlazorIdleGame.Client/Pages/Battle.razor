@page "/battle"
@using BlazorIdleGame.Client.Models
@using BlazorIdleGame.Client.Components.Battle
@using BlazorIdleGame.Client.Store.BattleStore
@using BlazorIdleGame.Client.Store.GameStore
@using Fluxor
@using Fluxor.Blazor.Web.Components
@inherits FluxorComponent

@inject IState<BlazorIdleGame.Client.Store.BattleStore.BattleState> BattleState
@inject IState<BlazorIdleGame.Client.Store.GameStore.GameState> GameState
@inject IDispatcher Dispatcher

<PageTitle>BlazorIdleGame - 战斗</PageTitle>

<div class="battle-page">
    <div class="page-header">
        <h1>战斗系统</h1>
        <nav aria-label="breadcrumb">
            <ol class="breadcrumb">
                <li class="breadcrumb-item"><a href="/game">游戏</a></li>
                <li class="breadcrumb-item active" aria-current="page">战斗</li>
            </ol>
        </nav>
    </div>

    @if (!string.IsNullOrEmpty(BattleState.Value.ErrorMessage))
    {
        <div class="alert alert-danger" role="alert">
            <strong>错误:</strong> @BattleState.Value.ErrorMessage
        </div>
    }

    @if (BattleState.Value.CurrentBattle != null)
    {
        var battle = BattleState.Value.CurrentBattle;
        
        <div class="battle-arena">
            <!-- 战斗状态栏 -->
            <div class="battle-status-bar">
                <div class="battle-info">
                    <h3>
                        @GetBattleTypeText(battle.Type) 
                        @if (battle.IsPartyBattle)
                        {
                            <span class="party-badge">组队</span>
                        }
                    </h3>
                    <div class="battle-details">
                        <span class="battle-round">第 @battle.Round 回合</span>
                        <span class="battle-status @GetBattleStatusClass(battle.Status)">
                            @GetBattleStatusText(battle.Status)
                        </span>
                        <span class="battle-duration">
                            持续时间: @GetBattleDuration(battle)
                        </span>
                    </div>
                </div>
                
                <div class="battle-actions">
                    @if (battle.IsActive)
                    {
                        <button class="btn btn-warning" @onclick="FleeBattle">
                            🏃‍♂️ 逃离战斗
                        </button>
                    }
                    else
                    {
                        <button class="btn btn-secondary" @onclick="ReturnToGame">
                            返回游戏
                        </button>
                    }
                </div>
            </div>

            <!-- 战斗场地 -->
            <div class="battle-field">
                <!-- 玩家队伍 -->
                <div class="team-section player-team">
                    <h4>我方队伍</h4>
                    <div class="participants-grid">
                        @foreach (var participant in battle.PlayerTeam)
                        {
                            <BattleParticipantComponent 
                                Participant="participant"
                                ShowSkillButtons="battle.IsActive"
                                EnemyIds="battle.EnemyTeam.Where(e => e.IsAlive).Select(e => e.Id).ToList()" />
                        }
                    </div>
                </div>

                <!-- 敌方队伍 -->
                <div class="team-section enemy-team">
                    <h4>敌方队伍</h4>
                    <div class="participants-grid">
                        @foreach (var participant in battle.EnemyTeam)
                        {
                            <BattleParticipantComponent 
                                Participant="participant"
                                ShowSkillButtons="false" />
                        }
                    </div>
                </div>
            </div>

            <!-- 战斗日志和奖励 -->
            <div class="battle-sidebar">
                <BattleLogComponent 
                    BattleLogs="battle.Logs"
                    MaxLogEntries="30"
                    OnClearLogs="ClearBattleLogs" />
                
                @if (battle.Rewards != null)
                {
                    <div class="battle-rewards-card">
                        <h5>战斗奖励</h5>
                        
                        <div class="rewards-grid">
                            @if (battle.Rewards.Experience > 0)
                            {
                                <div class="reward-item experience">
                                    <span class="reward-icon">📈</span>
                                    <span class="reward-text">经验 +@battle.Rewards.Experience</span>
                                </div>
                            }
                            
                            @if (battle.Rewards.Gold > 0)
                            {
                                <div class="reward-item gold">
                                    <span class="reward-icon">💰</span>
                                    <span class="reward-text">金币 +@battle.Rewards.Gold</span>
                                </div>
                            }
                            
                            @foreach (var item in battle.Rewards.Items)
                            {
                                <div class="reward-item item">
                                    <span class="reward-icon">📦</span>
                                    <span class="reward-text">@item.Key x@item.Value</span>
                                </div>
                            }
                        </div>
                        
                        @if (battle.Rewards.IsPartyReward && battle.Rewards.MemberRewards != null)
                        {
                            <div class="party-rewards">
                                <h6>队员奖励分配</h6>
                                @foreach (var memberReward in battle.Rewards.MemberRewards)
                                {
                                    <div class="member-reward">
                                        <strong>@memberReward.Key:</strong> @memberReward.Value 经验
                                    </div>
                                }
                            </div>
                        }
                    </div>
                }
                
                <!-- 快速战斗按钮 -->
                @if (!battle.IsActive)
                {
                    <div class="quick-battle-section">
                        <h6>快速战斗</h6>
                        <div class="quick-battle-buttons">
                            <button class="btn btn-primary btn-sm" @onclick="() => StartQuickBattle(false)">
                                单人战斗
                            </button>
                            @if (HasParty())
                            {
                                <button class="btn btn-success btn-sm" @onclick="() => StartQuickBattle(true)">
                                    组队战斗
                                </button>
                            }
                        </div>
                    </div>
                }
            </div>
        </div>
    }
    else
    {
        <!-- 无战斗时显示的内容 -->
        <div class="no-battle-screen">
            <div class="no-battle-content">
                <h3>当前没有进行中的战斗</h3>
                <p>选择一个战斗模式开始冒险吧！</p>
                
                <div class="battle-modes">
                    <div class="battle-mode-card" @onclick="() => StartBattle(false)">
                        <div class="mode-icon">⚔️</div>
                        <div class="mode-info">
                            <h5>单人战斗</h5>
                            <p>独自面对敌人，磨练战斗技巧</p>
                        </div>
                    </div>
                    
                    @if (HasParty())
                    {
                        <div class="battle-mode-card" @onclick="() => StartBattle(true)">
                            <div class="mode-icon">🤝</div>
                            <div class="mode-info">
                                <h5>组队战斗</h5>
                                <p>与队友并肩作战，挑战强敌</p>
                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="battle-mode-card disabled">
                            <div class="mode-icon">🤝</div>
                            <div class="mode-info">
                                <h5>组队战斗</h5>
                                <p>需要先加入队伍</p>
                                <a href="/party" class="btn btn-sm btn-outline-primary">前往组队</a>
                            </div>
                        </div>
                    }
                </div>
                
                <div class="enemy-selection">
                    <h5>选择敌人</h5>
                    <div class="enemy-list">
                        <button class="btn btn-outline-danger enemy-btn" @onclick="() => SelectEnemy(\"goblin\")">
                            <span class="enemy-icon">👹</span>
                            <span>哥布林 (简单)</span>
                        </button>
                        <button class="btn btn-outline-danger enemy-btn" @onclick="() => SelectEnemy(\"orc\")">
                            <span class="enemy-icon">👺</span>
                            <span>兽人 (普通)</span>
                        </button>
                        <button class="btn btn-outline-danger enemy-btn" @onclick="() => SelectEnemy(\"dragon\")">
                            <span class="enemy-icon">🐲</span>
                            <span>巨龙 (困难)</span>
                        </button>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@code {
    [Inject] private NavigationManager Navigation { get; set; } = default!;

    private string selectedEnemyId = "goblin";

    private void StartBattle(bool isPartyBattle)
    {
        Dispatcher.Dispatch(new StartBattleAction(selectedEnemyId, isPartyBattle));
    }

    private void StartQuickBattle(bool isPartyBattle)
    {
        // 随机选择敌人
        var enemies = new[] { "goblin", "orc", "skeleton" };
        var random = new Random();
        var enemyId = enemies[random.Next(enemies.Length)];
        
        Dispatcher.Dispatch(new StartBattleAction(enemyId, isPartyBattle));
    }

    private void FleeBattle()
    {
        Dispatcher.Dispatch(new FleeBattleAction());
    }

    private void SelectEnemy(string enemyId)
    {
        selectedEnemyId = enemyId;
    }

    private void ReturnToGame()
    {
        Navigation.NavigateTo("/game");
    }

    private async Task ClearBattleLogs()
    {
        // TODO: 实现清理日志的逻辑
        await Task.CompletedTask;
    }

    private bool HasParty()
    {
        return GameState.Value.CurrentGameState?.CurrentParty != null;
    }

    private string GetBattleTypeText(BattleType type)
    {
        return type switch
        {
            BattleType.Solo => "单人战斗",
            BattleType.Party => "组队战斗",
            BattleType.Raid => "团队副本",
            BattleType.PvP => "PvP对战",
            _ => "未知战斗"
        };
    }

    private string GetBattleStatusClass(Models.BattleStatus status)
    {
        return status switch
        {
            Models.BattleStatus.Preparing => "preparing",
            Models.BattleStatus.InProgress => "in-progress",
            Models.BattleStatus.Victory => "victory",
            Models.BattleStatus.Defeat => "defeat",
            Models.BattleStatus.Abandoned => "abandoned",
            _ => ""
        };
    }

    private string GetBattleStatusText(Models.BattleStatus status)
    {
        return status switch
        {
            Models.BattleStatus.Preparing => "准备中",
            Models.BattleStatus.InProgress => "进行中",
            Models.BattleStatus.Victory => "胜利",
            Models.BattleStatus.Defeat => "失败",
            Models.BattleStatus.Abandoned => "已放弃",
            _ => "未知"
        };
    }

    private string GetBattleDuration(Models.BattleState battle)
    {
        var duration = (battle.EndTime ?? DateTime.UtcNow) - battle.StartTime;
        if (duration.TotalHours >= 1)
            return $"{duration.Hours}小时{duration.Minutes}分钟";
        if (duration.TotalMinutes >= 1)
            return $"{duration.Minutes}分钟{duration.Seconds}秒";
        return $"{duration.Seconds}秒";
    }
}

<style>
    .battle-page {
        padding: 20px;
        min-height: 100vh;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    }

    .page-header {
        background: rgba(255, 255, 255, 0.95);
        border-radius: 12px;
        padding: 20px;
        margin-bottom: 30px;
        box-shadow: 0 4px 12px rgba(0,0,0,0.1);
    }

    .page-header h1 {
        margin: 0 0 10px 0;
        color: #333;
        font-size: 2.2em;
    }

    .breadcrumb {
        margin: 0;
        background: transparent;
        padding: 0;
    }

    .battle-arena {
        display: grid;
        grid-template-columns: 1fr 300px;
        grid-template-rows: auto 1fr;
        gap: 20px;
        height: calc(100vh - 200px);
    }

    .battle-status-bar {
        grid-column: 1 / -1;
        background: rgba(255, 255, 255, 0.95);
        border-radius: 12px;
        padding: 20px;
        display: flex;
        justify-content: space-between;
        align-items: center;
        box-shadow: 0 4px 8px rgba(0,0,0,0.1);
    }

    .battle-info h3 {
        margin: 0 0 10px 0;
        color: #333;
        display: flex;
        align-items: center;
        gap: 10px;
    }

    .party-badge {
        background: #28a745;
        color: white;
        padding: 4px 12px;
        border-radius: 20px;
        font-size: 0.7em;
        font-weight: bold;
    }

    .battle-details {
        display: flex;
        gap: 20px;
        font-size: 0.9em;
        color: #6c757d;
    }

    .battle-status {
        padding: 2px 8px;
        border-radius: 12px;
        font-weight: bold;
    }

    .battle-status.preparing {
        background: #fff3cd;
        color: #856404;
    }

    .battle-status.in-progress {
        background: #d4edda;
        color: #155724;
    }

    .battle-status.victory {
        background: #d1ecf1;
        color: #0c5460;
    }

    .battle-status.defeat {
        background: #f8d7da;
        color: #721c24;
    }

    .battle-field {
        background: rgba(255, 255, 255, 0.95);
        border-radius: 12px;
        padding: 20px;
        display: flex;
        flex-direction: column;
        gap: 30px;
        overflow-y: auto;
        box-shadow: 0 4px 8px rgba(0,0,0,0.1);
    }

    .team-section h4 {
        margin: 0 0 15px 0;
        color: #333;
        text-align: center;
        padding-bottom: 10px;
        border-bottom: 2px solid #dee2e6;
    }

    .participants-grid {
        display: flex;
        flex-direction: column;
        gap: 15px;
    }

    .battle-sidebar {
        display: flex;
        flex-direction: column;
        gap: 20px;
        overflow-y: auto;
    }

    .battle-rewards-card {
        background: rgba(255, 255, 255, 0.95);
        border-radius: 8px;
        padding: 15px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }

    .battle-rewards-card h5 {
        margin: 0 0 15px 0;
        color: #333;
        text-align: center;
    }

    .rewards-grid {
        display: flex;
        flex-direction: column;
        gap: 8px;
        margin-bottom: 15px;
    }

    .reward-item {
        display: flex;
        align-items: center;
        gap: 8px;
        padding: 8px 12px;
        border-radius: 6px;
        font-size: 0.9em;
    }

    .reward-item.experience {
        background: #e7f3ff;
        color: #0066cc;
    }

    .reward-item.gold {
        background: #fff3cd;
        color: #856404;
    }

    .reward-item.item {
        background: #f8f9fa;
        color: #6c757d;
    }

    .reward-icon {
        font-size: 1.1em;
    }

    .party-rewards {
        border-top: 1px solid #dee2e6;
        padding-top: 15px;
    }

    .party-rewards h6 {
        margin: 0 0 10px 0;
        color: #333;
    }

    .member-reward {
        font-size: 0.9em;
        color: #6c757d;
        margin-bottom: 4px;
    }

    .quick-battle-section {
        background: rgba(255, 255, 255, 0.95);
        border-radius: 8px;
        padding: 15px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }

    .quick-battle-section h6 {
        margin: 0 0 10px 0;
        color: #333;
        text-align: center;
    }

    .quick-battle-buttons {
        display: flex;
        flex-direction: column;
        gap: 8px;
    }

    .no-battle-screen {
        display: flex;
        align-items: center;
        justify-content: center;
        min-height: 60vh;
    }

    .no-battle-content {
        background: rgba(255, 255, 255, 0.95);
        border-radius: 12px;
        padding: 40px;
        text-align: center;
        max-width: 800px;
        box-shadow: 0 8px 24px rgba(0,0,0,0.15);
    }

    .no-battle-content h3 {
        color: #333;
        margin-bottom: 15px;
    }

    .no-battle-content p {
        color: #6c757d;
        margin-bottom: 30px;
    }

    .battle-modes {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
        gap: 20px;
        margin-bottom: 30px;
    }

    .battle-mode-card {
        display: flex;
        align-items: center;
        gap: 15px;
        padding: 20px;
        border: 2px solid #dee2e6;
        border-radius: 8px;
        cursor: pointer;
        transition: all 0.3s ease;
        text-align: left;
    }

    .battle-mode-card:hover:not(.disabled) {
        transform: translateY(-2px);
        box-shadow: 0 6px 16px rgba(0,0,0,0.15);
        border-color: #007bff;
    }

    .battle-mode-card.disabled {
        opacity: 0.6;
        cursor: not-allowed;
    }

    .mode-icon {
        font-size: 2.5em;
        width: 60px;
        text-align: center;
    }

    .mode-info h5 {
        margin: 0 0 8px 0;
        color: #333;
    }

    .mode-info p {
        margin: 0 0 10px 0;
        color: #6c757d;
        font-size: 0.9em;
    }

    .enemy-selection h5 {
        color: #333;
        margin-bottom: 15px;
    }

    .enemy-list {
        display: flex;
        gap: 15px;
        justify-content: center;
        flex-wrap: wrap;
    }

    .enemy-btn {
        display: flex;
        flex-direction: column;
        align-items: center;
        gap: 8px;
        padding: 15px 20px;
        min-width: 120px;
    }

    .enemy-icon {
        font-size: 1.5em;
    }

    @media (max-width: 1200px) {
        .battle-arena {
            grid-template-columns: 1fr;
            grid-template-rows: auto auto auto;
        }

        .battle-sidebar {
            grid-row: 3;
        }
    }

    @media (max-width: 768px) {
        .battle-page {
            padding: 10px;
        }

        .page-header h1 {
            font-size: 1.8em;
        }

        .battle-status-bar {
            flex-direction: column;
            gap: 15px;
            text-align: center;
        }

        .battle-details {
            flex-direction: column;
            gap: 8px;
        }

        .battle-modes {
            grid-template-columns: 1fr;
        }

        .battle-mode-card {
            flex-direction: column;
            text-align: center;
        }

        .enemy-list {
            flex-direction: column;
            align-items: center;
        }
    }
</style>