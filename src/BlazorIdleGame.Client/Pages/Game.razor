@page "/game"
@using BlazorIdleGame.Client.Models
@using BlazorIdleGame.Client.Components.Game
@using BlazorIdleGame.Client.Store.GameStore
@using Fluxor
@using Fluxor.Blazor.Web.Components
@inherits FluxorComponent

@inject IState<BlazorIdleGame.Client.Store.GameStore.GameState> GameState
@inject IDispatcher Dispatcher

<PageTitle>BlazorIdleGame - 游戏</PageTitle>

<div class="game-page">
    <div class="page-header">
        <h1>BlazorIdleGame</h1>
        
        <div class="connection-status">
            @if (GameState.Value.IsLoading)
            {
                <span class="status loading">🔄 加载中...</span>
            }
            else if (GameState.Value.IsConnected)
            {
                <span class="status connected">🟢 已连接</span>
            }
            else
            {
                <span class="status disconnected">🔴 连接断开</span>
            }
        </div>
    </div>

    @if (!string.IsNullOrEmpty(GameState.Value.ErrorMessage))
    {
        <div class="alert alert-danger" role="alert">
            <strong>错误:</strong> @GameState.Value.ErrorMessage
        </div>
    }

    @if (GameState.Value.CurrentGameState != null)
    {
        <div class="game-content">
            <div class="left-panel">
                <PlayerInfoComponent PlayerInfo="GameState.Value.CurrentGameState.Player" />
                <ResourcesComponent Resources="GameState.Value.CurrentGameState.Resources" />
            </div>
            
            <div class="main-panel">
                <ActivitiesComponent Activities="GameState.Value.CurrentGameState.Activities" />
                
                <div class="game-modes">
                    <h4>游戏模式</h4>
                    <div class="mode-buttons">
                        <button class="btn btn-primary mode-btn" @onclick="() => NavigateToSoloMode()">
                            <div class="mode-icon">⚔️</div>
                            <div class="mode-text">
                                <strong>单人模式</strong>
                                <small>独自探险，提升实力</small>
                            </div>
                        </button>
                        
                        <button class="btn btn-success mode-btn" @onclick="() => NavigateToPartyMode()">
                            <div class="mode-icon">🤝</div>
                            <div class="mode-text">
                                <strong>组队模式</strong>
                                <small>与朋友并肩作战</small>
                            </div>
                        </button>
                        
                        @if (GameState.Value.CurrentGameState.CurrentBattle != null)
                        {
                            <button class="btn btn-warning mode-btn" @onclick="() => NavigateToBattle()">
                                <div class="mode-icon">⚔️</div>
                                <div class="mode-text">
                                    <strong>正在战斗</strong>
                                    <small>查看当前战斗</small>
                                </div>
                            </button>
                        }
                    </div>
                </div>
            </div>
            
            <div class="right-panel">
                @if (GameState.Value.CurrentGameState.CurrentParty != null)
                {
                    <div class="current-party-summary">
                        <h5>当前队伍</h5>
                        <div class="party-info">
                            <strong>@GameState.Value.CurrentGameState.CurrentParty.Name</strong>
                            <div class="party-members-count">
                                成员: @GameState.Value.CurrentGameState.CurrentParty.Members.Count / @GameState.Value.CurrentGameState.CurrentParty.MaxMembers
                            </div>
                            <div class="party-status">
                                状态: @GetPartyStatusText(GameState.Value.CurrentGameState.CurrentParty.Status)
                            </div>
                        </div>
                        <button class="btn btn-sm btn-outline-primary" @onclick="() => NavigateToPartyMode()">
                            查看详情
                        </button>
                    </div>
                }
                
                <div class="quick-actions">
                    <h5>快速操作</h5>
                    <div class="action-buttons">
                        <button class="btn btn-outline-primary btn-sm" @onclick="() => QuickBattle()">
                            快速战斗
                        </button>
                        <button class="btn btn-outline-success btn-sm" @onclick="() => QuickGather()">
                            快速采集
                        </button>
                        <button class="btn btn-outline-info btn-sm" @onclick="() => QuickTrain()">
                            快速训练
                        </button>
                    </div>
                </div>
                
                <div class="server-time">
                    <h6>服务器时间</h6>
                    <div class="time-display">
                        @GameState.Value.CurrentGameState.ServerTime.ToString("yyyy-MM-dd HH:mm:ss")
                    </div>
                </div>
            </div>
        </div>
    }
    else if (!GameState.Value.IsLoading)
    {
        <div class="loading-screen">
            <div class="loading-content">
                <h3>欢迎来到 BlazorIdleGame!</h3>
                <p>正在初始化游戏...</p>
                <button class="btn btn-primary" @onclick="InitializeGame">
                    开始游戏
                </button>
            </div>
        </div>
    }
</div>

@code {
    [Inject] private NavigationManager Navigation { get; set; } = default!;

    protected override void OnInitialized()
    {
        if (GameState.Value.CurrentGameState == null && !GameState.Value.IsLoading)
        {
            InitializeGame();
        }
    }

    private void InitializeGame()
    {
        Dispatcher.Dispatch(new LoadGameStateAction());
    }

    private void NavigateToSoloMode()
    {
        // 单人模式可以直接在这个页面操作，或者导航到专门页面
        // 这里简单实现为开始一个单人战斗
        QuickBattle();
    }

    private void NavigateToPartyMode()
    {
        Navigation.NavigateTo("/party");
    }

    private void NavigateToBattle()
    {
        Navigation.NavigateTo("/battle");
    }

    private void QuickBattle()
    {
        Dispatcher.Dispatch(new StartActivityAction(ActivityType.Battle, "goblin"));
    }

    private void QuickGather()
    {
        Dispatcher.Dispatch(new StartActivityAction(ActivityType.Gathering, "wood"));
    }

    private void QuickTrain()
    {
        Dispatcher.Dispatch(new StartActivityAction(ActivityType.Training, "strength"));
    }

    private string GetPartyStatusText(PartyStatus status)
    {
        return status switch
        {
            PartyStatus.Idle => "空闲",
            PartyStatus.Preparing => "准备中",
            PartyStatus.InActivity => "活动中",
            PartyStatus.Disbanding => "解散中",
            _ => "未知"
        };
    }
}

<style>
    .game-page {
        padding: 20px;
        min-height: 100vh;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    }

    .page-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 30px;
        padding: 20px;
        background: rgba(255, 255, 255, 0.95);
        border-radius: 12px;
        box-shadow: 0 4px 12px rgba(0,0,0,0.1);
    }

    .page-header h1 {
        margin: 0;
        color: #333;
        font-size: 2.5em;
        text-shadow: 2px 2px 4px rgba(0,0,0,0.1);
    }

    .connection-status .status {
        padding: 8px 16px;
        border-radius: 20px;
        font-weight: bold;
        font-size: 1.1em;
    }

    .status.loading {
        background: #fff3cd;
        color: #856404;
    }

    .status.connected {
        background: #d4edda;
        color: #155724;
    }

    .status.disconnected {
        background: #f8d7da;
        color: #721c24;
    }

    .game-content {
        display: grid;
        grid-template-columns: 300px 1fr 250px;
        gap: 20px;
        min-height: 600px;
    }

    .left-panel, .main-panel, .right-panel {
        display: flex;
        flex-direction: column;
        gap: 20px;
    }

    .game-modes {
        background: rgba(255, 255, 255, 0.95);
        border-radius: 12px;
        padding: 20px;
        box-shadow: 0 4px 8px rgba(0,0,0,0.1);
    }

    .game-modes h4 {
        margin: 0 0 20px 0;
        color: #333;
        text-align: center;
    }

    .mode-buttons {
        display: flex;
        flex-direction: column;
        gap: 15px;
    }

    .mode-btn {
        display: flex;
        align-items: center;
        gap: 15px;
        padding: 15px 20px;
        text-align: left;
        border-radius: 8px;
        transition: all 0.3s ease;
        border: 2px solid transparent;
    }

    .mode-btn:hover {
        transform: translateY(-2px);
        box-shadow: 0 6px 16px rgba(0,0,0,0.15);
    }

    .mode-icon {
        font-size: 2em;
        width: 50px;
        text-align: center;
    }

    .mode-text {
        display: flex;
        flex-direction: column;
        gap: 4px;
    }

    .mode-text strong {
        font-size: 1.1em;
    }

    .mode-text small {
        color: #6c757d;
        font-size: 0.9em;
    }

    .current-party-summary {
        background: rgba(255, 255, 255, 0.95);
        border-radius: 8px;
        padding: 15px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }

    .current-party-summary h5 {
        margin: 0 0 10px 0;
        color: #333;
    }

    .party-info {
        margin-bottom: 10px;
    }

    .party-members-count, .party-status {
        font-size: 0.9em;
        color: #6c757d;
        margin-top: 4px;
    }

    .quick-actions {
        background: rgba(255, 255, 255, 0.95);
        border-radius: 8px;
        padding: 15px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }

    .quick-actions h5 {
        margin: 0 0 10px 0;
        color: #333;
    }

    .action-buttons {
        display: flex;
        flex-direction: column;
        gap: 8px;
    }

    .server-time {
        background: rgba(255, 255, 255, 0.95);
        border-radius: 8px;
        padding: 15px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        text-align: center;
    }

    .server-time h6 {
        margin: 0 0 8px 0;
        color: #333;
    }

    .time-display {
        font-family: monospace;
        font-size: 0.9em;
        color: #007bff;
        font-weight: bold;
    }

    .loading-screen {
        display: flex;
        align-items: center;
        justify-content: center;
        min-height: 60vh;
    }

    .loading-content {
        text-align: center;
        background: rgba(255, 255, 255, 0.95);
        padding: 40px;
        border-radius: 12px;
        box-shadow: 0 8px 24px rgba(0,0,0,0.15);
    }

    .loading-content h3 {
        color: #333;
        margin-bottom: 15px;
    }

    .loading-content p {
        color: #6c757d;
        margin-bottom: 25px;
    }

    @media (max-width: 1200px) {
        .game-content {
            grid-template-columns: 1fr;
            grid-template-rows: auto auto auto;
        }
    }

    @media (max-width: 768px) {
        .game-page {
            padding: 10px;
        }

        .page-header {
            flex-direction: column;
            gap: 15px;
            text-align: center;
        }

        .page-header h1 {
            font-size: 2em;
        }

        .mode-btn {
            flex-direction: column;
            text-align: center;
            gap: 10px;
        }

        .mode-text {
            align-items: center;
        }
    }
</style>