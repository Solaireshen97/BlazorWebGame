@using BlazorIdleGame.Client.Models
@using Fluxor
@inherits FluxorComponent

@if (BattleLogs != null && BattleLogs.Any())
{
    <div class="battle-log-card">
        <h5>战斗日志</h5>
        
        <div class="log-container" @ref="logContainer">
            @foreach (var log in BattleLogs.TakeLast(MaxLogEntries))
            {
                <div class="log-entry @GetLogClass(log)">
                    <div class="log-time">
                        [@log.Timestamp.ToString("HH:mm:ss")]
                    </div>
                    <div class="log-content">
                        <span class="attacker">@log.AttackerName</span>
                        <span class="action">@GetActionText(log.ActionType)</span>
                        <span class="target">@log.TargetName</span>
                        @if (log.Damage > 0)
                        {
                            <span class="damage">
                                @($"{log.Damage}点伤害")
                                @if (log.IsCritical)
                                {
                                    <span class="critical">【暴击！】</span>
                                }
                            </span>
                        }
                    </div>
                </div>
            }
        </div>
        
        @if (BattleLogs.Count > MaxLogEntries)
        {
            <div class="log-info">
                显示最近 @MaxLogEntries 条记录，共 @BattleLogs.Count 条
            </div>
        }
        
        <div class="log-controls">
            <button class="btn btn-sm btn-outline-secondary" @onclick="ScrollToBottom">
                滚动到底部
            </button>
            <button class="btn btn-sm btn-outline-secondary" @onclick="ClearOldLogs">
                清理旧日志
            </button>
        </div>
    </div>
}
else
{
    <div class="battle-log-card empty">
        <h5>战斗日志</h5>
        <p class="no-logs">暂无战斗记录</p>
    </div>
}

@code {
    [Parameter] public List<BattleLog>? BattleLogs { get; set; }
    [Parameter] public int MaxLogEntries { get; set; } = 50;
    [Parameter] public EventCallback OnClearLogs { get; set; }

    private ElementReference logContainer;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (BattleLogs?.Any() == true)
        {
            await ScrollToBottom();
        }
    }

    private async Task ScrollToBottom()
    {
        try
        {
            await logContainer.FocusAsync();
            // 使用 JavaScript 滚动到底部
            await Task.Delay(50); // 短暂延迟确保DOM更新
        }
        catch
        {
            // 忽略滚动错误
        }
    }

    private async Task ClearOldLogs()
    {
        if (OnClearLogs.HasDelegate)
        {
            await OnClearLogs.InvokeAsync();
        }
    }

    private string GetLogClass(BattleLog log)
    {
        var classes = new List<string>();
        
        switch (log.ActionType)
        {
            case BattleActionType.Attack:
                classes.Add("attack");
                break;
            case BattleActionType.Skill:
                classes.Add("skill");
                break;
            case BattleActionType.Heal:
                classes.Add("heal");
                break;
            case BattleActionType.Buff:
                classes.Add("buff");
                break;
            case BattleActionType.Debuff:
                classes.Add("debuff");
                break;
        }
        
        if (log.IsCritical)
        {
            classes.Add("critical");
        }
        
        return string.Join(" ", classes);
    }

    private string GetActionText(BattleActionType actionType)
    {
        return actionType switch
        {
            BattleActionType.Attack => "攻击了",
            BattleActionType.Skill => "对",
            BattleActionType.Heal => "治疗了",
            BattleActionType.Buff => "给",
            BattleActionType.Debuff => "对",
            _ => "作用于"
        };
    }
}

<style>
    .battle-log-card {
        background: #f8f9fa;
        border-radius: 8px;
        padding: 15px;
        margin-bottom: 20px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        max-height: 400px;
        display: flex;
        flex-direction: column;
    }

    .battle-log-card h5 {
        margin: 0 0 15px 0;
        color: #333;
        text-align: center;
        border-bottom: 2px solid #dee2e6;
        padding-bottom: 10px;
    }

    .battle-log-card.empty {
        text-align: center;
        max-height: none;
    }

    .no-logs {
        color: #6c757d;
        font-style: italic;
        margin: 20px 0;
    }

    .log-container {
        flex: 1;
        overflow-y: auto;
        max-height: 300px;
        padding: 5px;
        border: 1px solid #dee2e6;
        border-radius: 4px;
        background: white;
        margin-bottom: 10px;
    }

    .log-entry {
        display: flex;
        align-items: flex-start;
        gap: 10px;
        padding: 6px 8px;
        margin-bottom: 2px;
        border-radius: 4px;
        font-size: 0.9em;
        line-height: 1.3;
    }

    .log-entry:hover {
        background: #f8f9fa;
    }

    .log-entry.attack {
        border-left: 3px solid #dc3545;
    }

    .log-entry.skill {
        border-left: 3px solid #007bff;
    }

    .log-entry.heal {
        border-left: 3px solid #28a745;
    }

    .log-entry.buff {
        border-left: 3px solid #17a2b8;
    }

    .log-entry.debuff {
        border-left: 3px solid #ffc107;
    }

    .log-entry.critical {
        background: linear-gradient(90deg, rgba(255,193,7,0.1), transparent);
        font-weight: bold;
    }

    .log-time {
        color: #6c757d;
        font-size: 0.8em;
        min-width: 70px;
        white-space: nowrap;
    }

    .log-content {
        flex: 1;
        display: flex;
        align-items: center;
        gap: 4px;
        flex-wrap: wrap;
    }

    .attacker {
        font-weight: bold;
        color: #007bff;
    }

    .target {
        font-weight: bold;
        color: #dc3545;
    }

    .action {
        color: #333;
    }

    .damage {
        color: #dc3545;
        font-weight: bold;
    }

    .critical {
        color: #ffc107;
        font-weight: bold;
        text-shadow: 1px 1px 2px rgba(0,0,0,0.3);
        animation: glow 1s ease-in-out;
    }

    @keyframes glow {
        0%, 100% { text-shadow: 1px 1px 2px rgba(0,0,0,0.3); }
        50% { text-shadow: 0 0 8px rgba(255,193,7,0.8), 1px 1px 2px rgba(0,0,0,0.3); }
    }

    .log-info {
        font-size: 0.8em;
        color: #6c757d;
        text-align: center;
        margin-bottom: 10px;
        padding: 4px 8px;
        background: #e9ecef;
        border-radius: 4px;
    }

    .log-controls {
        display: flex;
        gap: 10px;
        justify-content: center;
    }

    .log-controls .btn {
        font-size: 0.8em;
        padding: 4px 12px;
    }

    /* 自定义滚动条样式 */
    .log-container::-webkit-scrollbar {
        width: 6px;
    }

    .log-container::-webkit-scrollbar-track {
        background: #f1f1f1;
        border-radius: 3px;
    }

    .log-container::-webkit-scrollbar-thumb {
        background: #c1c1c1;
        border-radius: 3px;
    }

    .log-container::-webkit-scrollbar-thumb:hover {
        background: #a8a8a8;
    }

    @media (max-width: 768px) {
        .battle-log-card {
            max-height: 300px;
        }

        .log-container {
            max-height: 200px;
        }

        .log-entry {
            flex-direction: column;
            gap: 4px;
            align-items: flex-start;
        }

        .log-time {
            min-width: auto;
        }

        .log-controls {
            flex-direction: column;
            align-items: stretch;
        }
    }
</style>

<script>
    window.scrollLogToBottom = (element) => {
        if (element) {
            element.scrollTop = element.scrollHeight;
        }
    };
</script>