@page "/leatherworking"
@using BlazorWebGame.Models
@using BlazorWebGame.Models.Items
@using BlazorWebGame.Services
@using BlazorWebGame.Utils
@using BlazorWebGame.Shared.Professions
@inject GameStateService GameState
@inject CharacterService CharacterService
@implements IDisposable

<PageTitle>制皮</PageTitle>

@if (GameState.ActiveCharacter is Player character)
{
    <div class="production-layout">
        <div class="header-section">
            <ProfessionHeader Title="制皮"
                              ProfessionType="Leatherworking"
                              Level="@CharacterService.GetLevel(character, ProductionProfession.Leatherworking)"
                              Experience="@character.ProductionProfessionXP.GetValueOrDefault(ProductionProfession.Leatherworking)"
                              GatheringSpeedBonus="@CharacterService.GetTotalCraftingSpeedBonus(character)"
                              ExtraLootChance="0" />

            <QuickSlotBar Title="生产食物"
                          QuickSlots="@character.ProductionFoodQuickSlots"
                          Cooldowns="@character.ConsumableCooldowns"
                          Inventory="@character.Inventory"
                          OnSlotClicked="@((slotId) => OpenQuickSlotPicker(ConsumableCategory.Food, slotId, FoodType.Production))"
                          OnSlotCleared="@((slotId) => GameState.ClearQuickSlotItem(ConsumableCategory.Food, slotId, FoodType.Production))" />
        </div>

        @if (character.CurrentAction == PlayerActionState.CraftingLeatherworking && character.CurrentRecipe is Recipe currentRecipe)
        {
            <ActionProgressCard Title="@($"正在制作: {currentRecipe.Name}")"
                                ShowProgressBar="true"
                                ProgressPercentage="@(GetCraftingProgress(character))"
                                RemainingTimeText="@(GetCurrentCraftingTime(character).ToString("F1") + "s")">
                <button class="btn btn-danger" @onclick="GameState.StopCurrentAction">停止制作</button>
            </ActionProgressCard>
        }
        else if (character.CurrentAction != PlayerActionState.Idle)
        {
            <ActionProgressCard Title="@($"{character.Name} 正在进行其他活动，无法开始制作！")"
                                IsBlocked="true">
                <button class="btn btn-warning" @onclick="GameState.StopCurrentAction">停止当前活动</button>
            </ActionProgressCard>
        }

        <div class="recipe-list">
            @foreach (var recipe in RecipeData.AllRecipes.Where(r => r.RequiredProfession == ProductionProfession.Leatherworking).OrderBy(r => r.RequiredLevel))
            {
                bool isLearned = recipe.IsDefault || character.LearnedRecipeIds.Contains(recipe.Id);
                bool canCraft = isLearned && CharacterService.GetLevel(character, ProductionProfession.Leatherworking) >= recipe.RequiredLevel;
                bool hasMaterials = CanAffordRecipe(character, recipe);

                <div class="recipe-card @(isLearned ? "" : "locked") @(canCraft ? "" : "level-locked")">
                    <div class="recipe-header">
                        <h5>@recipe.Name</h5>
                        <span class="recipe-level">Lv. @recipe.RequiredLevel</span>
                    </div>

                    <div class="recipe-details">
                        <div class="recipe-materials">
                            <h6>所需材料:</h6>
                            <ul>
                                @foreach (var ingredient in recipe.Ingredients)
                                {
                                    var item = ItemData.GetItemById(ingredient.Key);
                                    var ownedCount = GetItemCountInInventory(character, ingredient.Key);
                                    <li class="@(ownedCount >= ingredient.Value ? "has-mats" : "missing-mats")">
                                        @item?.Name: @ownedCount / @ingredient.Value
                                    </li>
                                }
                            </ul>
                        </div>
                        <div class="recipe-output">
                            <h6>产出:</h6>
                            <p>@ItemData.GetItemById(recipe.ResultingItemId)?.Name x @recipe.ResultingItemQuantity</p>
                        </div>
                    </div>

                    @if (isLearned)
                    {
                        @if (canCraft)
                        {
                            <button class="btn btn-success" @onclick="() => GameState.StartCrafting(recipe)" disabled="@(!hasMaterials || character.CurrentAction != PlayerActionState.Idle)">
                                @(hasMaterials ? "制作" : "材料不足")
                            </button>
                        }
                        else
                        {
                            <div class="lock-reason">需要制皮等级 @recipe.RequiredLevel</div>
                        }
                    }
                    else
                    {
                        var unlockItem = ItemData.GetItemById(recipe.UnlockItemId ?? "");
                        <div class="lock-reason">
                            @if (unlockItem != null)
                            {
                                <span>需要图纸: @unlockItem.Name</span>
                            }
                            else
                            {
                                <span>通过其他方式解锁</span>
                            }
                        </div>
                    }
                </div>
            }
        </div>
    </div>

    @if (_isPickerVisible)
    {
        <QuickSlotPicker Title="生产食物"
                         Items="@GetAvailableConsumablesForPicker(character)"
                         ItemCounts="@GetItemCounts(character)"
                         OnItemSelect="@SetQuickSlot"
                         OnCloseRequest="CloseQuickSlotPicker" />
    }
}
else
{
    <p>正在加载角色信息...</p>
}

@code {
    private bool _isPickerVisible = false;
    private int _managingSlotId;
    private ConsumableCategory _managingCategory;
    private FoodType _managingFoodType;

    protected override void OnInitialized()
    {
        GameState.OnStateChanged += StateHasChanged;
    }

    private Dictionary<string, int> GetItemCounts(Player character)
    {
        var result = new Dictionary<string, int>();
        foreach (var item in GetAvailableConsumablesForPicker(character))
        {
            result[item.Id] = GetItemCountInInventory(character, item.Id);
        }
        return result;
    }

    private double GetCurrentCraftingTime(Player character)
    {
        if (character.CurrentRecipe == null) return 0;
        double speedBonus = CharacterService.GetTotalCraftingSpeedBonus(character);
        return character.CurrentRecipe.CraftingTimeSeconds / (1 + speedBonus);
    }

    private double GetCraftingProgress(Player character)
    {
        var totalTime = GetCurrentCraftingTime(character);
        if (totalTime <= 0) return 0;
        var progress = (totalTime - character.CraftingCooldown) / totalTime;
        return Math.Clamp(progress * 100, 0, 100);
    }

    private bool CanAffordRecipe(Player character, Recipe recipe)
    {
        foreach (var ingredient in recipe.Ingredients)
        {
            if (GetItemCountInInventory(character, ingredient.Key) < ingredient.Value)
            {
                return false;
            }
        }
        return true;
    }

    private int GetItemCountInInventory(Player character, string itemId)
    {
        return character.Inventory.Where(s => s.ItemId == itemId).Sum(s => s.Quantity);
    }

    private List<Consumable> GetAvailableConsumablesForPicker(Player character)
    {
        var itemIdsInInventory = character.Inventory
            .Where(s => !s.IsEmpty && s.ItemId != null)
            .Select(s => s.ItemId!)
            .ToHashSet();

        return ItemData.AllItems
            .OfType<Consumable>()
            .Where(c => c.FoodType == _managingFoodType && itemIdsInInventory.Contains(c.Id))
            .ToList();
    }

    private void OpenQuickSlotPicker(ConsumableCategory category, int slotId, FoodType foodType)
    {
        _managingCategory = category;
        _managingSlotId = slotId;
        _managingFoodType = foodType;
        _isPickerVisible = true;
    }

    private void CloseQuickSlotPicker()
    {
        _isPickerVisible = false;
    }

    private void SetQuickSlot(string itemId)
    {
        GameState.SetQuickSlotItem(_managingCategory, _managingSlotId, itemId);
        CloseQuickSlotPicker();
    }

    public void Dispose()
    {
        GameState.OnStateChanged -= StateHasChanged;
    }
}