@page "/server-test"
@using BlazorWebGame.Client.Services
@using BlazorWebGame.Models
@inject HybridCharacterService HybridCharacterService
@inject HybridEventService HybridEventService
@inject ILogger<ServerIntegrationTest> Logger

<PageTitle>服务端集成测试</PageTitle>

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <h3 class="text-primary">服务端集成测试</h3>
            <p class="text-muted">测试客户端与服务端的角色和事件服务集成</p>
        </div>
    </div>

    <div class="row mb-3">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    <h5>服务模式状态</h5>
                </div>
                <div class="card-body">
                    <div class="form-check form-switch">
                        <input class="form-check-input" type="checkbox" id="serverModeSwitch" 
                               checked="@UseServerMode" @onchange="OnServerModeChanged" />
                        <label class="form-check-label" for="serverModeSwitch">
                            @(UseServerMode ? "服务端模式" : "本地模式")
                        </label>
                    </div>
                    <small class="text-muted">
                        当前模式: @(UseServerMode ? "通过API与服务端通信" : "使用本地逻辑")
                    </small>
                </div>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-md-6">
            <div class="card">
                <div class="card-header">
                    <h5>角色管理测试</h5>
                </div>
                <div class="card-body">
                    <div class="mb-3">
                        <input type="text" class="form-control" @bind="NewCharacterName" 
                               placeholder="输入新角色名称" />
                        <button class="btn btn-primary mt-2" @onclick="CreateCharacter" 
                                disabled="@(string.IsNullOrWhiteSpace(NewCharacterName))">
                            创建角色
                        </button>
                    </div>

                    <div class="mb-3">
                        <h6>当前角色列表 (@HybridCharacterService.AllCharacters.Count):</h6>
                        @if (HybridCharacterService.AllCharacters.Any())
                        {
                            <ul class="list-group">
                                @foreach (var character in HybridCharacterService.AllCharacters)
                                {
                                    <li class="list-group-item d-flex justify-content-between align-items-center">
                                        <div>
                                            <strong>@character.Name</strong>
                                            <small class="text-muted">(@character.Id)</small>
                                            @if (character == HybridCharacterService.ActiveCharacter)
                                            {
                                                <span class="badge bg-success ms-2">激活</span>
                                            }
                                        </div>
                                        <div>
                                            <span class="badge bg-info">@character.Health/@character.MaxHealth HP</span>
                                            <span class="badge bg-warning ms-1">@character.Gold 金币</span>
                                        </div>
                                    </li>
                                }
                            </ul>
                        }
                        else
                        {
                            <p class="text-muted">暂无角色</p>
                        }
                    </div>

                    @if (HybridCharacterService.ActiveCharacter != null)
                    {
                        <div class="mb-3">
                            <h6>经验值测试:</h6>
                            <div class="btn-group" role="group">
                                <button class="btn btn-sm btn-outline-primary" 
                                        @onclick="() => AddBattleXP(BattleProfession.Warrior, 100)">
                                    +100 战士经验
                                </button>
                                <button class="btn btn-sm btn-outline-success" 
                                        @onclick="() => AddGatheringXP(GatheringProfession.Miner, 50)">
                                    +50 采矿经验
                                </button>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>

        <div class="col-md-6">
            <div class="card">
                <div class="card-header">
                    <h5>事件系统测试</h5>
                </div>
                <div class="card-body">
                    <div class="mb-3">
                        <h6>触发测试事件:</h6>
                        <div class="btn-group-vertical d-grid gap-2">
                            <button class="btn btn-outline-info" @onclick="TriggerTestEvent">
                                触发通用状态变化事件
                            </button>
                            <button class="btn btn-outline-warning" @onclick="TriggerCharacterEvent">
                                触发角色相关事件
                            </button>
                        </div>
                    </div>

                    <div class="mb-3">
                        <h6>最近事件日志:</h6>
                        <div class="event-log" style="max-height: 300px; overflow-y: auto;">
                            @if (EventLog.Any())
                            {
                                @foreach (var logEntry in EventLog.TakeLast(10))
                                {
                                    <div class="small text-muted border-bottom pb-1 mb-1">
                                        <strong>@logEntry.EventType</strong> - @logEntry.Timestamp.ToString("HH:mm:ss")
                                        @if (!string.IsNullOrEmpty(logEntry.PlayerId))
                                        {
                                            <br /><small>玩家: @logEntry.PlayerId</small>
                                        }
                                    </div>
                                }
                            }
                            else
                            {
                                <p class="text-muted">暂无事件</p>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    @if (!string.IsNullOrEmpty(StatusMessage))
    {
        <div class="row mt-3">
            <div class="col-12">
                <div class="alert @(IsError ? "alert-danger" : "alert-success")" role="alert">
                    @StatusMessage
                </div>
            </div>
        </div>
    }
</div>

@code {
    private string NewCharacterName = "";
    private string StatusMessage = "";
    private bool IsError = false;
    private bool UseServerMode = false;
    private List<EventLogEntry> EventLog = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // 订阅事件
            HybridEventService.Subscribe(BlazorWebGame.Shared.Events.GameEventType.GenericStateChanged, OnGameEvent);
            HybridEventService.Subscribe(BlazorWebGame.Shared.Events.GameEventType.CharacterCreated, OnGameEvent);
            HybridEventService.Subscribe(BlazorWebGame.Shared.Events.GameEventType.ExperienceGained, OnGameEvent);
            HybridEventService.Subscribe(BlazorWebGame.Shared.Events.GameEventType.LevelUp, OnGameEvent);

            // 订阅角色服务状态变化
            HybridCharacterService.OnStateChanged += OnCharacterServiceStateChanged;

            // 初始化服务
            await HybridCharacterService.InitializeAsync();
            UseServerMode = true; // 现在总是使用服务器模式

            await HybridEventService.InitializeAsync("https://localhost:7000", UseServerMode);

            SetStatusMessage("服务初始化完成", false);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to initialize services");
            SetStatusMessage($"服务初始化失败: {ex.Message}", true);
        }
    }

    private void OnServerModeChanged(ChangeEventArgs e)
    {
        // 现在总是使用服务器模式，不允许切换
        UseServerMode = true;
        HybridEventService.UseServerMode = UseServerMode;

        SetStatusMessage("现在总是使用服务器模式", false);
        StateHasChanged();
    }

    private async Task CreateCharacter()
    {
        try
        {
            var success = await HybridCharacterService.CreateCharacterAsync(NewCharacterName);
            if (success)
            {
                SetStatusMessage($"成功创建角色: {NewCharacterName}", false);
                NewCharacterName = "";
            }
            else
            {
                SetStatusMessage("创建角色失败", true);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to create character");
            SetStatusMessage($"创建角色失败: {ex.Message}", true);
        }
        StateHasChanged();
    }

    private async Task AddBattleXP(BattleProfession profession, int amount)
    {
        if (HybridCharacterService.ActiveCharacter != null)
        {
            try
            {
                await HybridCharacterService.AddBattleXPAsync(HybridCharacterService.ActiveCharacter, profession, amount);
                SetStatusMessage($"添加了 {amount} 点 {profession} 经验", false);
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, "Failed to add battle XP");
                SetStatusMessage($"添加经验失败: {ex.Message}", true);
            }
        }
        StateHasChanged();
    }

    private async Task AddGatheringXP(GatheringProfession profession, int amount)
    {
        if (HybridCharacterService.ActiveCharacter != null)
        {
            try
            {
                await HybridCharacterService.AddGatheringXPAsync(HybridCharacterService.ActiveCharacter, profession, amount);
                SetStatusMessage($"添加了 {amount} 点 {profession} 经验", false);
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, "Failed to add gathering XP");
                SetStatusMessage($"添加经验失败: {ex.Message}", true);
            }
        }
        StateHasChanged();
    }

    private void TriggerTestEvent()
    {
        HybridEventService.RaiseEvent(BlazorWebGame.Shared.Events.GameEventType.GenericStateChanged, 
            "测试事件数据");
        SetStatusMessage("触发了通用状态变化事件", false);
    }

    private void TriggerCharacterEvent()
    {
        if (HybridCharacterService.ActiveCharacter != null)
        {
            HybridEventService.RaiseEvent(BlazorWebGame.Shared.Events.GameEventType.CharacterStatChanged, 
                "角色状态测试");
            SetStatusMessage("触发了角色状态变化事件", false);
        }
        else
        {
            SetStatusMessage("没有激活角色", true);
        }
    }

    private void OnGameEvent(BlazorWebGame.Shared.Events.GameEventArgs args)
    {
        EventLog.Add(new EventLogEntry 
        { 
            EventType = args.EventType.ToString(), 
            PlayerId = args.PlayerId, 
            Timestamp = args.Timestamp 
        });
        
        // 保持日志大小在合理范围内
        if (EventLog.Count > 50)
        {
            EventLog.RemoveRange(0, EventLog.Count - 50);
        }
        
        InvokeAsync(StateHasChanged);
    }

    private void OnCharacterServiceStateChanged()
    {
        InvokeAsync(StateHasChanged);
    }

    private void SetStatusMessage(string message, bool isError)
    {
        StatusMessage = message;
        IsError = isError;
        Logger.LogInformation("Status: {Message}", message);
        
        // 清除状态消息
        _ = Task.Delay(5000).ContinueWith(_ => {
            StatusMessage = "";
            InvokeAsync(StateHasChanged);
        });
    }

    public void Dispose()
    {
        HybridCharacterService.OnStateChanged -= OnCharacterServiceStateChanged;
    }

    private class EventLogEntry
    {
        public string EventType { get; set; } = "";
        public string? PlayerId { get; set; }
        public DateTime Timestamp { get; set; }
    }
}