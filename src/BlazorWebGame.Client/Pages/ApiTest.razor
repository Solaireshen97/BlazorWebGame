@page "/api-test"
@using BlazorWebGame.Client.Services.Api
@using BlazorWebGame.Shared.DTOs
@inject GameApiClient ApiClient
@inject GameApiService LegacyApi
@inject ShopApiService ShopApi
@inject ReputationApiService ReputationApi
@inject ProductionApiService ProductionApi

<PageTitle>API 测试页面</PageTitle>

<div class="container-fluid">
    <h3>🧪 API 服务测试页面</h3>
    
    <div class="row">
        <div class="col-md-4">
            <div class="card">
                <div class="card-header">
                    <h5>🔐 认证服务测试</h5>
                </div>
                <div class="card-body">
                    <button class="btn btn-primary mb-2" @onclick="TestAuthentication">测试演示登录</button>
                    <button class="btn btn-info mb-2" @onclick="TestServerConnection">检查服务器连接</button>
                    <div class="alert alert-info small">
                        <strong>认证状态:</strong> @_authStatus
                    </div>
                </div>
            </div>
        </div>
        
        <div class="col-md-4">
            <div class="card">
                <div class="card-header">
                    <h5>⚔️ 战斗服务测试</h5>
                </div>
                <div class="card-body">
                    <button class="btn btn-success mb-2" @onclick="TestGetActiveBattles">获取活跃战斗</button>
                    <button class="btn btn-warning mb-2" @onclick="TestBattleOperations">测试战斗操作</button>
                    <div class="alert alert-success small">
                        <strong>活跃战斗:</strong> @_activeBattleCount 个
                    </div>
                </div>
            </div>
        </div>
        
        <div class="col-md-4">
            <div class="card">
                <div class="card-header">
                    <h5>👥 组队服务测试</h5>
                </div>
                <div class="card-body">
                    <button class="btn btn-success mb-2" @onclick="TestGetAllParties">获取所有队伍</button>
                    <button class="btn btn-info mb-2" @onclick="TestPartyOperations">测试组队操作</button>
                    <div class="alert alert-success small">
                        <strong>活跃队伍:</strong> @_partyCount 个
                    </div>
                </div>
            </div>
        </div>
    </div>
    
    <div class="row mt-3">
        <div class="col-md-4">
            <div class="card">
                <div class="card-header">
                    <h5>👤 角色服务测试</h5>
                </div>
                <div class="card-body">
                    <button class="btn btn-success mb-2" @onclick="TestGetCharacters">获取角色列表</button>
                    <button class="btn btn-info mb-2" @onclick="TestCharacterDetails">获取角色详情</button>
                    <div class="alert alert-success small">
                        <strong>角色数量:</strong> @_characterCount 个
                    </div>
                </div>
            </div>
        </div>
        
        <div class="col-md-4">
            <div class="card">
                <div class="card-header">
                    <h5>🎒 库存服务测试</h5>
                </div>
                <div class="card-body">
                    <button class="btn btn-success mb-2" @onclick="TestInventoryOperations">测试库存操作</button>
                    <button class="btn btn-warning mb-2" @onclick="TestItemOperations">测试物品操作</button>
                    <div class="alert alert-info small">
                        <strong>库存状态:</strong> @_inventoryStatus
                    </div>
                </div>
            </div>
        </div>
        
        <div class="col-md-4">
            <div class="card">
                <div class="card-header">
                    <h5>⚒️ 生产服务测试</h5>
                </div>
                <div class="card-body">
                    <div class="mb-2">
                        <h6>采集功能测试</h6>
                        <button class="btn btn-success btn-sm me-1" @onclick="TestGetGatheringNodes">获取采集节点</button>
                        <button class="btn btn-info btn-sm me-1" @onclick="TestStartGathering">开始采集</button>
                        <button class="btn btn-warning btn-sm me-1" @onclick="TestStopGathering">停止采集</button>
                        <button class="btn btn-secondary btn-sm" @onclick="TestGatheringStatus">采集状态</button>
                    </div>
                    
                    <div class="mb-2">
                        <h6>制作功能测试</h6>
                        <button class="btn btn-success btn-sm me-1" @onclick="TestGetRecipes">获取配方</button>
                        <button class="btn btn-info btn-sm me-1" @onclick="TestStartCrafting">开始制作</button>
                        <button class="btn btn-warning btn-sm me-1" @onclick="TestStopCrafting">停止制作</button>
                        <button class="btn btn-secondary btn-sm" @onclick="TestCraftingStatus">制作状态</button>
                    </div>
                    
                    <div class="mb-2">
                        <button class="btn btn-primary btn-sm me-1" @onclick="TestNodeUnlock">节点解锁检查</button>
                        <button class="btn btn-dark btn-sm" @onclick="TestMaterialsCheck">材料检查</button>
                    </div>
                    
                    <div class="alert alert-success small mb-0">
                        <strong>采集节点:</strong> @_nodeCount 个<br/>
                        <strong>配方数量:</strong> @_recipeCount 个<br/>
                        <strong>采集状态:</strong> @_gatheringStatus<br/>
                        <strong>制作状态:</strong> @_craftingStatus
                    </div>
                </div>
            </div>
        </div>
    </div>
    
    <div class="row mt-3">
        <div class="col-md-4">
            <div class="card">
                <div class="card-header">
                    <h5>🛒 商店服务测试</h5>
                </div>
                <div class="card-body">
                    <button class="btn btn-success mb-2" @onclick="TestGetShopItems">获取商店物品</button>
                    <button class="btn btn-info mb-2" @onclick="TestGetShopCategories">获取商店分类</button>
                    <button class="btn btn-warning mb-2" @onclick="TestPurchaseItem">测试购买物品</button>
                    <button class="btn btn-danger mb-2" @onclick="TestSellItem">测试出售物品</button>
                    <div class="alert alert-info small">
                        <strong>商店状态:</strong> @_shopStatus
                    </div>
                </div>
            </div>
        </div>
        
        <div class="col-md-4">
            <div class="card">
                <div class="card-header">
                    <h5>⭐ 声望服务测试</h5>
                </div>
                <div class="card-body">
                    <button class="btn btn-success mb-2" @onclick="TestGetReputation">获取声望信息</button>
                    <button class="btn btn-info mb-2" @onclick="TestGetReputationDetails">获取详细声望</button>
                    <button class="btn btn-warning mb-2" @onclick="TestUpdateReputation">测试声望更新</button>
                    <button class="btn btn-primary mb-2" @onclick="TestReputationRewards">获取声望奖励</button>
                    <div class="alert alert-info small">
                        <strong>声望状态:</strong> @_reputationStatus
                    </div>
                </div>
            </div>
        </div>
        
        <div class="col-md-4">
            <div class="card">
                <div class="card-header">
                    <h5>📊 商店测试结果</h5>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-6">
                            <h6>商店物品数量</h6>
                            <div class="alert alert-primary small">@_shopItemCount 个物品</div>
                            
                            <h6>商店分类数量</h6>
                            <div class="alert alert-success small">@_shopCategoryCount 个分类</div>
                        </div>
                        <div class="col-md-6">
                            <h6>最后操作结果</h6>
                            <div class="alert alert-@(_lastShopTestSuccess ? "success" : "danger") small">
                                @_lastShopTestMessage
                            </div>
                            
                            <h6>测试统计</h6>
                            <div class="alert alert-info small">
                                成功: @_shopTestSuccessCount, 失败: @_shopTestFailureCount
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    
    <div class="row mt-3">
        <div class="col-md-8">
            <div class="card">
                <div class="card-header">
                    <h5>⭐ 声望测试结果</h5>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-6">
                            <h6>声望测试统计</h6>
                            <div class="alert alert-primary small">
                                成功: @_reputationTestSuccessCount, 失败: @_reputationTestFailureCount
                            </div>
                            
                            <h6>总声望值</h6>
                            <div class="alert alert-success small">@_totalReputationValue 点</div>
                        </div>
                        <div class="col-md-6">
                            <h6>最后操作结果</h6>
                            <div class="alert alert-@(_lastReputationTestSuccess ? "success" : "danger") small">
                                @_lastReputationTestMessage
                            </div>
                            
                            <h6>声望详情数量</h6>
                            <div class="alert alert-info small">@_reputationDetailCount 个阵营</div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    
    <!-- New Enhanced Testing Section -->
    <div class="row mt-3">
        <div class="col-md-12">
            <div class="card border-primary">
                <div class="card-header bg-primary text-white">
                    <h5>🚀 增强的生产和战斗事件测试</h5>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-3">
                            <h6>⚔️ 战斗事件测试</h6>
                            <button class="btn btn-primary btn-sm mb-2 w-100" @onclick="TestBattleEventCollection">测试战斗事件收集</button>
                            <button class="btn btn-info btn-sm mb-2 w-100" @onclick="TestBattleFlowOptimization">测试战斗流程优化</button>
                            <button class="btn btn-warning btn-sm mb-2 w-100" @onclick="TestBattleErrorHandling">测试战斗错误处理</button>
                            <div class="alert alert-info small">
                                <strong>战斗状态:</strong> @_battleTestStatus
                            </div>
                        </div>
                        
                        <div class="col-md-3">
                            <h6>⚒️ 生产事件测试</h6>
                            <button class="btn btn-success btn-sm mb-2 w-100" @onclick="TestProductionEventCollection">测试生产事件收集</button>
                            <button class="btn btn-info btn-sm mb-2 w-100" @onclick="TestGatheringOptimization">测试采集优化</button>
                            <button class="btn btn-warning btn-sm mb-2 w-100" @onclick="TestCraftingBatchProcessing">测试制作批处理</button>
                            <div class="alert alert-success small">
                                <strong>生产状态:</strong> @_productionTestStatus
                            </div>
                        </div>
                        
                        <div class="col-md-3">
                            <h6>📊 性能监控测试</h6>
                            <button class="btn btn-outline-primary btn-sm mb-2 w-100" @onclick="TestEventSystemPerformance">测试事件系统性能</button>
                            <button class="btn btn-outline-info btn-sm mb-2 w-100" @onclick="TestBatchProcessingEfficiency">测试批处理效率</button>
                            <button class="btn btn-outline-success btn-sm mb-2 w-100" @onclick="TestErrorRecovery">测试错误恢复</button>
                            <div class="alert alert-warning small">
                                <strong>性能指标:</strong> @_performanceMetrics
                            </div>
                        </div>
                        
                        <div class="col-md-3">
                            <h6>🔄 集成测试</h6>
                            <button class="btn btn-secondary btn-sm mb-2 w-100" @onclick="TestFullProductionFlow">测试完整生产流程</button>
                            <button class="btn btn-secondary btn-sm mb-2 w-100" @onclick="TestBattleProductionIntegration">测试战斗生产集成</button>
                            <button class="btn btn-danger btn-sm mb-2 w-100" @onclick="TestStressScenarios">测试压力场景</button>
                            <div class="alert alert-secondary small">
                                <strong>集成状态:</strong> @_integrationTestStatus
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    
    <div class="row mt-3">
        <div class="col-md-6">
            <div class="card">
                <div class="card-header">
                    <h5>📋 任务服务测试</h5>
                </div>
                <div class="card-body">
                    <button class="btn btn-success mb-2" @onclick="TestQuestOperations">测试任务操作</button>
                    <div class="alert alert-info small">
                        <strong>任务状态:</strong> @_questStatus
                    </div>
                </div>
            </div>
        </div>
        
        <div class="col-md-6">
            <div class="card">
                <div class="card-header">
                    <h5>📊 监控服务测试</h5>
                </div>
                <div class="card-body">
                    <button class="btn btn-info mb-2" @onclick="TestMonitoringServices">测试监控服务</button>
                    <div class="alert alert-warning small">
                        <strong>服务器状态:</strong> @_serverStatus
                    </div>
                </div>
            </div>
        </div>
    </div>
    
    <div class="row mt-3">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    <h5>📝 测试日志</h5>
                </div>
                <div class="card-body">
                    <div class="alert alert-secondary" style="max-height: 300px; overflow-y: auto;">
                        @foreach (var log in _testLogs)
                        {
                            <div>@log</div>
                        }
                    </div>
                    <button class="btn btn-secondary btn-sm" @onclick="ClearLogs">清空日志</button>
                    <button class="btn btn-success btn-sm" @onclick="RunAllTests">运行所有测试</button>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private string _authStatus = "未认证";
    private int _activeBattleCount = 0;
    private int _partyCount = 0;
    private int _characterCount = 0;
    private string _inventoryStatus = "未测试";
    private int _nodeCount = 0;
    private string _questStatus = "未测试";
    
    // Production system test fields
    private int _recipeCount = 0;
    private string _productionStatus = "未测试";
    private string _gatheringStatus = "未活跃";
    private string _craftingStatus = "未活跃";
    private bool _isGathering = false;
    private bool _isCrafting = false;
    private string _serverStatus = "未知";
    private List<string> _testLogs = new();
    
    // Enhanced test status variables
    private string _battleTestStatus = "未测试";
    private string _productionTestStatus = "未测试";
    private string _performanceMetrics = "无数据";
    private string _integrationTestStatus = "未测试";
    
    // Shop test status variables
    private string _shopStatus = "未测试";
    private int _shopItemCount = 0;
    private int _shopCategoryCount = 0;
    private bool _lastShopTestSuccess = false;
    private string _lastShopTestMessage = "尚未进行测试";
    private int _shopTestSuccessCount = 0;
    private int _shopTestFailureCount = 0;
    
    // Reputation test status variables
    private string _reputationStatus = "未测试";
    private int _totalReputationValue = 0;
    private int _reputationDetailCount = 0;
    private bool _lastReputationTestSuccess = false;
    private string _lastReputationTestMessage = "尚未进行测试";
    private int _reputationTestSuccessCount = 0;
    private int _reputationTestFailureCount = 0;

    private void AddLog(string message)
    {
        var timestamp = DateTime.Now.ToString("HH:mm:ss");
        _testLogs.Add($"[{timestamp}] {message}");
        StateHasChanged();
    }

    private void ClearLogs()
    {
        _testLogs.Clear();
        StateHasChanged();
    }

    private async Task TestAuthentication()
    {
        try
        {
            AddLog("🔐 开始测试认证服务...");
            var result = await ApiClient.SetupAuthenticationAsync();
            _authStatus = result.Contains("✅") ? "已认证" : "认证失败";
            AddLog($"认证结果: {result}");
        }
        catch (Exception ex)
        {
            AddLog($"❌ 认证测试失败: {ex.Message}");
            _authStatus = "认证异常";
        }
    }

    private async Task TestServerConnection()
    {
        try
        {
            AddLog("🔗 检查服务器连接状态...");
            var isAvailable = await ApiClient.IsServerAvailableAsync();
            _serverStatus = isAvailable ? "在线" : "离线";
            AddLog($"服务器状态: {_serverStatus}");
        }
        catch (Exception ex)
        {
            AddLog($"❌ 服务器连接检查失败: {ex.Message}");
            _serverStatus = "连接异常";
        }
    }

    private async Task TestGetActiveBattles()
    {
        try
        {
            AddLog("⚔️ 获取活跃战斗列表...");
            var response = await ApiClient.Battle.GetActiveBattlesAsync();
            if (response.Success && response.Data != null)
            {
                _activeBattleCount = response.Data.Count;
                AddLog($"✅ 获取到 {_activeBattleCount} 个活跃战斗");
            }
            else
            {
                AddLog($"⚠️ 获取活跃战斗失败: {response.Message}");
            }
        }
        catch (Exception ex)
        {
            AddLog($"❌ 战斗服务测试失败: {ex.Message}");
        }
    }

    private async Task TestBattleOperations()
    {
        AddLog("⚔️ 战斗操作测试...");
        AddLog("ℹ️ 战斗操作需要具体的角色和敌人ID，此处仅测试接口可用性");
        // 这里可以添加更具体的战斗操作测试
    }

    private async Task TestGetAllParties()
    {
        try
        {
            AddLog("👥 获取所有组队...");
            var response = await ApiClient.Party.GetAllPartiesAsync();
            if (response.Success && response.Data != null)
            {
                _partyCount = response.Data.Count;
                AddLog($"✅ 获取到 {_partyCount} 个活跃队伍");
            }
            else
            {
                AddLog($"⚠️ 获取队伍失败: {response.Message}");
            }
        }
        catch (Exception ex)
        {
            AddLog($"❌ 组队服务测试失败: {ex.Message}");
        }
    }

    private async Task TestPartyOperations()
    {
        AddLog("👥 组队操作测试...");
        AddLog("ℹ️ 组队操作需要具体的角色ID，此处仅测试接口可用性");
        // 这里可以添加更具体的组队操作测试
    }

    private async Task TestGetCharacters()
    {
        try
        {
            AddLog("👤 获取角色列表...");
            var response = await ApiClient.Character.GetCharactersAsync();
            if (response.Success && response.Data != null)
            {
                _characterCount = response.Data.Count;
                AddLog($"✅ 获取到 {_characterCount} 个角色");
            }
            else
            {
                AddLog($"⚠️ 获取角色失败: {response.Message}");
            }
        }
        catch (Exception ex)
        {
            AddLog($"❌ 角色服务测试失败: {ex.Message}");
        }
    }

    private async Task TestCharacterDetails()
    {
        AddLog("👤 角色详情测试...");
        AddLog("ℹ️ 角色详情查询需要具体的角色ID");
        // 可以在这里添加具体的角色详情测试
    }

    private async Task TestInventoryOperations()
    {
        AddLog("🎒 库存操作测试...");
        _inventoryStatus = "接口可用";
        AddLog("ℹ️ 库存操作需要具体的角色ID和物品ID");
    }

    private async Task TestItemOperations()
    {
        AddLog("🔧 物品操作测试...");
        AddLog("ℹ️ 物品操作包括使用、装备、出售等功能");
    }

    private async Task TestGetGatheringNodes()
    {
        try
        {
            AddLog("⚒️ 获取采集节点...");
            var response = await ProductionApi.GetGatheringNodesAsync();
            if (response.Success && response.Data != null)
            {
                _nodeCount = response.Data.Count;
                AddLog($"✅ 获取到 {_nodeCount} 个采集节点");
                
                // 显示前几个节点的详细信息
                foreach (var node in response.Data.Take(3))
                {
                    AddLog($"   📍 {node.Name} (等级:{node.RequiredLevel}, 时间:{node.GatheringTimeSeconds}s)");
                }
                
                if (_nodeCount > 3)
                {
                    AddLog($"   ... 还有 {_nodeCount - 3} 个节点");
                }
            }
            else
            {
                AddLog($"⚠️ 获取采集节点失败: {response.Message}");
            }
        }
        catch (Exception ex)
        {
            AddLog($"❌ 生产服务测试失败: {ex.Message}");
        }
    }

    private async Task TestStartGathering()
    {
        try
        {
            AddLog("🌿 测试开始采集...");
            
            // 首先获取一个测试用的节点
            var nodesResponse = await ProductionApi.GetGatheringNodesAsync();
            if (!nodesResponse.Success || nodesResponse.Data?.Any() != true)
            {
                AddLog("⚠️ 没有可用的采集节点进行测试");
                return;
            }
            
            var testNode = nodesResponse.Data.First();
            var request = new StartGatheringRequest
            {
                CharacterId = "test_character_001",
                NodeId = testNode.Id
            };
            
            var response = await ProductionApi.StartGatheringAsync(request);
            if (response.Success)
            {
                _isGathering = true;
                _gatheringStatus = $"采集中 - {testNode.Name}";
                AddLog($"✅ 开始采集 {testNode.Name}");
            }
            else
            {
                _gatheringStatus = "采集失败";
                AddLog($"⚠️ 开始采集失败: {response.Message}");
            }
        }
        catch (Exception ex)
        {
            AddLog($"❌ 开始采集异常: {ex.Message}");
        }
    }

    private async Task TestStopGathering()
    {
        try
        {
            AddLog("🛑 测试停止采集...");
            
            var request = new StopGatheringRequest
            {
                CharacterId = "test_character_001"
            };
            
            var response = await ProductionApi.StopGatheringAsync(request);
            if (response.Success)
            {
                _isGathering = false;
                _gatheringStatus = "已停止";
                AddLog("✅ 成功停止采集");
                
                if (response.Data != null)
                {
                    AddLog($"   获得物品: {response.Data.ItemId} x{response.Data.Quantity}");
                    AddLog($"   获得经验: {response.Data.XpGained}");
                }
            }
            else
            {
                AddLog($"⚠️ 停止采集失败: {response.Message}");
            }
        }
        catch (Exception ex)
        {
            AddLog($"❌ 停止采集异常: {ex.Message}");
        }
    }

    private async Task TestGatheringStatus()
    {
        try
        {
            AddLog("📊 查询采集状态...");
            
            var response = await ProductionApi.GetGatheringStateAsync("test_character_001");
            if (response.Success && response.Data != null)
            {
                var state = response.Data;
                if (state.IsGathering)
                {
                    _gatheringStatus = $"采集中 - 剩余 {state.RemainingTimeSeconds:F1}s";
                    AddLog($"✅ 正在采集节点: {state.CurrentNodeId}");
                    AddLog($"   剩余时间: {state.RemainingTimeSeconds:F1} 秒");
                    AddLog($"   预计完成: {state.EstimatedCompletionTime:HH:mm:ss}");
                }
                else
                {
                    _gatheringStatus = "未在采集";
                    AddLog("ℹ️ 角色当前未在进行采集活动");
                }
            }
            else
            {
                AddLog($"⚠️ 查询采集状态失败: {response.Message}");
            }
        }
        catch (Exception ex)
        {
            AddLog($"❌ 查询采集状态异常: {ex.Message}");
        }
    }

    private async Task TestGetRecipes()
    {
        try
        {
            AddLog("📜 获取制作配方...");
            
            var request = new GetRecipesRequest
            {
                CharacterId = "test_character_001",
                MaxLevel = 10 // 只获取低等级配方作为测试
            };
            
            var response = await ProductionApi.GetRecipesAsync(request);
            if (response.Success && response.Data != null)
            {
                _recipeCount = response.Data.Count;
                AddLog($"✅ 获取到 {_recipeCount} 个配方");
                
                // 按职业分组显示
                var groupedRecipes = response.Data.GroupBy(r => r.RequiredProfession);
                foreach (var group in groupedRecipes)
                {
                    AddLog($"   🛠️ {group.Key}: {group.Count()} 个配方");
                    foreach (var recipe in group.Take(2))
                    {
                        AddLog($"      - {recipe.Name} (等级:{recipe.RequiredLevel}, 时间:{recipe.CraftingTimeSeconds}s)");
                    }
                }
            }
            else
            {
                AddLog($"⚠️ 获取配方失败: {response.Message}");
            }
        }
        catch (Exception ex)
        {
            AddLog($"❌ 获取配方异常: {ex.Message}");
        }
    }

    private async Task TestStartCrafting()
    {
        try
        {
            AddLog("🔨 测试开始制作...");
            
            // 首先获取一个测试用的配方
            var recipesRequest = new GetRecipesRequest
            {
                CharacterId = "test_character_001",
                MaxLevel = 5
            };
            
            var recipesResponse = await ProductionApi.GetRecipesAsync(recipesRequest);
            if (!recipesResponse.Success || recipesResponse.Data?.Any() != true)
            {
                AddLog("⚠️ 没有可用的配方进行测试");
                return;
            }
            
            var testRecipe = recipesResponse.Data.First();
            var request = new StartCraftingRequest
            {
                CharacterId = "test_character_001",
                RecipeId = testRecipe.Id,
                Quantity = 1
            };
            
            var response = await ProductionApi.StartCraftingAsync(request);
            if (response.Success)
            {
                _isCrafting = true;
                _craftingStatus = $"制作中 - {testRecipe.Name}";
                AddLog($"✅ 开始制作 {testRecipe.Name}");
            }
            else
            {
                _craftingStatus = "制作失败";
                AddLog($"⚠️ 开始制作失败: {response.Message}");
            }
        }
        catch (Exception ex)
        {
            AddLog($"❌ 开始制作异常: {ex.Message}");
        }
    }

    private async Task TestStopCrafting()
    {
        try
        {
            AddLog("🛑 测试停止制作...");
            
            var request = new StopCraftingRequest
            {
                CharacterId = "test_character_001"
            };
            
            var response = await ProductionApi.StopCraftingAsync(request);
            if (response.Success)
            {
                _isCrafting = false;
                _craftingStatus = "已停止";
                AddLog("✅ 成功停止制作");
                
                if (response.Data != null)
                {
                    AddLog($"   制作物品: {response.Data.ItemId} x{response.Data.Quantity}");
                    AddLog($"   获得经验: {response.Data.XpGained}");
                }
            }
            else
            {
                AddLog($"⚠️ 停止制作失败: {response.Message}");
            }
        }
        catch (Exception ex)
        {
            AddLog($"❌ 停止制作异常: {ex.Message}");
        }
    }

    private async Task TestCraftingStatus()
    {
        try
        {
            AddLog("📊 查询制作状态...");
            
            var response = await ProductionApi.GetCraftingStateAsync("test_character_001");
            if (response.Success && response.Data != null)
            {
                var state = response.Data;
                if (state.IsCrafting)
                {
                    _craftingStatus = $"制作中 - 剩余 {state.RemainingTimeSeconds:F1}s";
                    AddLog($"✅ 正在制作配方: {state.CurrentRecipeId}");
                    AddLog($"   进度: {state.CompletedQuantity}/{state.TotalQuantity}");
                    AddLog($"   剩余时间: {state.RemainingTimeSeconds:F1} 秒");
                    AddLog($"   预计完成: {state.EstimatedCompletionTime:HH:mm:ss}");
                }
                else
                {
                    _craftingStatus = "未在制作";
                    AddLog("ℹ️ 角色当前未在进行制作活动");
                }
            }
            else
            {
                AddLog($"⚠️ 查询制作状态失败: {response.Message}");
            }
        }
        catch (Exception ex)
        {
            AddLog($"❌ 查询制作状态异常: {ex.Message}");
        }
    }

    private async Task TestNodeUnlock()
    {
        try
        {
            AddLog("🔓 测试节点解锁检查...");
            
            // 获取一个节点进行测试
            var nodesResponse = await ProductionApi.GetGatheringNodesAsync();
            if (!nodesResponse.Success || nodesResponse.Data?.Any() != true)
            {
                AddLog("⚠️ 没有可用的节点进行测试");
                return;
            }
            
            var testNode = nodesResponse.Data.First();
            var request = new NodeUnlockCheckRequest
            {
                CharacterId = "test_character_001",
                NodeId = testNode.Id
            };
            
            var response = await ProductionApi.CheckNodeUnlockStatusAsync(request);
            if (response.Success && response.Data != null)
            {
                var status = response.Data;
                if (status.IsUnlocked)
                {
                    AddLog($"✅ 节点 {testNode.Name} 已解锁");
                }
                else
                {
                    AddLog($"🔒 节点 {testNode.Name} 未解锁: {status.Reason}");
                    if (status.RequiredLevel.HasValue)
                    {
                        AddLog($"   需要等级: {status.RequiredLevel.Value}");
                    }
                }
            }
            else
            {
                AddLog($"⚠️ 检查节点解锁状态失败: {response.Message}");
            }
        }
        catch (Exception ex)
        {
            AddLog($"❌ 检查节点解锁状态异常: {ex.Message}");
        }
    }

    private async Task TestMaterialsCheck()
    {
        try
        {
            AddLog("🧪 测试材料检查...");
            
            // 获取一个配方进行测试
            var recipesRequest = new GetRecipesRequest
            {
                CharacterId = "test_character_001",
                MaxLevel = 5
            };
            
            var recipesResponse = await ProductionApi.GetRecipesAsync(recipesRequest);
            if (!recipesResponse.Success || recipesResponse.Data?.Any() != true)
            {
                AddLog("⚠️ 没有可用的配方进行测试");
                return;
            }
            
            var testRecipe = recipesResponse.Data.First();
            var response = await ProductionApi.CheckCraftingMaterialsAsync("test_character_001", testRecipe.Id, 1);
            
            if (response.Success)
            {
                if (response.Data)
                {
                    AddLog($"✅ 制作 {testRecipe.Name} 的材料充足");
                }
                else
                {
                    AddLog($"❌ 制作 {testRecipe.Name} 的材料不足");
                }
            }
            else
            {
                AddLog($"⚠️ 检查材料失败: {response.Message}");
            }
        }
        catch (Exception ex)
        {
            AddLog($"❌ 检查材料异常: {ex.Message}");
        }
    }

    private async Task TestProductionOperations()
    {
        AddLog("⚒️ 开始生产系统综合测试...");
        
        await TestGetGatheringNodes();
        await Task.Delay(500);
        
        await TestGetRecipes();
        await Task.Delay(500);
        
        await TestNodeUnlock();
        await Task.Delay(500);
        
        await TestMaterialsCheck();
        
        AddLog("✅ 生产系统综合测试完成");
    }

    private async Task TestQuestOperations()
    {
        AddLog("📋 任务操作测试...");
        _questStatus = "接口可用";
        AddLog("ℹ️ 任务操作包括接受、完成、更新进度等功能");
    }

    private async Task TestMonitoringServices()
    {
        try
        {
            AddLog("📊 监控服务测试...");
            var response = await ApiClient.Monitoring.GetGameStatusAsync();
            if (response.Success && response.Data != null)
            {
                _serverStatus = response.Data.ServerStatus;
                AddLog($"✅ 服务器状态: {_serverStatus}");
                AddLog($"活跃玩家: {response.Data.ActivePlayers}");
                AddLog($"活跃战斗: {response.Data.ActiveBattles}");
            }
            else
            {
                AddLog($"⚠️ 获取监控信息失败: {response.Message}");
            }
        }
        catch (Exception ex)
        {
            AddLog($"❌ 监控服务测试失败: {ex.Message}");
        }
    }

    private async Task RunAllTests()
    {
        AddLog("🚀 开始运行所有测试...");
        ClearLogs();
        
        await TestAuthentication();
        await Task.Delay(500);
        
        await TestServerConnection();
        await Task.Delay(500);
        
        await TestGetActiveBattles();
        await Task.Delay(500);
        
        await TestGetAllParties();
        await Task.Delay(500);
        
        await TestGetCharacters();
        await Task.Delay(500);
        
        await TestGetGatheringNodes();
        await Task.Delay(500);
        
        await TestMonitoringServices();
        await Task.Delay(500);
        
        // 添加声望测试
        await TestGetReputation();
        await Task.Delay(500);
        
        await TestGetReputationDetails();
        await Task.Delay(500);
        
        await TestReputationRewards();
        await Task.Delay(500);
        
        AddLog("✅ 所有测试完成!");
    }

    // ===== Enhanced Production and Battle Event Testing Methods =====

    /// <summary>
    /// 测试战斗事件收集
    /// </summary>
    private async Task TestBattleEventCollection()
    {
        try
        {
            AddLog("⚔️ 开始测试战斗事件收集...");
            _battleTestStatus = "测试中";
            
            // 1. 创建测试角色
            var characterRequest = new CreateCharacterRequest { Name = "BattleTestChar" };
            var characterResponse = await ApiClient.Character.CreateCharacterAsync(characterRequest);
            if (!characterResponse.Success || characterResponse.Data == null)
            {
                AddLog("❌ 创建测试角色失败");
                _battleTestStatus = "失败";
                return;
            }
            
            var characterId = characterResponse.Data.Id;
            AddLog($"✅ 创建测试角色成功: {characterId}");
            
            // 2. 开始战斗
            var battleRequest = new StartBattleRequest
            {
                CharacterId = characterId,
                EnemyId = "slime"  // 使用标准敌人
            };
            
            var battleResponse = await ApiClient.Battle.StartBattleAsync(battleRequest);
            if (!battleResponse.Success || battleResponse.Data == null)
            {
                AddLog($"❌ 开始战斗失败: {battleResponse.Message}");
                _battleTestStatus = "失败";
                return;
            }
            
            var battleId = battleResponse.Data.BattleId;
            AddLog($"✅ 战斗开始成功: {battleId}");
            
            // 3. 监控战斗进度和事件收集
            var progressChecks = 5;
            for (int i = 0; i < progressChecks; i++)
            {
                await Task.Delay(2000); // 等待2秒让战斗进行
                
                var stateResponse = await ApiClient.Battle.GetBattleStateAsync(battleId);
                if (stateResponse.Success && stateResponse.Data != null)
                {
                    var battle = stateResponse.Data;
                    AddLog($"🔄 战斗进度检查 {i+1}: 玩家血量 {battle.PlayerHealth}/{battle.PlayerMaxHealth}, " +
                           $"敌人血量 {battle.EnemyHealth}/{battle.EnemyMaxHealth}");
                    
                    if (!battle.IsActive)
                    {
                        AddLog("✅ 战斗已结束，事件收集完成");
                        break;
                    }
                }
                else
                {
                    AddLog($"⚠️ 获取战斗状态失败: {stateResponse.Message}");
                }
            }
            
            // 4. 清理：停止战斗
            await ApiClient.Battle.StopBattleAsync(battleId);
            AddLog("🧹 测试清理完成");
            
            _battleTestStatus = "成功";
            AddLog("✅ 战斗事件收集测试完成");
        }
        catch (Exception ex)
        {
            AddLog($"❌ 战斗事件收集测试异常: {ex.Message}");
            _battleTestStatus = "异常";
        }
    }

    /// <summary>
    /// 测试战斗流程优化
    /// </summary>
    private async Task TestBattleFlowOptimization()
    {
        try
        {
            AddLog("⚔️ 开始测试战斗流程优化...");
            _battleTestStatus = "优化测试中";
            
            // 创建多个并发战斗来测试批处理优化
            var tasks = new List<Task>();
            var battleIds = new List<Guid>();
            
            for (int i = 0; i < 3; i++)
            {
                var task = Task.Run(async () =>
                {
                    try
                    {
                        var charRequest = new CreateCharacterRequest { Name = $"OptimTestChar{i}" };
                        var charResponse = await ApiClient.Character.CreateCharacterAsync(charRequest);
                        if (charResponse.Success && charResponse.Data != null)
                        {
                            var battleRequest = new StartBattleRequest
                            {
                                CharacterId = charResponse.Data.Id,
                                EnemyId = "goblin"
                            };
                            
                            var battleResponse = await ApiClient.Battle.StartBattleAsync(battleRequest);
                            if (battleResponse.Success && battleResponse.Data != null)
                            {
                                lock (battleIds)
                                {
                                    battleIds.Add(battleResponse.Data.BattleId);
                                }
                                AddLog($"✅ 并发战斗 {i+1} 启动成功");
                            }
                        }
                    }
                    catch (Exception ex)
                    {
                        AddLog($"❌ 并发战斗 {i+1} 失败: {ex.Message}");
                    }
                });
                tasks.Add(task);
            }
            
            await Task.WhenAll(tasks);
            AddLog($"📊 成功创建 {battleIds.Count} 个并发战斗");
            
            // 等待一段时间让战斗进行
            await Task.Delay(5000);
            
            // 检查所有战斗状态
            var activeBattles = 0;
            foreach (var battleId in battleIds)
            {
                var stateResponse = await ApiClient.Battle.GetBattleStateAsync(battleId);
                if (stateResponse.Success && stateResponse.Data?.IsActive == true)
                {
                    activeBattles++;
                    await ApiClient.Battle.StopBattleAsync(battleId);
                }
            }
            
            AddLog($"🎯 战斗流程优化测试完成，处理了 {battleIds.Count} 个战斗");
            _battleTestStatus = "优化成功";
        }
        catch (Exception ex)
        {
            AddLog($"❌ 战斗流程优化测试异常: {ex.Message}");
            _battleTestStatus = "优化失败";
        }
    }

    /// <summary>
    /// 测试战斗错误处理
    /// </summary>
    private async Task TestBattleErrorHandling()
    {
        try
        {
            AddLog("⚔️ 开始测试战斗错误处理...");
            _battleTestStatus = "错误处理测试中";
            
            // 1. 测试无效角色ID
            var invalidBattleRequest = new StartBattleRequest
            {
                CharacterId = "invalid-character-id",
                EnemyId = "slime"
            };
            
            var invalidResponse = await ApiClient.Battle.StartBattleAsync(invalidBattleRequest);
            if (!invalidResponse.Success)
            {
                AddLog($"✅ 正确处理无效角色ID: {invalidResponse.Message}");
            }
            else
            {
                AddLog("❌ 未能正确处理无效角色ID");
            }
            
            // 2. 测试获取不存在的战斗状态
            var nonExistentBattleId = Guid.NewGuid();
            var stateResponse = await ApiClient.Battle.GetBattleStateAsync(nonExistentBattleId);
            if (!stateResponse.Success)
            {
                AddLog($"✅ 正确处理不存在的战斗ID: {stateResponse.Message}");
            }
            else
            {
                AddLog("❌ 未能正确处理不存在的战斗ID");
            }
            
            // 3. 测试停止不存在的战斗
            var stopResponse = await ApiClient.Battle.StopBattleAsync(nonExistentBattleId);
            AddLog($"🛑 停止不存在战斗的响应: {stopResponse.Message}");
            
            _battleTestStatus = "错误处理完成";
            AddLog("✅ 战斗错误处理测试完成");
        }
        catch (Exception ex)
        {
            AddLog($"❌ 战斗错误处理测试异常: {ex.Message}");
            _battleTestStatus = "错误处理异常";
        }
    }

    /// <summary>
    /// 测试生产事件收集
    /// </summary>
    private async Task TestProductionEventCollection()
    {
        try
        {
            AddLog("⚒️ 开始测试生产事件收集...");
            _productionTestStatus = "测试中";
            
            // 1. 获取采集节点
            var nodesResponse = await ProductionApi.GetGatheringNodesAsync();
            if (!nodesResponse.Success || nodesResponse.Data == null)
            {
                AddLog($"❌ 获取采集节点失败: {nodesResponse.Message}");
                _productionTestStatus = "失败";
                return;
            }
            
            AddLog($"✅ 获取到 {nodesResponse.Data.Count} 个采集节点");
            
            // 2. 创建测试角色
            var charRequest = new CreateCharacterRequest { Name = "ProductionTestChar" };
            var charResponse = await ApiClient.Character.CreateCharacterAsync(charRequest);
            if (!charResponse.Success || charResponse.Data == null)
            {
                AddLog("❌ 创建生产测试角色失败");
                _productionTestStatus = "失败";
                return;
            }
            
            var characterId = charResponse.Data.Id;
            AddLog($"✅ 创建生产测试角色成功: {characterId}");
            
            // 3. 测试采集操作（如果服务端支持）
            if (nodesResponse.Data.Any())
            {
                var firstNode = nodesResponse.Data.First();
                AddLog($"🔨 尝试在节点 {firstNode.Name} 开始采集");
                
                // 这里需要实际的采集API，目前我们只是模拟
                await Task.Delay(3000); // 模拟采集时间
                AddLog("✅ 采集事件收集模拟完成");
            }
            
            _productionTestStatus = "成功";
            AddLog("✅ 生产事件收集测试完成");
        }
        catch (Exception ex)
        {
            AddLog($"❌ 生产事件收集测试异常: {ex.Message}");
            _productionTestStatus = "异常";
        }
    }

    /// <summary>
    /// 测试采集优化
    /// </summary>
    private async Task TestGatheringOptimization()
    {
        try
        {
            AddLog("⚒️ 开始测试采集优化...");
            _productionTestStatus = "优化测试中";
            
            // 模拟多个角色同时采集来测试批处理
            var gatheringTasks = new List<Task>();
            
            for (int i = 0; i < 5; i++)
            {
                var task = Task.Run(async () =>
                {
                    try
                    {
                        var charRequest = new CreateCharacterRequest { Name = $"GatherChar{i}" };
                        var charResponse = await ApiClient.Character.CreateCharacterAsync(charRequest);
                        if (charResponse.Success)
                        {
                            AddLog($"✅ 采集角色 {i+1} 创建成功");
                            await Task.Delay(Random.Shared.Next(1000, 3000)); // 模拟采集时间
                            AddLog($"🔨 采集角色 {i+1} 完成采集");
                        }
                    }
                    catch (Exception ex)
                    {
                        AddLog($"❌ 采集角色 {i+1} 异常: {ex.Message}");
                    }
                });
                gatheringTasks.Add(task);
            }
            
            await Task.WhenAll(gatheringTasks);
            
            _productionTestStatus = "优化成功";
            AddLog("✅ 采集优化测试完成");
        }
        catch (Exception ex)
        {
            AddLog($"❌ 采集优化测试异常: {ex.Message}");
            _productionTestStatus = "优化失败";
        }
    }

    /// <summary>
    /// 测试制作批处理
    /// </summary>
    private async Task TestCraftingBatchProcessing()
    {
        try
        {
            AddLog("🔧 开始测试制作批处理...");
            _productionTestStatus = "批处理测试中";
            
            // 模拟批量制作操作
            var craftingBatch = Enumerable.Range(1, 10);
            var completedItems = 0;
            
            await Task.Run(async () =>
            {
                foreach (var item in craftingBatch)
                {
                    // 模拟制作物品
                    await Task.Delay(200); // 快速批处理
                    completedItems++;
                    
                    if (item % 3 == 0) // 每3个物品报告一次进度
                    {
                        AddLog($"🔧 批处理进度: {completedItems}/10 物品完成");
                    }
                }
            });
            
            AddLog($"✅ 制作批处理完成，共制作 {completedItems} 个物品");
            _productionTestStatus = "批处理成功";
        }
        catch (Exception ex)
        {
            AddLog($"❌ 制作批处理测试异常: {ex.Message}");
            _productionTestStatus = "批处理失败";
        }
    }

    /// <summary>
    /// 测试事件系统性能
    /// </summary>
    private async Task TestEventSystemPerformance()
    {
        try
        {
            AddLog("📊 开始测试事件系统性能...");
            var startTime = DateTime.UtcNow;
            
            // 执行一系列API调用来测试性能
            var performanceTasks = new Task[]
            {
                ApiClient.Character.GetCharactersAsync(),
                ApiClient.Battle.GetActiveBattlesAsync(),
                ApiClient.Party.GetAllPartiesAsync(),
                ProductionApi.GetGatheringNodesAsync(),
                ApiClient.Monitoring.GetGameStatusAsync()
            };
            
            await Task.WhenAll(performanceTasks);
            
            var elapsed = DateTime.UtcNow - startTime;
            _performanceMetrics = $"{elapsed.TotalMilliseconds:F0}ms";
            
            AddLog($"⚡ 性能测试完成，总耗时: {_performanceMetrics}");
        }
        catch (Exception ex)
        {
            AddLog($"❌ 事件系统性能测试异常: {ex.Message}");
            _performanceMetrics = "测试失败";
        }
    }

    /// <summary>
    /// 测试批处理效率
    /// </summary>
    private async Task TestBatchProcessingEfficiency()
    {
        try
        {
            AddLog("📈 开始测试批处理效率...");
            var startTime = DateTime.UtcNow;
            
            // 模拟大量小任务的批处理
            var batchTasks = Enumerable.Range(1, 50).Select(async i =>
            {
                await Task.Delay(10); // 模拟小任务
                return i;
            });
            
            var results = await Task.WhenAll(batchTasks);
            var elapsed = DateTime.UtcNow - startTime;
            
            var efficiency = results.Length / elapsed.TotalSeconds;
            _performanceMetrics = $"{efficiency:F1} ops/sec";
            
            AddLog($"⚡ 批处理效率测试完成: {_performanceMetrics}");
        }
        catch (Exception ex)
        {
            AddLog($"❌ 批处理效率测试异常: {ex.Message}");
            _performanceMetrics = "效率测试失败";
        }
    }

    /// <summary>
    /// 测试错误恢复
    /// </summary>
    private async Task TestErrorRecovery()
    {
        try
        {
            AddLog("🔄 开始测试错误恢复...");
            var errorCount = 0;
            var recoveryCount = 0;
            
            // 模拟一系列可能失败的操作
            for (int i = 0; i < 5; i++)
            {
                try
                {
                    // 故意使用无效数据来触发错误
                    var invalidResponse = await ApiClient.Battle.GetBattleStateAsync(Guid.Empty);
                    if (!invalidResponse.Success)
                    {
                        errorCount++;
                        // 模拟错误恢复
                        await Task.Delay(100);
                        recoveryCount++;
                    }
                }
                catch
                {
                    errorCount++;
                    recoveryCount++; // 异常也算作恢复处理
                }
            }
            
            _performanceMetrics = $"{recoveryCount}/{errorCount} 恢复";
            AddLog($"🔄 错误恢复测试完成: {_performanceMetrics}");
        }
        catch (Exception ex)
        {
            AddLog($"❌ 错误恢复测试异常: {ex.Message}");
            _performanceMetrics = "恢复测试失败";
        }
    }

    /// <summary>
    /// 测试完整生产流程
    /// </summary>
    private async Task TestFullProductionFlow()
    {
        try
        {
            AddLog("🔄 开始测试完整生产流程...");
            _integrationTestStatus = "流程测试中";
            
            // 1. 创建角色
            var charRequest = new CreateCharacterRequest { Name = "FullFlowTestChar" };
            var charResponse = await ApiClient.Character.CreateCharacterAsync(charRequest);
            if (!charResponse.Success)
            {
                AddLog("❌ 创建流程测试角色失败");
                _integrationTestStatus = "失败";
                return;
            }
            
            // 2. 获取资源
            var nodesResponse = await ProductionApi.GetGatheringNodesAsync();
            AddLog($"✅ 获取到 {nodesResponse.Data?.Count ?? 0} 个生产节点");
            
            // 3. 模拟采集
            await Task.Delay(2000);
            AddLog("🔨 完成资源采集阶段");
            
            // 4. 模拟制作
            await Task.Delay(1500);
            AddLog("🔧 完成物品制作阶段");
            
            // 5. 模拟库存更新
            await Task.Delay(500);
            AddLog("📦 完成库存更新阶段");
            
            _integrationTestStatus = "流程完成";
            AddLog("✅ 完整生产流程测试成功");
        }
        catch (Exception ex)
        {
            AddLog($"❌ 完整生产流程测试异常: {ex.Message}");
            _integrationTestStatus = "流程异常";
        }
    }

    /// <summary>
    /// 测试战斗生产集成
    /// </summary>
    private async Task TestBattleProductionIntegration()
    {
        try
        {
            AddLog("⚔️⚒️ 开始测试战斗生产集成...");
            _integrationTestStatus = "集成测试中";
            
            // 创建测试角色
            var charRequest = new CreateCharacterRequest { Name = "IntegrationTestChar" };
            var charResponse = await ApiClient.Character.CreateCharacterAsync(charRequest);
            if (!charResponse.Success || charResponse.Data == null)
            {
                AddLog("❌ 创建集成测试角色失败");
                _integrationTestStatus = "失败";
                return;
            }
            
            var characterId = charResponse.Data.Id;
            
            // 1. 开始战斗
            var battleRequest = new StartBattleRequest
            {
                CharacterId = characterId,
                EnemyId = "slime"
            };
            
            var battleResponse = await ApiClient.Battle.StartBattleAsync(battleRequest);
            if (battleResponse.Success && battleResponse.Data != null)
            {
                AddLog("⚔️ 战斗阶段开始");
                await Task.Delay(3000); // 让战斗进行一段时间
                
                // 停止战斗
                await ApiClient.Battle.StopBattleAsync(battleResponse.Data.BattleId);
                AddLog("⚔️ 战斗阶段完成");
            }
            
            // 2. 切换到生产活动
            AddLog("🔄 切换到生产阶段");
            await Task.Delay(2000); // 模拟生产活动
            AddLog("⚒️ 生产阶段完成");
            
            _integrationTestStatus = "集成成功";
            AddLog("✅ 战斗生产集成测试完成");
        }
        catch (Exception ex)
        {
            AddLog($"❌ 战斗生产集成测试异常: {ex.Message}");
            _integrationTestStatus = "集成异常";
        }
    }

    /// <summary>
    /// 测试压力场景
    /// </summary>
    private async Task TestStressScenarios()
    {
        try
        {
            AddLog("💥 开始测试压力场景...");
            _integrationTestStatus = "压力测试中";
            
            var stressTasks = new List<Task>();
            var successCount = 0;
            var failureCount = 0;
            
            // 创建多个并发任务来模拟高负载
            for (int i = 0; i < 10; i++)
            {
                var task = Task.Run(async () =>
                {
                    try
                    {
                        // 随机选择不同类型的操作
                        var operationType = Random.Shared.Next(3);
                        switch (operationType)
                        {
                            case 0: // 角色操作
                                var charResponse = await ApiClient.Character.GetCharactersAsync();
                                if (charResponse.Success) Interlocked.Increment(ref successCount);
                                else Interlocked.Increment(ref failureCount);
                                break;
                                
                            case 1: // 战斗操作
                                var battleResponse = await ApiClient.Battle.GetActiveBattlesAsync();
                                if (battleResponse.Success) Interlocked.Increment(ref successCount);
                                else Interlocked.Increment(ref failureCount);
                                break;
                                
                            case 2: // 生产操作
                                var nodeResponse = await ProductionApi.GetGatheringNodesAsync();
                                if (nodeResponse.Success) Interlocked.Increment(ref successCount);
                                else Interlocked.Increment(ref failureCount);
                                break;
                        }
                        
                        await Task.Delay(Random.Shared.Next(100, 500)); // 随机延迟
                    }
                    catch
                    {
                        Interlocked.Increment(ref failureCount);
                    }
                });
                stressTasks.Add(task);
            }
            
            await Task.WhenAll(stressTasks);
            
            var totalOperations = successCount + failureCount;
            var successRate = totalOperations > 0 ? (double)successCount / totalOperations * 100 : 0;
            
            AddLog($"💥 压力测试完成: {successCount}/{totalOperations} 成功 ({successRate:F1}%)");
            _integrationTestStatus = $"{successRate:F0}% 成功率";
        }
        catch (Exception ex)
        {
            AddLog($"❌ 压力场景测试异常: {ex.Message}");
            _integrationTestStatus = "压力测试异常";
        }
    }
    
    // Shop API Test Methods
    private async Task TestGetShopItems()
    {
        try
        {
            AddLog("🛒 获取商店物品...");
            var response = await ShopApi.GetShopItemsAsync();
            
            if (response.Success && response.Data != null)
            {
                _shopItemCount = response.Data.Count;
                _lastShopTestSuccess = true;
                _lastShopTestMessage = $"成功获取 {_shopItemCount} 个商店物品";
                _shopTestSuccessCount++;
                AddLog($"✅ 获取到 {_shopItemCount} 个商店物品");
                
                foreach (var item in response.Data.Take(3))
                {
                    AddLog($"   - {item.Name} ({item.Category}) - {item.Price} {(item.Currency == CurrencyTypeDto.Gold ? "金币" : "物品")}");
                }
                
                if (response.Data.Count > 3)
                {
                    AddLog($"   ... 还有 {response.Data.Count - 3} 个物品");
                }
            }
            else
            {
                _lastShopTestSuccess = false;
                _lastShopTestMessage = response.Message;
                _shopTestFailureCount++;
                AddLog($"⚠️ 获取商店物品失败: {response.Message}");
            }
            
            _shopStatus = "已测试";
        }
        catch (Exception ex)
        {
            _lastShopTestSuccess = false;
            _lastShopTestMessage = $"异常: {ex.Message}";
            _shopTestFailureCount++;
            AddLog($"❌ 商店物品测试失败: {ex.Message}");
            _shopStatus = "测试异常";
        }
    }
    
    private async Task TestGetShopCategories()
    {
        try
        {
            AddLog("🏷️ 获取商店分类...");
            var response = await ShopApi.GetShopCategoriesAsync();
            
            if (response.Success && response.Data != null)
            {
                _shopCategoryCount = response.Data.Count;
                _lastShopTestSuccess = true;
                _lastShopTestMessage = $"成功获取 {_shopCategoryCount} 个商店分类";
                _shopTestSuccessCount++;
                AddLog($"✅ 获取到 {_shopCategoryCount} 个商店分类");
                
                foreach (var category in response.Data)
                {
                    AddLog($"   - {category.Name} ({category.ItemCount} 个物品)");
                }
            }
            else
            {
                _lastShopTestSuccess = false;
                _lastShopTestMessage = response.Message;
                _shopTestFailureCount++;
                AddLog($"⚠️ 获取商店分类失败: {response.Message}");
            }
        }
        catch (Exception ex)
        {
            _lastShopTestSuccess = false;
            _lastShopTestMessage = $"异常: {ex.Message}";
            _shopTestFailureCount++;
            AddLog($"❌ 商店分类测试失败: {ex.Message}");
        }
    }
    
    private async Task TestPurchaseItem()
    {
        try
        {
            AddLog("💰 测试购买物品...");
            
            // 首先获取可购买的物品
            var itemsResponse = await ShopApi.GetShopItemsAsync();
            if (!itemsResponse.Success || itemsResponse.Data == null || !itemsResponse.Data.Any())
            {
                AddLog("⚠️ 没有可购买的物品，跳过购买测试");
                return;
            }
            
            var testItem = itemsResponse.Data.First();
            AddLog($"📦 尝试购买物品: {testItem.Name}");
            
            var purchaseRequest = new PurchaseRequestDto
            {
                CharacterId = "test-character-id",
                ItemId = testItem.Id,
                Quantity = 1
            };
            
            var response = await ShopApi.PurchaseItemAsync(purchaseRequest);
            
            if (response.Success && response.Data != null)
            {
                _lastShopTestSuccess = true;
                _lastShopTestMessage = $"购买测试: {response.Data.Message}";
                _shopTestSuccessCount++;
                AddLog($"✅ 购买测试结果: {response.Data.Message}");
                AddLog($"💰 剩余金币: {response.Data.RemainingGold}");
            }
            else
            {
                _lastShopTestSuccess = false;
                _lastShopTestMessage = response.Message;
                _shopTestFailureCount++;
                AddLog($"⚠️ 购买测试失败: {response.Message}");
                AddLog("ℹ️ 这通常是因为测试角色不存在或金币不足，这是正常的");
            }
        }
        catch (Exception ex)
        {
            _lastShopTestSuccess = false;
            _lastShopTestMessage = $"异常: {ex.Message}";
            _shopTestFailureCount++;
            AddLog($"❌ 购买测试异常: {ex.Message}");
        }
    }
    
    private async Task TestSellItem()
    {
        try
        {
            AddLog("💎 测试出售物品...");
            
            var sellRequest = new SellRequestDto
            {
                CharacterId = "test-character-id",
                ItemId = "EQ_WEP_001", // 假设存在的物品ID
                Quantity = 1
            };
            
            var response = await ShopApi.SellItemAsync(sellRequest);
            
            if (response.Success && response.Data != null)
            {
                _lastShopTestSuccess = true;
                _lastShopTestMessage = $"出售测试: {response.Data.Message}";
                _shopTestSuccessCount++;
                AddLog($"✅ 出售测试结果: {response.Data.Message}");
                AddLog($"💰 获得金币: {response.Data.GoldEarned}");
                AddLog($"💰 剩余金币: {response.Data.RemainingGold}");
            }
            else
            {
                _lastShopTestSuccess = false;
                _lastShopTestMessage = response.Message;
                _shopTestFailureCount++;
                AddLog($"⚠️ 出售测试失败: {response.Message}");
                AddLog("ℹ️ 这通常是因为测试角色不存在或物品不足，这是正常的");
            }
        }
        catch (Exception ex)
        {
            _lastShopTestSuccess = false;
            _lastShopTestMessage = $"异常: {ex.Message}";
            _shopTestFailureCount++;
            AddLog($"❌ 出售测试异常: {ex.Message}");
        }
    }
    
    // ===== Reputation API Test Methods =====
    
    /// <summary>
    /// 测试获取声望信息
    /// </summary>
    private async Task TestGetReputation()
    {
        try
        {
            AddLog("⭐ 获取声望信息...");
            
            // 使用测试角色ID（如果存在）
            var testCharacterId = "test-character-id";
            var response = await ReputationApi.GetReputationAsync(testCharacterId);
            
            if (response.Success && response.Data != null)
            {
                var reputation = response.Data;
                _totalReputationValue = reputation.FactionReputation.Values.Sum();
                _lastReputationTestSuccess = true;
                _lastReputationTestMessage = $"成功获取声望信息，总声望: {_totalReputationValue}";
                _reputationTestSuccessCount++;
                
                AddLog($"✅ 获取声望信息成功，总声望: {_totalReputationValue}");
                
                foreach (var faction in reputation.FactionReputation)
                {
                    AddLog($"   - {faction.Key}: {faction.Value} 点");
                }
            }
            else
            {
                _lastReputationTestSuccess = false;
                _lastReputationTestMessage = response.Message;
                _reputationTestFailureCount++;
                AddLog($"⚠️ 获取声望信息失败: {response.Message}");
            }
            
            _reputationStatus = "已测试";
        }
        catch (Exception ex)
        {
            _lastReputationTestSuccess = false;
            _lastReputationTestMessage = $"异常: {ex.Message}";
            _reputationTestFailureCount++;
            AddLog($"❌ 声望信息测试异常: {ex.Message}");
            _reputationStatus = "测试异常";
        }
    }
    
    /// <summary>
    /// 测试获取详细声望信息
    /// </summary>
    private async Task TestGetReputationDetails()
    {
        try
        {
            AddLog("⭐ 获取详细声望信息...");
            
            var testCharacterId = "test-character-id";
            var response = await ReputationApi.GetAllReputationDetailsAsync(testCharacterId);
            
            if (response.Success && response.Data != null)
            {
                _reputationDetailCount = response.Data.Count;
                _lastReputationTestSuccess = true;
                _lastReputationTestMessage = $"成功获取 {_reputationDetailCount} 个阵营的详细信息";
                _reputationTestSuccessCount++;
                
                AddLog($"✅ 获取到 {_reputationDetailCount} 个阵营的详细声望信息");
                
                foreach (var detail in response.Data.Take(3)) // 只显示前3个
                {
                    AddLog($"   - {detail.FactionName}: {detail.CurrentTier.Name} ({detail.CurrentValue}/{detail.CurrentTier.MaxValue})");
                    AddLog($"     进度: {detail.ProgressPercentage:F1}%");
                }
                
                if (response.Data.Count > 3)
                {
                    AddLog($"   ... 还有 {response.Data.Count - 3} 个阵营");
                }
            }
            else
            {
                _lastReputationTestSuccess = false;
                _lastReputationTestMessage = response.Message;
                _reputationTestFailureCount++;
                AddLog($"⚠️ 获取详细声望信息失败: {response.Message}");
            }
        }
        catch (Exception ex)
        {
            _lastReputationTestSuccess = false;
            _lastReputationTestMessage = $"异常: {ex.Message}";
            _reputationTestFailureCount++;
            AddLog($"❌ 详细声望信息测试异常: {ex.Message}");
        }
    }
    
    /// <summary>
    /// 测试声望更新
    /// </summary>
    private async Task TestUpdateReputation()
    {
        try
        {
            AddLog("⭐ 测试声望更新...");
            
            var testCharacterId = "test-character-id";
            var updateRequest = new UpdateReputationRequest
            {
                CharacterId = testCharacterId,
                FactionName = "StormwindGuard",
                Amount = 100,
                Reason = "API测试奖励"
            };
            
            var response = await ReputationApi.UpdateReputationAsync(updateRequest);
            
            if (response.Success && response.Data != null)
            {
                _lastReputationTestSuccess = true;
                _lastReputationTestMessage = "声望更新测试成功";
                _reputationTestSuccessCount++;
                
                AddLog($"✅ 声望更新成功: 暴风城卫兵 +100");
                
                // 显示更新后的声望值
                var guardReputation = response.Data.FactionReputation.GetValueOrDefault("StormwindGuard", 0);
                AddLog($"💰 暴风城卫兵当前声望: {guardReputation}");
            }
            else
            {
                _lastReputationTestSuccess = false;
                _lastReputationTestMessage = response.Message;
                _reputationTestFailureCount++;
                AddLog($"⚠️ 声望更新测试失败: {response.Message}");
                AddLog("ℹ️ 这通常是因为测试角色不存在，这是正常的");
            }
        }
        catch (Exception ex)
        {
            _lastReputationTestSuccess = false;
            _lastReputationTestMessage = $"异常: {ex.Message}";
            _reputationTestFailureCount++;
            AddLog($"❌ 声望更新测试异常: {ex.Message}");
        }
    }
    
    /// <summary>
    /// 测试声望奖励信息
    /// </summary>
    private async Task TestReputationRewards()
    {
        try
        {
            AddLog("⭐ 获取声望奖励信息...");
            
            var testCharacterId = "test-character-id";
            var response = await ReputationApi.GetAvailableRewardsAsync(testCharacterId);
            
            if (response.Success && response.Data != null)
            {
                var rewardCount = response.Data.Count;
                _lastReputationTestSuccess = true;
                _lastReputationTestMessage = $"获取到 {rewardCount} 个可用奖励";
                _reputationTestSuccessCount++;
                
                AddLog($"✅ 获取到 {rewardCount} 个声望奖励");
                
                foreach (var reward in response.Data.Take(3))
                {
                    AddLog($"   - {reward.FactionName} {reward.TierName}:");
                    AddLog($"     需要声望: {reward.RequiredReputation}");
                    AddLog($"     奖励物品: {reward.Items.Count} 个");
                    AddLog($"     特权: {string.Join(", ", reward.Perks)}");
                }
                
                if (response.Data.Count > 3)
                {
                    AddLog($"   ... 还有 {response.Data.Count - 3} 个奖励");
                }
            }
            else
            {
                _lastReputationTestSuccess = false;
                _lastReputationTestMessage = response.Message;
                _reputationTestFailureCount++;
                AddLog($"⚠️ 获取声望奖励失败: {response.Message}");
                AddLog("ℹ️ 这通常是因为测试角色不存在，这是正常的");
            }
        }
        catch (Exception ex)
        {
            _lastReputationTestSuccess = false;
            _lastReputationTestMessage = $"异常: {ex.Message}";
            _reputationTestFailureCount++;
            AddLog($"❌ 声望奖励测试异常: {ex.Message}");
        }
    }
}
</div>