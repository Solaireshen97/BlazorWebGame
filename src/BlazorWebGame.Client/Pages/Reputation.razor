@page "/reputation"
@using BlazorWebGame.Models
@using BlazorWebGame.Models.Items
@using BlazorWebGame.Services
@inject GameStateService GameState
@inject CharacterService CharacterService
@implements IDisposable

<PageTitle>声望与委托</PageTitle>

<h3>声望与委托</h3>
@* --- vvv 核心修改：从检查 Player 改为检查 ActiveCharacter vvv --- *@
@if (GameState.ActiveCharacter is not Player character)
{
    <p>正在加载角色信息...</p>
    return;
}

<!-- 声望概览 -->
<div class="card mb-4">
    <div class="card-header">
        <h4>阵营声望</h4>
    </div>
    <div class="card-body">
        @foreach (Faction faction in Enum.GetValues(typeof(Faction)))
        {
            var repValue = character.Reputation.GetValueOrDefault(faction, 0);
            var repTier = CharacterService.GetReputationLevel(character, faction);
            var progressPercent = CharacterService.GetReputationProgressPercentage(character, faction);

            <div class="faction-rep-bar mb-2">
                <span class="faction-name">@FactionData.GetName(faction)</span>

                <div class="progress position-relative" style="height: 20px;" title="@repTier.Name (@repValue / @repTier.MaxValue)">

                    <div class="progress-bar @repTier.BarColorClass"
                         role="progressbar"
                         style="width: @(progressPercent)%;"
                         aria-valuenow="@progressPercent"
                         aria-valuemin="0"
                         aria-valuemax="100">
                    </div>

                    <span class="progress-text">
                        @repTier.Name (@repValue)
                    </span>

                </div>
            </div>
        }
    </div>
</div>

<!-- 任务列表 -->
<div class="row">
    <!-- 每日任务 -->
    <div class="col-lg-6">
        <div class="card">
            <div class="card-header">
                <h5>每日委托</h5>
            </div>
            <ul class="list-group list-group-flush">
                @foreach (var quest in GameState.DailyQuests)
                {
                    var progress = character.QuestProgress.GetValueOrDefault(quest.Id, 0);
                    var isCompleted = character.CompletedQuestIds.Contains(quest.Id);
                    var canComplete = progress >= quest.RequiredAmount && !isCompleted;

                    <li class="list-group-item d-flex justify-content-between align-items-center">
                        <div>
                            <strong>[@FactionData.GetName(quest.Faction)] @quest.Title</strong>
                            <p class="mb-1 small text-muted">@GetQuestObjectiveText(quest)</p>
                            <div class="progress" style="height: 10px; width: 200px;">
                                <div class="progress-bar" role="progressbar" style="width: @(100.0 * progress / quest.RequiredAmount)%;"></div>
                            </div>
                            <small class="text-success">奖励: @quest.GoldReward G</small>
                        </div>
                        @* GameState.TryCompleteQuest 内部会自动处理当前角色，无需修改 *@
                        <button class="btn @(isCompleted ? "btn-secondary" : "btn-primary")"
                                disabled="@(!canComplete)"
                                @onclick="() => GameState.TryCompleteQuest(quest.Id)">
                            @(isCompleted ? "已完成" : (canComplete ? "完成" : $"{progress}/{quest.RequiredAmount}"))
                        </button>
                    </li>
                }
            </ul>
        </div>
    </div>

    <!-- 周常任务 -->
    <div class="col-lg-6">
        <div class="card">
            <div class="card-header">
                <h5>周常目标</h5>
            </div>
            <ul class="list-group list-group-flush">
                @foreach (var quest in GameState.WeeklyQuests)
                {
                    var progress = character.QuestProgress.GetValueOrDefault(quest.Id, 0);
                    var isCompleted = character.CompletedQuestIds.Contains(quest.Id);
                    var canComplete = progress >= quest.RequiredAmount && !isCompleted;

                    <li class="list-group-item d-flex justify-content-between align-items-center">
                        <div>
                            <strong>@quest.Title</strong>
                            <p class="mb-1 small text-muted">@quest.Description</p>
                            <div class="progress" style="height: 10px; width: 200px;">
                                <div class="progress-bar" role="progressbar" style="width: @(100.0 * progress / quest.RequiredAmount)%;"></div>
                            </div>
                            <small class="text-primary">奖励: @quest.ReputationReward 点 @FactionData.GetName(quest.Faction) 声望</small>
                        </div>
                        @* GameState.TryCompleteQuest 内部会自动处理当前角色，无需修改 *@
                        <button class="btn @(isCompleted ? "btn-secondary" : "btn-primary")"
                                disabled="@(!canComplete)"
                                @onclick="() => GameState.TryCompleteQuest(quest.Id)">
                            @(isCompleted ? "已完成" : (canComplete ? "完成" : $"{progress}/{quest.RequiredAmount}"))
                        </button>
                    </li>
                }
            </ul>
        </div>
    </div>
</div>
@* --- ^^^ 修改结束 ^^^ --- *@

@code {
    protected override void OnInitialized()
    {
        GameState.OnStateChanged += StateHasChanged;
    }

    public void Dispose()
    {
        GameState.OnStateChanged -= StateHasChanged;
    }

    private string GetQuestObjectiveText(Quest quest)
    {
        if (!string.IsNullOrEmpty(quest.Description))
        {
            return quest.Description;
        }

        var targetName = "";
        if (quest.Type == QuestType.KillMonster)
        {
            targetName = quest.TargetId;
        }
        else
        {
            targetName = ItemData.GetItemById(quest.TargetId)?.Name;
        }

        return $"需求: {targetName}";
    }
}