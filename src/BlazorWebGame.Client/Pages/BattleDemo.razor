@page "/battle-demo"
@using BlazorWebGame.Client.Services.Api
@using BlazorWebGame.Models
@using BlazorWebGame.Models.Monsters
@using BlazorWebGame.Services
@using BlazorWebGame.Shared.DTOs
@inject GameStateService OldGameState
@inject ClientGameStateService NewGameState
@inject GameApiService GameApi
@inject OfflineService OfflineService
@inject ILogger<BattleDemo> Logger
@implements IDisposable

<PageTitle>战斗系统演示</PageTitle>

<div class="battle-demo-container">
    <div class="row">
        <div class="col-md-6">
            <h3>系统选择</h3>
            <div class="btn-group" role="group">
                <button class="btn @(_useNewBattleSystem ? "btn-outline-primary" : "btn-primary")" 
                        @onclick="() => _useNewBattleSystem = false">
                    使用原始系统 (Timer)
                </button>
                <button class="btn @(_useNewBattleSystem ? "btn-primary" : "btn-outline-primary")" 
                        @onclick="() => _useNewBattleSystem = true">
                    使用新系统 (Server)
                </button>
            </div>
            
            @if (_useNewBattleSystem)
            {
                <div class="mt-3">
                    <div class="alert alert-info">
                        <strong>连接状态:</strong> 
                        @if (_isConnected)
                        {
                            <span class="text-success">已连接到服务器</span>
                        }
                        else
                        {
                            <span class="text-warning">服务器连接断开</span>
                        }
                    </div>
                    
                    @if (OfflineService.IsOfflineMode)
                    {
                        <div class="alert alert-warning">
                            <strong>离线模式:</strong> 当前在离线模式下运行
                        </div>
                    }
                </div>
            }
        </div>
        
        <div class="col-md-6">
            <h3>战斗控制</h3>
            @if (OldGameState.ActiveCharacter is Player character)
            {
                <div class="mb-3">
                    <strong>角色:</strong> @character.Name (Level @character.GetLevel(character.SelectedBattleProfession)) 
                    <span class="text-success">HP: @character.Health/@character.MaxHealth</span>
                </div>
                
                <div class="mb-3">
                    <label>选择敌人:</label>
                    <select class="form-select" @bind="_selectedEnemyId">
                        <option value="">-- 选择一个敌人 --</option>
                        <option value="goblin">哥布林</option>
                        <option value="orc">兽人</option>
                        <option value="dragon">龙</option>
                    </select>
                </div>
                
                <div class="btn-group">
                    <button class="btn btn-success" @onclick="StartBattle" disabled="@(string.IsNullOrEmpty(_selectedEnemyId))">
                        开始战斗
                    </button>
                    <button class="btn btn-danger" @onclick="StopBattle" disabled="@(!_isInBattle)">
                        停止战斗
                    </button>
                </div>
            }
            else
            {
                <div class="alert alert-warning">
                    没有激活的角色
                </div>
            }
        </div>
    </div>
    
    <div class="row mt-4">
        <div class="col-12">
            <h3>战斗状态</h3>
            @if (_useNewBattleSystem)
            {
                @* 新系统战斗显示 *@
                @if (_serverBattleState != null && _serverBattleState.IsActive)
                {
                    <div class="battle-status-card">
                        <h4>服务器战斗状态</h4>
                        <div class="row">
                            <div class="col-6">
                                <div class="player-status">
                                    <h5>玩家</h5>
                                    <div class="progress mb-2">
                                        <div class="progress-bar bg-success" 
                                             style="width: @(GetHealthPercentage(_serverBattleState.PlayerHealth, _serverBattleState.PlayerMaxHealth))%">
                                            @_serverBattleState.PlayerHealth / @_serverBattleState.PlayerMaxHealth
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="col-6">
                                <div class="enemy-status">
                                    <h5>敌人 (@_serverBattleState.EnemyId)</h5>
                                    <div class="progress mb-2">
                                        <div class="progress-bar bg-danger" 
                                             style="width: @(GetHealthPercentage(_serverBattleState.EnemyHealth, _serverBattleState.EnemyMaxHealth))%">
                                            @_serverBattleState.EnemyHealth / @_serverBattleState.EnemyMaxHealth
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <small class="text-muted">最后更新: @_serverBattleState.LastUpdated.ToString("HH:mm:ss")</small>
                    </div>
                }
                else
                {
                    <div class="alert alert-info">没有进行中的服务器战斗</div>
                }
            }
            else
            {
                @* 原系统战斗显示 - 保留原有的UI元素... *@
            }
        </div>
    </div>
}</div>

@code {
    private bool _useNewBattleSystem = false;
    private bool _isConnected = false;
    private bool _isInBattle = false;
    private string _selectedEnemyId = "";
    private BattleStateDto? _serverBattleState;
    private System.Threading.Timer? _fallbackPoller;

    protected override async Task OnInitializedAsync()
    {
        // 订阅事件
        if (_useNewBattleSystem)
        {
            NewGameState.OnBattleStateChanged += HandleNewBattleUpdate;
            NewGameState.OnConnectionStatusChanged += HandleConnectionChanged;
            OfflineService.OnOfflineModeChanged += HandleOfflineModeChanged;
        }
        else
        {
            OldGameState.OnStateChanged += HandleOldStateChanged;
        }
        
        // 初始化新系统
        await NewGameState.InitializeAsync();
    }

    /// <summary>
    /// 统一的战斗启动方法
    /// </summary>
    private async Task StartBattle()
    {
        if (string.IsNullOrEmpty(_selectedEnemyId)) return;
        
        try
        {
            if (_useNewBattleSystem)
            {
                // 新系统
                if (OfflineService.IsOfflineMode)
                {
                    // 离线模式：记录操作
                    OfflineService.RecordOfflineAction(OfflineActionType.StartBattle, new StartBattleRequest
                    {
                        CharacterId = OldGameState.ActiveCharacter?.Id ?? "",
                        EnemyId = _selectedEnemyId,
                        PartyId = GetCurrentPartyId()
                    });
                    
                    // 本地模拟战斗
                    SimulateLocalBattle();
                }
                else
                {
                    // 在线模式：调用服务器
                    var success = await NewGameState.StartBattleAsync(_selectedEnemyId, GetCurrentPartyId());
                    if (success)
                    {
                        _isInBattle = true;
                        StateHasChanged();
                    }
                }
            }
            else
            {
                // 原系统
                var enemyTemplate = GetEnemyTemplate(_selectedEnemyId);
                if (enemyTemplate != null)
                {
                    OldGameState.StartCombat(enemyTemplate);
                    _isInBattle = true;
                }
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error starting battle with enemy {EnemyId}", _selectedEnemyId);
        }
    }

    private async Task StopBattle()
    {
        try
        {
            if (_useNewBattleSystem && _serverBattleState != null)
            {
                await NewGameState.StopBattleAsync(_serverBattleState.BattleId);
            }
            else
            {
                OldGameState.StopCurrentAction();
            }
            
            _isInBattle = false;
            _serverBattleState = null;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error stopping battle");
        }
    }

    private void SimulateLocalBattle()
    {
        var characterId = OldGameState.ActiveCharacter?.Id ?? "";
        _serverBattleState = OfflineService.SimulateLocalBattle(characterId, _selectedEnemyId, GetCurrentPartyId());
        _isInBattle = true;
        StateHasChanged();
    }

    private Enemy? GetEnemyTemplate(string enemyId)
    {
        return enemyId switch
        {
            "goblin" => new Enemy { Name = "哥布林", MaxHealth = 50, Health = 50 },
            "orc" => new Enemy { Name = "兽人", MaxHealth = 100, Health = 100 },
            "dragon" => new Enemy { Name = "龙", MaxHealth = 200, Health = 200 },
            _ => null
        };
    }

    private string? GetCurrentPartyId()
    {
        var character = OldGameState.ActiveCharacter;
        if (character == null) return null;
        
        var party = OldGameState.GetPartyForCharacter(character.Id);
        return party?.Id.ToString();
    }

    private double GetHealthPercentage(int current, int max) => max > 0 ? (double)current / max * 100 : 0;

    private void HandleNewBattleUpdate(BattleStateDto battleState)
    {
        InvokeAsync(() =>
        {
            _serverBattleState = battleState;
            _isInBattle = battleState.IsActive;
            StateHasChanged();
        });
    }

    private void HandleConnectionChanged(bool isConnected)
    {
        _isConnected = isConnected;
        
        InvokeAsync(async () =>
        {
            if (isConnected)
            {
                // 连接恢复，停止轮询
                _fallbackPoller?.Dispose();
                _fallbackPoller = null;
                
                // 如果在离线模式，尝试同步
                if (OfflineService.IsOfflineMode)
                {
                    await OfflineService.ExitOfflineMode(GameApi);
                }
            }
            else
            {
                // 连接断开，启动轮询
                StartFallbackPolling();
            }
            
            StateHasChanged();
        });
    }
    
    /// <summary>
    /// 启动备用轮询机制
    /// </summary>
    private void StartFallbackPolling()
    {
        _fallbackPoller = new System.Threading.Timer(async _ =>
        {
            if (_serverBattleState != null && !_isConnected)
            {
                try
                {
                    var response = await GameApi.GetBattleStateAsync(_serverBattleState.BattleId);
                    if (response.Success && response.Data != null)
                    {
                        await InvokeAsync(() =>
                        {
                            _serverBattleState = response.Data;
                            StateHasChanged();
                        });
                    }
                }
                catch (Exception ex)
                {
                    Logger.LogError(ex, "轮询战斗状态失败");
                }
            }
        }, null, TimeSpan.Zero, TimeSpan.FromMilliseconds(500));
    }
    
    private void HandleOfflineModeChanged(bool isOffline)
    {
        InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }

    private void HandleOldStateChanged()
    {
        // 保持原有逻辑
        StateHasChanged();
    }

    public void Dispose()
    {
        if (_useNewBattleSystem)
        {
            NewGameState.OnBattleStateChanged -= HandleNewBattleUpdate;
            NewGameState.OnConnectionStatusChanged -= HandleConnectionChanged;
            OfflineService.OnOfflineModeChanged -= HandleOfflineModeChanged;
        }
        else
        {
            OldGameState.OnStateChanged -= HandleOldStateChanged;
        }
        
        _fallbackPoller?.Dispose();
    }
}

<style>
.battle-demo-container {
    padding: 20px;
}

.battle-status-card {
    border: 1px solid #dee2e6;
    border-radius: 8px;
    padding: 20px;
    background-color: #f8f9fa;
}

.player-status, .enemy-status {
    text-align: center;
}
</style>