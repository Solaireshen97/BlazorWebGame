@page "/shop"
@using BlazorWebGame.Models
@using BlazorWebGame.Models.Items
@using BlazorWebGame.Services
@using BlazorWebGame.Client.Services
@inject GameStateService GameState
@inject HybridShopService ShopService
@implements IDisposable

<PageTitle>商店</PageTitle>

@* --- vvv 核心修改：从检查 Player 改为检查 ActiveCharacter vvv --- *@
@if (_isLoading)
{
    <div class="text-center">
        <p>正在加载商店数据...</p>
    </div>
}
else if (GameState.ActiveCharacter is Player character)
{
    <div class="shop-layout">
        <!-- 左侧：商品分类和列表 -->
        <div class="shop-left-panel">
            <div class="shop-tabs">
                @foreach (var category in _shopCategories)
                {
                    <button class="tab-button @(category == _selectedCategory ? "active" : "")"
                            @onclick="() => SelectCategoryAsync(category)">
                        @category
                    </button>
                }
            </div>
            <div class="shop-item-list">
                @foreach (var item in GetItemsForCurrentCategory())
                {
                    <div class="shop-item-row @(_selectedItem?.Id == item.Id ? "selected" : "")"
                         @onclick="() => SelectItem(item)">
                        <span>@item.Name</span>
                        <span class="item-price">@GetPriceString(item.ShopPurchaseInfo!)</span>
                    </div>
                }
            </div>
        </div>

        <!-- 右侧：商品详情 -->
        <div class="shop-right-panel">
            @if (_selectedItem != null)
            {
                <div class="detail-card">
                    <div class="detail-header">
                        <h5>@_selectedItem.Name</h5>
                        @if (_selectedItem is Equipment eq)
                        {
                            <span class="item-type-badge">@eq.Slot</span>
                        }
                    </div>
                    <p class="detail-description">@_selectedItem.Description</p>
                    <hr />

                    @if (_selectedItem is Equipment equip)
                    {
                        <div class="detail-stats">
                            @if (equip.AttackBonus > 0)
                            {
                                <p><strong>攻击力:</strong> <span class="stat-bonus">+@equip.AttackBonus</span></p>
                            }
                            @if (equip.HealthBonus > 0)
                            {
                                <p><strong>生命值:</strong> <span class="stat-bonus">+@equip.HealthBonus</span></p>
                            }
                        </div>
                        <hr />
                    }

                    <div class="purchase-section">
                        <div class="price-display">
                            <span>价格:</span>
                            <strong>@GetPriceString(_selectedItem.ShopPurchaseInfo!)</strong>
                        </div>
                        @* *** 修改点：调用 CanAfford 时传入当前角色，并使用async方法 *** *@
                        <button class="btn btn-success" @onclick="BuySelectedItemAsync" disabled="@(!CanAfford(character, _selectedItem))">
                            购买
                        </button>
                    </div>
                    @if (_purchaseMessage != null)
                    {
                        <p class="purchase-message @_purchaseMessageCssClass">@_purchaseMessage</p>
                    }
                </div>
            }
            else
            {
                <div class="detail-placeholder">
                    <p>从左侧选择一件商品查看详情。</p>
                </div>
            }
        </div>
    </div>
}
else
{
    <p>正在加载角色信息...</p>
}
@* --- ^^^ 修改结束 ^^^ --- *@

@code {
    private List<string> _shopCategories = new();
    private string? _selectedCategory;
    private Item? _selectedItem;
    private List<Item> _currentCategoryItems = new();

    private string? _purchaseMessage;
    private string? _purchaseMessageCssClass;
    private bool _isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        GameState.OnStateChanged += StateHasChanged;
        await LoadShopDataAsync();
    }

    private async Task LoadShopDataAsync()
    {
        _isLoading = true;
        StateHasChanged();

        try
        {
            var categories = await ShopService.GetShopCategoriesAsync();
            _shopCategories = categories;
            
            if (_shopCategories.Any())
            {
                await SelectCategoryAsync(_shopCategories.First());
            }
        }
        catch (Exception ex)
        {
            _purchaseMessage = $"加载商店数据失败: {ex.Message}";
            _purchaseMessageCssClass = "error";
        }
        finally
        {
            _isLoading = false;
            StateHasChanged();
        }
    }

    private async Task SelectCategoryAsync(string category)
    {
        _selectedCategory = category;
        _currentCategoryItems = await ShopService.GetShopItemsByCategoryAsync(category);
        _selectedItem = _currentCategoryItems.FirstOrDefault();
        ClearPurchaseMessage();
        StateHasChanged();
    }

    private void SelectItem(Item item)
    {
        _selectedItem = item;
        ClearPurchaseMessage();
    }

    private List<Item> GetItemsForCurrentCategory()
    {
        return _currentCategoryItems;
    }

    private string GetPriceString(PurchaseInfo info)
    {
        if (info.Currency == CurrencyType.Gold)
        {
            return $"{info.Price} 金币";
        }
        else
        {
            var currencyItem = ItemData.GetItemById(info.CurrencyItemId!);
            return $"{info.Price} {currencyItem?.Name ?? "未知物品"}";
        }
    }

    private bool CanAfford(Player character, Item? item)
    {
        if (item?.ShopPurchaseInfo == null) return false;
        return ShopService.CanAffordItem(item.Id, 1);
    }

    private async Task BuySelectedItemAsync()
    {
        if (_selectedItem == null) return;

        try
        {
            var result = await ShopService.BuyItemAsync(_selectedItem.Id, 1);
            
            if (result.Success)
            {
                _purchaseMessage = result.Message;
                _purchaseMessageCssClass = "success";
            }
            else
            {
                _purchaseMessage = result.Message;
                _purchaseMessageCssClass = "error";
            }
        }
        catch (Exception ex)
        {
            _purchaseMessage = $"购买失败: {ex.Message}";
            _purchaseMessageCssClass = "error";
        }

        StateHasChanged();
        await Task.Delay(2000); // 2秒后清除消息
        ClearPurchaseMessage();
        StateHasChanged();
    }

    private void ClearPurchaseMessage()
    {
        _purchaseMessage = null;
        _purchaseMessageCssClass = null;
    }

    public void Dispose()
    {
        GameState.OnStateChanged -= StateHasChanged;
    }
}