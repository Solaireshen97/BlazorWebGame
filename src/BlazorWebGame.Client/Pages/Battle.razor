@page "/battle"
@using BlazorWebGame.Models
@using BlazorWebGame.Models.Battles
@using BlazorWebGame.Models.Dungeons
@using BlazorWebGame.Models.Items
@using BlazorWebGame.Models.Monsters
@using BlazorWebGame.Models.Regions
@using BlazorWebGame.Services
@using BlazorWebGame.Client.Services.Api
@using BlazorWebGame.Shared.DTOs
@inject GameStateService GameState
@inject CharacterService CharacterService
@inject ClientGameStateService NewGameState
@inject GameApiService GameApi
@inject OfflineService OfflineService
@inject IConfiguration Configuration
@inject ILogger<Battle> Logger
@implements IDisposable

<PageTitle>自动战斗</PageTitle>

@* 战斗系统状态指示器 *@
<div class="battle-system-indicator mb-2">
    <div class="alert alert-info d-flex justify-content-between align-items-center">
        <div>
            <i class="bi bi-cloud"></i>
            <strong>战斗系统:</strong> 纯服务端模式
            @if (OfflineService.IsOfflineMode)
            {
                <span class="badge bg-warning ms-2">连接异常</span>
            }
        </div>
        <div class="d-flex align-items-center gap-2">
            <small class="text-muted">
                连接状态: @(_isConnected ? "已连接" : "连接断开")
            </small>
            <span class="badge bg-success">服务端战斗</span>
        </div>
    </div>
</div>

@if (GameState.ActiveCharacter is Player character)
{
    @* 显示活跃角色和服务器战斗状态 *@
    <div class="character-info mb-3">
        <h4>当前角色: @character.Name</h4>
        <p>等级: @CharacterService.GetLevel(character, character.SelectedBattleProfession)</p>
        <p>生命值: @character.Health / @character.MaxHealth</p>
    </div>

    @* 服务器战斗状态显示 *@
    @if (_serverBattleState != null && _serverBattleState.IsActive)
    {
        <div class="battle-info">
            <h5>战斗进行中</h5>
            <p>战斗ID: @_serverBattleState.BattleId</p>
            <p>战斗类型: @_serverBattleState.BattleType</p>
            @if (!string.IsNullOrEmpty(_serverBattleState.EnemyId))
            {
                <p>敌人: @_serverBattleState.EnemyId</p>
                <div class="enemy-health-bar mb-2">
                    <div class="progress">
                        <div class="progress-bar bg-danger" 
                             style="width: @((_serverBattleState.EnemyHealth / (double)_serverBattleState.EnemyMaxHealth) * 100)%">
                            @_serverBattleState.EnemyHealth / @_serverBattleState.EnemyMaxHealth
                        </div>
                    </div>
                </div>
            }
            <button class="btn btn-danger" @onclick="StopCurrentBattle">停止战斗</button>
        </div>
    }
    else
    {
        @* 战斗选择界面 - 简化版，只调用服务器API *@
        <div class="battle-selection">
            <h5>选择战斗</h5>
            
            @* 怪物选择 *@
            <div class="monster-selection mb-3">
                <h6>选择怪物</h6>
                <select class="form-select" @bind="_selectedMonsterId">
                    <option value="">请选择怪物</option>
                    @foreach (var monster in GameState.AvailableMonsters)
                    {
                        <option value="@monster.Id">@monster.Name (等级 @monster.Level)</option>
                    }
                </select>
            </div>

            <button class="btn btn-primary" @onclick="StartBattle" disabled="@(string.IsNullOrEmpty(_selectedMonsterId) || _isStartingBattle)">
                @if (_isStartingBattle)
                {
                    <span class="spinner-border spinner-border-sm me-2"></span>
                }
                开始战斗
            </button>
        </div>
    }

    @* 错误消息显示 *@
    @if (!string.IsNullOrEmpty(_errorMessage))
    {
        <div class="alert alert-danger mt-3">
            @_errorMessage
        </div>
    }
}
else
{
    <div class="alert alert-warning">
        <p>请先创建或选择一个角色。</p>
    </div>
}

@code {
    // UI状态变量
    private bool _isConnected = false;
    private bool _isStartingBattle = false;
    private string? _selectedMonsterId;
    private string? _errorMessage;
    
    // 服务器战斗状态
    private BattleStateDto? _serverBattleState;

    protected override async Task OnInitializedAsync()
    {
        // 订阅服务器战斗状态变化事件
        NewGameState.OnBattleStateChanged += HandleServerBattleUpdate;
        NewGameState.OnConnectionStatusChanged += HandleConnectionChanged;
        OfflineService.OnOfflineModeChanged += HandleOfflineModeChanged;

        // 初始化连接状态
        _isConnected = true; // 假设初始连接正常

        // 如果有活跃角色，获取其当前战斗状态
        if (GameState.ActiveCharacter != null)
        {
            await LoadCurrentBattleState();
        }
    }

    private async Task LoadCurrentBattleState()
    {
        try
        {
            // 从服务器获取当前战斗状态
            // 这里需要实现获取角色当前战斗状态的API调用
            // var battles = await GameApi.GetActiveBattlesAsync();
            // _serverBattleState = battles.FirstOrDefault();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "加载当前战斗状态失败");
            _errorMessage = "加载战斗状态失败，请重试";
        }
    }

    private async Task StartBattle()
    {
        if (string.IsNullOrEmpty(_selectedMonsterId) || GameState.ActiveCharacter == null)
            return;

        _isStartingBattle = true;
        _errorMessage = null;
        StateHasChanged();

        try
        {
            // 调用服务器API开始战斗
            var success = await NewGameState.StartBattleAsync(_selectedMonsterId);
            
            if (!success)
            {
                _errorMessage = "开始战斗失败，请重试";
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "开始战斗时发生错误");
            _errorMessage = "开始战斗时发生错误: " + ex.Message;
        }
        finally
        {
            _isStartingBattle = false;
            StateHasChanged();
        }
    }

    private async Task StopCurrentBattle()
    {
        if (_serverBattleState == null)
            return;

        try
        {
            var success = await NewGameState.StopBattleAsync(_serverBattleState.BattleId);
            if (!success)
            {
                _errorMessage = "停止战斗失败，请重试";
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "停止战斗时发生错误");
            _errorMessage = "停止战斗时发生错误: " + ex.Message;
        }
    }

    private void HandleServerBattleUpdate(BattleStateDto battleState)
    {
        _serverBattleState = battleState;
        StateHasChanged();
    }

    private void HandleConnectionChanged(bool isConnected)
    {
        _isConnected = isConnected;
        StateHasChanged();
    }

    private void HandleOfflineModeChanged(bool isOffline)
    {
        StateHasChanged();
    }

    public void Dispose()
    {
        // 清理事件订阅
        if (NewGameState != null)
        {
            NewGameState.OnBattleStateChanged -= HandleServerBattleUpdate;
            NewGameState.OnConnectionStatusChanged -= HandleConnectionChanged;
        }
        
        if (OfflineService != null)
        {
            OfflineService.OnOfflineModeChanged -= HandleOfflineModeChanged;
        }
    }
}