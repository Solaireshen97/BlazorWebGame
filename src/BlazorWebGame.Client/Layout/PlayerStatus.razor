@using BlazorWebGame.Models
@using BlazorWebGame.Models.Items
@using BlazorWebGame.Services
@using BlazorWebGame.Events
@using BlazorWebGame.Shared.DTOs
@inject GameStateService GameState
@implements IDisposable

@if (GameState.AllCharacters.Any())
{
    <div class="multi-character-status-container">
        @foreach (var character in GameState.AllCharacters)
        {
            <div class="character-status-row @(character.IsDead ? "player-dead" : "") @(GameState.ActiveCharacter?.Id == character.Id ? "active" : "")">
                <div class="status-display" @onclick="() => SwitchCharacter(character.Id)">
                    <div class="character-basic-info">
                        <strong>@character.Name</strong> (@GetProfessionNameAndLevel(character))
                        | ״̬: <strong>@GetFormattedStatus(character.CurrentAction)</strong>
                        @if (IsShowingHealth(character.CurrentAction))
                        {
                            <span>| ����: <strong>@character.Health / @character.MaxHealth</strong></span>
                        }
                    </div>

                    @{
                        var expInfo = GetExpInfo(character);
                    }

                    <div class="exp-progress-wrapper">
                        <div class="exp-progress-container">
                            <div class="exp-progress-bar @GetExpBarClass(character.CurrentAction)" style="width: @expInfo.ProgressPercent%"></div>
                            <span class="exp-text">@expInfo.ProfessionName: @expInfo.CurrentExpInLevel/@expInfo.ExpForNextLevel (@expInfo.ProgressPercent.ToString("0.0")%)</span>
                        </div>
                    </div>

                    <div class="status-right">
                        @foreach (var buff in character.ActiveBuffs.OrderBy(b => b.SourceItemId))
                        {
                            var buffItem = ItemData.GetItemById(buff.SourceItemId);
                            if (buffItem != null)
                            {
                                <div class="buff-icon" title="@buffItem.Name (+@buff.BuffValue @buff.BuffType.ToString())">
                                    <span class="buff-icon-text">@buffItem.Name.Substring(0, 1)</span>
                                    <span class="buff-timer">@((int)buff.TimeRemainingSeconds)</span>
                                </div>
                            }
                        }
                    </div>
                </div>
            </div>
        }
    </div>
}
else
{
    <div class="multi-character-status-container">
        <p>���ڼ��ؽ�ɫ...</p>
    </div>
}

@code {
    protected override void OnInitialized()
    {
        GameState.OnStateChanged += StateHasChanged;

        // ���ľ���ֵ�仯�¼�
        GameState.SubscribeToEvent(GameEventType.ExperienceGained, OnExperienceGained);
        GameState.SubscribeToEvent(GameEventType.LevelUp, _ => StateHasChanged());
    }

    private void OnExperienceGained(GameEventArgs args)
    {
        // ȷ��UI����
        StateHasChanged();
    }

    private void SwitchCharacter(string characterId)
    {
        if (GameState.ActiveCharacter?.Id != characterId)
        {
            GameState.SetActiveCharacter(characterId);
        }
    }

    private bool IsShowingHealth(PlayerActionState state) =>
        state == PlayerActionState.Idle || state == PlayerActionState.Combat;

    private string GetFormattedStatus(PlayerActionState state)
    {
        if (state.ToString().StartsWith("Gathering"))
            return "�ɼ���";
        if (state.ToString().StartsWith("Crafting"))
            return "������";
        return state == PlayerActionState.Idle ? "����" : "ս��";
    }

    private string GetExpBarClass(PlayerActionState state)
    {
        if (state.ToString().StartsWith("Gathering"))
            return "gathering-exp";
        if (state.ToString().StartsWith("Crafting"))
            return "crafting-exp";
        return "battle-exp";
    }

    // ��ȡ��ǰְҵ���ƺ͵ȼ�
    // ��ȡ��ǰְҵ���ƺ͵ȼ�
    private string GetProfessionNameAndLevel(Player character)
    {
        if (character.CurrentAction.ToString().StartsWith("Gathering"))
        {
            var profession = GetCurrentGatheringProfession(character.CurrentAction);
            return $"{profession.ToChineseString()} Lv.{character.GetLevel(profession)}";
        }
        else if (character.CurrentAction.ToString().StartsWith("Crafting"))
        {
            var profession = GetCurrentProductionProfession(character.CurrentAction);
            return $"{profession.ToChineseString()} Lv.{character.GetLevel(profession)}";
        }
        else
        {
            return $"{character.SelectedBattleProfession.ToChineseString()} Lv.{character.GetLevel(character.SelectedBattleProfession)}";
        }
    }

    // ��ȡ��ǰ�ɼ�ְҵ
    private GatheringProfession GetCurrentGatheringProfession(PlayerActionState state)
    {
        return state switch
        {
            PlayerActionState.GatheringMining => GatheringProfession.Miner,
            PlayerActionState.GatheringHerbalism => GatheringProfession.Herbalist,
            PlayerActionState.GatheringFishing => GatheringProfession.Fishing,
            _ => GatheringProfession.Miner  // Ĭ��
        };
    }

    // ��ȡ��ǰ����ְҵ
    private ProductionProfession GetCurrentProductionProfession(PlayerActionState state)
    {
        return state switch
        {
            PlayerActionState.CraftingCooking => ProductionProfession.Cooking,
            PlayerActionState.CraftingAlchemy => ProductionProfession.Alchemy,
            PlayerActionState.CraftingBlacksmithing => ProductionProfession.Blacksmithing,
            PlayerActionState.CraftingJewelcrafting => ProductionProfession.Jewelcrafting,
            PlayerActionState.CraftingLeatherworking => ProductionProfession.Leatherworking,
            PlayerActionState.CraftingTailoring => ProductionProfession.Tailoring,
            PlayerActionState.CraftingEngineering => ProductionProfession.Engineering,
            _ => ProductionProfession.Cooking  // Ĭ��
        };
    }

    // ��ȡ��ǰ������Ϣ
    private (string ProfessionName, double ProgressPercent, long CurrentExpInLevel, long ExpForNextLevel) GetExpInfo(Player character)
    {
        if (character.CurrentAction.ToString().StartsWith("Gathering"))
        {
            var profession = GetCurrentGatheringProfession(character.CurrentAction);
            var level = character.GetLevel(profession);
            var progress = character.GetLevelProgress(profession);
            var currentExp = character.GatheringProfessionXP.GetValueOrDefault(profession, 0);
            var currentLevelExp = ExpSystem.GetExpRequiredForLevel(level);
            var nextLevelExp = ExpSystem.GetExpRequiredForLevel(level + 1);
            return (profession.ToChineseString(), progress, currentExp - currentLevelExp, nextLevelExp - currentLevelExp);
        }
        else if (character.CurrentAction.ToString().StartsWith("Crafting"))
        {
            var profession = GetCurrentProductionProfession(character.CurrentAction);
            var level = character.GetLevel(profession);
            var progress = character.GetLevelProgress(profession);
            var currentExp = character.ProductionProfessionXP.GetValueOrDefault(profession, 0);
            var currentLevelExp = ExpSystem.GetExpRequiredForLevel(level);
            var nextLevelExp = ExpSystem.GetExpRequiredForLevel(level + 1);
            return (profession.ToChineseString(), progress, currentExp - currentLevelExp, nextLevelExp - currentLevelExp);
        }
        else
        {
            var profession = character.SelectedBattleProfession;
            var level = character.GetLevel(profession);
            var progress = character.GetLevelProgress(profession);
            var currentExp = character.BattleProfessionXP.GetValueOrDefault(profession, 0);
            var currentLevelExp = ExpSystem.GetExpRequiredForLevel(level);
            var nextLevelExp = ExpSystem.GetExpRequiredForLevel(level + 1);
            return (profession.ToChineseString(), progress, currentExp - currentLevelExp, nextLevelExp - currentLevelExp);
        }
    }

    public void Dispose()
    {
        GameState.OnStateChanged -= StateHasChanged;

        // ȡ�������¼�
        GameState.UnsubscribeFromEvent(GameEventType.ExperienceGained, OnExperienceGained);
        GameState.UnsubscribeFromEvent(GameEventType.LevelUp, _ => StateHasChanged());
    }
}