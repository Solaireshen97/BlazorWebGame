@page "/login"
@using BlazorIdleGame.Client.Services.Auth
@using System.ComponentModel.DataAnnotations
@inject IAuthService AuthService
@inject NavigationManager NavigationManager

<div class="login-container">
    <div class="card">
        <div class="card-header">
            <h3>用户登录</h3>
        </div>
        <div class="card-body">
            <EditForm Model="@loginModel" OnValidSubmit="HandleLogin">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="form-group">
                    <label for="username">用户名</label>
                    <InputText id="username" class="form-control" @bind-Value="loginModel.Username" />
                </div>

                <div class="form-group mt-3">
                    <label for="password">密码</label>
                    <InputText id="password" type="password" class="form-control" @bind-Value="loginModel.Password" />
                </div>

                <button type="submit" class="btn btn-primary mt-4" disabled="@isProcessing">
                    @if (isProcessing)
                    {
                        <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                        <span> 登录中...</span>
                    }
                    else
                    {
                        <span>登录</span>
                    }
                </button>
            </EditForm>

            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="alert alert-danger mt-3">
                    @errorMessage
                </div>
            }

            <div class="mt-3">
                <p>没有账号？ <a href="register">立即注册</a></p>
            </div>
        </div>
    </div>
</div>

@code {
    private LoginModel loginModel = new();
    private bool isProcessing = false;
    private string? errorMessage;

    protected override async Task OnInitializedAsync()
    {
        // 如果已经登录，则重定向到首页
        if (AuthService.IsAuthenticated)
        {
            NavigationManager.NavigateTo("/");
            return;
        }
    }

    private async Task HandleLogin()
    {
        isProcessing = true;
        errorMessage = null;

        try
        {
            var result = await AuthService.LoginAsync(loginModel.Username, loginModel.Password);

            if (result.Success)
            {
                NavigationManager.NavigateTo("/");
            }
            else
            {
                errorMessage = result.Message;
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"登录出错: {ex.Message}";
        }
        finally
        {
            isProcessing = false;
        }
    }

    private class LoginModel
    {
        [Required(ErrorMessage = "请输入用户名")]
        public string Username { get; set; } = string.Empty;

        [Required(ErrorMessage = "请输入密码")]
        public string Password { get; set; } = string.Empty;
    }
}