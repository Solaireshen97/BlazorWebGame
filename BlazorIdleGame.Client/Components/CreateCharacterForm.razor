@using BlazorIdleGame.Client.Services.Character
@using BlazorWebGame.Shared.DTOs
@using System.ComponentModel.DataAnnotations
@inject ICharacterService CharacterService

<div class="create-character-form">
    @if (_isProcessing)
    {
        <div class="text-center py-4">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">处理中...</span>
            </div>
            <p>正在创建角色，请稍候...</p>
        </div>
    }
    else
    {
        <EditForm Model="@_model" OnValidSubmit="CreateCharacterAsync">
            <DataAnnotationsValidator />

            <div class="mb-3">
                <label for="characterName" class="form-label">角色名称</label>
                <InputText id="characterName" @bind-Value="_model.Name" class="form-control" placeholder="请输入角色名称" />
                <ValidationMessage For="@(() => _model.Name)" class="text-danger" />
                <div class="form-text">角色名称将显示在游戏中，请选择一个合适的名字</div>
            </div>

            @if (!string.IsNullOrEmpty(_errorMessage))
            {
                <div class="alert alert-danger">
                    @_errorMessage
                </div>
            }

            <div class="d-flex justify-content-end gap-2 mt-4">
                <button type="button" class="btn btn-outline-secondary" @onclick="OnCancel">取消</button>
                <button type="submit" class="btn btn-primary" disabled="@_isProcessing">创建角色</button>
            </div>
        </EditForm>
    }
</div>

@code {
    [Parameter] public EventCallback OnCharacterCreated { get; set; }
    [Parameter] public EventCallback OnCancel { get; set; }

    private CreateCharacterModel _model = new();
    private bool _isProcessing = false;
    private string _errorMessage = string.Empty;

    private async Task CreateCharacterAsync()
    {
        _isProcessing = true;
        _errorMessage = string.Empty;

        try
        {
            var character = await CharacterService.CreateCharacterAsync(_model.Name);
            
            if (character != null)
            {
                await OnCharacterCreated.InvokeAsync();
            }
            else
            {
                _errorMessage = "创建角色失败，请稍后重试";
            }
        }
        catch (Exception ex)
        {
            _errorMessage = $"发生错误：{ex.Message}";
        }
        finally
        {
            _isProcessing = false;
        }
    }

    public class CreateCharacterModel
    {
        [Required(ErrorMessage = "角色名称不能为空")]
        [StringLength(20, ErrorMessage = "角色名称长度必须在 {2} 到 {1} 个字符之间", MinimumLength = 2)]
        [RegularExpression(@"^[a-zA-Z0-9\u4e00-\u9fa5_]+$", ErrorMessage = "角色名称只能包含字母、数字、汉字和下划线")]
        public string Name { get; set; } = string.Empty;
    }
}