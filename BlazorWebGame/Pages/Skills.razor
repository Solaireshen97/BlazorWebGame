@page "/skills"
@using BlazorWebGame.Services
@using BlazorWebGame.Models
@using BlazorWebGame.Shared
@inject GameStateService GameState
@implements IDisposable

<PageTitle>技能配置</PageTitle>

@if (GameState.Player != null)
{
    <h3>技能配置 - @GameState.Player.SelectedBattleProfession.ToChineseString()</h3>
    <p>选择你的职业，并从已学会的技能中选择最多 @GameStateService.MaxEquippedSkills 个技能来装备。</p>

    <!-- 职业选择 -->
    <div class="profession-selector">
        @foreach (var p in (BattleProfession[])Enum.GetValues(typeof(BattleProfession)))
        {
            <button class="profession-btn @(GameState.Player.SelectedBattleProfession == p ? "active" : "")"
                    @onclick="() => GameState.SetBattleProfession(p)">
                @p.ToChineseString()
            </button>
        }
    </div>

    <div class="skills-layout">
        <!-- 左侧：可学习/装备的技能 -->
        <div class="skill-pool-container">
            <h4>技能池</h4>
            
            <!-- 职业技能 -->
            <h5>@GameState.Player.SelectedBattleProfession.ToChineseString() 技能</h5>
            <div class="skill-list">
                @foreach (var skill in GetUnequippedProfessionSkills())
                {
                    <SkillCard Skill="skill" IsEquipped="false" OnClick="ToggleSkill" />
                }
            </div>

            <!-- 共享技能 -->
            <h5>共享技能</h5>
            <div class="skill-list">
                 @foreach (var skill in GetUnequippedSharedSkills())
                {
                    <SkillCard Skill="skill" IsEquipped="false" OnClick="ToggleSkill" />
                }
            </div>
        </div>

        <!-- 右侧：已装备的技能 -->
        <div class="equipped-skills-container">
            <h4>已装备技能</h4>
            <div class="equipped-list">
                @foreach (var skill in GetEquippedSkills())
                {
                    <SkillCard Skill="skill" IsEquipped="true" OnClick="ToggleSkill" />
                }
            </div>
        </div>
    </div>
}

@code {
    private List<Skill> GetEquippedSkills()
    {
        var profession = GameState.Player.SelectedBattleProfession;
        if (!GameState.Player.EquippedSkills.ContainsKey(profession)) return new List<Skill>();

        return GameState.Player.EquippedSkills[profession]
            .Select(id => SkillData.GetSkillById(id))
            .Where(s => s != null)
            .OrderBy(s => s.Type) // 固定技能排在前面
            .ToList();
    }

    // --- 逻辑修正 ---
    // 获取尚未装备的职业技能
    private List<Skill> GetUnequippedProfessionSkills()
    {
        var profession = GameState.Player.SelectedBattleProfession;
        var level = GameState.Player.GetLevel(profession);
        var equippedSkillIds = GameState.Player.EquippedSkills[profession];

        return SkillData.AllSkills
            .Where(s => s.RequiredProfession == profession && 
                        s.Type == SkillType.Profession && 
                        s.RequiredLevel <= level &&
                        !equippedSkillIds.Contains(s.Id)) // 核心：过滤掉已装备的
            .ToList();
    }

    // --- 逻辑修正 ---
    // 获取尚未装备的共享技能
    private List<Skill> GetUnequippedSharedSkills()
    {
        var profession = GameState.Player.SelectedBattleProfession;
        var equippedSkillIds = GameState.Player.EquippedSkills[profession];

        return GameState.Player.LearnedSharedSkills
            .Select(id => SkillData.GetSkillById(id))
            .Where(s => s != null && !equippedSkillIds.Contains(s.Id)) // 核心：过滤掉已装备的
            .ToList();
    }
    
    // --- 为了清晰，重命名旧方法，但它们的功能已被新方法取代 ---
    private List<Skill> GetAllLearnableProfessionSkills()
    {
        var profession = GameState.Player.SelectedBattleProfession;
        var level = GameState.Player.GetLevel(profession);
        return SkillData.AllSkills
            .Where(s => s.RequiredProfession == profession && s.Type == SkillType.Profession && s.RequiredLevel <= level)
            .ToList();
    }

    private List<Skill> GetAllLearnableSharedSkills()
    {
        return GameState.Player.LearnedSharedSkills
            .Select(id => SkillData.GetSkillById(id))
            .Where(s => s != null)
            .ToList();
    }

    private bool IsEquipped(string skillId)
    {
        return GameState.Player.EquippedSkills[GameState.Player.SelectedBattleProfession].Contains(skillId);
    }

    private void ToggleSkill(Skill skill)
    {
        if (skill.Type == SkillType.Fixed) return; // 固定技能不能操作

        if (IsEquipped(skill.Id))
        {
            GameState.UnequipSkill(skill.Id);
        }
        else
        {
            GameState.EquipSkill(skill.Id);
        }
    }

    protected override void OnInitialized() => GameState.OnStateChanged += StateHasChanged;
    public void Dispose() => GameState.OnStateChanged -= StateHasChanged;
}