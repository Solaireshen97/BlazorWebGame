@page "/gathering"
@using BlazorWebGame.Models
@using BlazorWebGame.Models.Items
@using BlazorWebGame.Models.Monsters
@using BlazorWebGame.Services
@using BlazorWebGame.Utils
@using BlazorWebGame.Shared.Professions
@inject GameStateService GameState
@implements IDisposable

<PageTitle>草药学</PageTitle>

@if (GameState.ActiveCharacter is Player character)
{
    <div class="gathering-layout">
        <div class="header-section">
            <ProfessionHeader Title="草药学"
                              ProfessionType="Herbalist"
                              Level="@character.GetLevel(GatheringProfession.Herbalist)"
                              Experience="@character.GatheringProfessionXP.GetValueOrDefault(GatheringProfession.Herbalist)"
                              GatheringSpeedBonus="@character.GetTotalGatheringSpeedBonus()"
                              ExtraLootChance="@character.GetTotalExtraLootChance()" />

            <QuickSlotBar Title="采集食物"
                          QuickSlots="@character.GatheringFoodQuickSlots"
                          Cooldowns="@character.ConsumableCooldowns"
                          Inventory="@character.Inventory"
                          OnSlotClicked="@((slotId) => OpenQuickSlotPicker(ConsumableCategory.Food, slotId, FoodType.Gathering))"
                          OnSlotCleared="@((slotId) => GameState.ClearQuickSlotItem(ConsumableCategory.Food, slotId, FoodType.Gathering))" />
        </div>

        @if (character.CurrentAction == PlayerActionState.GatheringHerbalism && character.CurrentGatheringNode is GatheringNode currentNode)
        {
            @if (currentNode.RequiredProfession == GatheringProfession.Herbalist)
            {
                <ActionProgressCard Title="@($"正在采集: {currentNode.Name}")"
                                    ShowProgressBar="true"
                                    ProgressPercentage="@ProfessionHelper.GetGatheringProgress(character)"
                                    RemainingTimeText="@(ProfessionHelper.GetCurrentGatheringTime(character).ToString("F1") + "s")">
                    <button class="btn btn-danger" @onclick="GameState.StopCurrentAction">停止采集</button>
                </ActionProgressCard>
            }
            else
            {
                <ActionProgressCard Title="@($"正在{ProfessionHelper.GetOtherGatheringActionName(character)}，无法采集草药！")"
                                    IsBlocked="true">
                    <button class="btn btn-warning" @onclick="GameState.StopCurrentAction">停止当前活动</button>
                </ActionProgressCard>
            }
        }
        else if (character.CurrentAction != PlayerActionState.Idle)
        {
            <ActionProgressCard Title="@($"{character.Name} 正在进行其他活动 ({character.CurrentAction.ToString()})，无法采集草药！")"
                                IsBlocked="true">
                <button class="btn btn-warning" @onclick="GameState.StopCurrentAction">停止当前活动</button>
            </ActionProgressCard>
        }

        <div class="node-list">
            @foreach (var node in GameState.AvailableGatheringNodes.Where(n => n.RequiredProfession == GatheringProfession.Herbalist))
            {
                var (isUnlocked, reason) = ProfessionHelper.IsNodeUnlocked(character, node);
                <NodeCard Node="node"
                          IsUnlocked="isUnlocked"
                          LockReason="reason"
                          ButtonText="开始采集"
                          IsDisabled="@(character.CurrentAction != PlayerActionState.Idle)"
                          OnStartAction="() => GameState.StartGathering(node)" />
            }
        </div>
    </div>

    @if (_isPickerVisible)
    {
        <QuickSlotPicker Title="采集食物"
                         Items="@GetAvailableConsumablesForPicker(character)"
                         ItemCounts="@GetItemCounts(character)"
                         OnItemSelect="@SetQuickSlot"
                         OnCloseRequest="CloseQuickSlotPicker" />
    }
}
else
{
    <p>正在加载角色信息...</p>
}

@code {
    private bool _isPickerVisible = false;
    private int _managingSlotId;
    private ConsumableCategory _managingCategory;
    private FoodType _managingFoodType;

    protected override void OnInitialized()
    {
        GameState.OnStateChanged += StateHasChanged;
    }

    private Dictionary<string, int> GetItemCounts(Player character)
    {
        var result = new Dictionary<string, int>();
        foreach (var item in GetAvailableConsumablesForPicker(character))
        {
            result[item.Id] = ProfessionHelper.GetItemCountInInventory(character, item.Id);
        }
        return result;
    }

    private List<Consumable> GetAvailableConsumablesForPicker(Player character)
    {
        var itemIdsInInventory = character.Inventory
            .Where(s => !s.IsEmpty && s.ItemId != null)
            .Select(s => s.ItemId!)
            .ToHashSet();

        return ItemData.AllItems
            .OfType<Consumable>()
            .Where(c => c.FoodType == _managingFoodType && itemIdsInInventory.Contains(c.Id))
            .ToList();
    }

    private void OpenQuickSlotPicker(ConsumableCategory category, int slotId, FoodType foodType)
    {
        _managingCategory = category;
        _managingSlotId = slotId;
        _managingFoodType = foodType;
        _isPickerVisible = true;
    }

    private void CloseQuickSlotPicker()
    {
        _isPickerVisible = false;
    }

    private void SetQuickSlot(string itemId)
    {
        GameState.SetQuickSlotItem(_managingCategory, _managingSlotId, itemId);
        CloseQuickSlotPicker();
    }

    public void Dispose()
    {
        GameState.OnStateChanged -= StateHasChanged;
    }
}