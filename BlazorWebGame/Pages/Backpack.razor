@page "/backpack"
@page "/"
@using BlazorWebGame.Models
@using BlazorWebGame.Services
@using BlazorWebGame.Shared
@inject GameStateService GameState
@implements IDisposable

<PageTitle>背包</PageTitle>

@* --- vvv 核心修改：从检查 Player 改为检查 ActiveCharacter vvv --- *@
@if (GameState.ActiveCharacter is Player character)
{
    <div class="backpack-container">

        <!-- 左侧：装备栏 -->
        <div class="equipment-panel">
            <h3>装备</h3>
            <div class="player-stats">
                <p>生命值: @character.Health / @character.GetTotalMaxHealth()</p>
                <p>攻击力: @character.GetTotalAttackPower()</p>
                <p>金币: @character.Gold</p>
            </div>

            <div class="equipment-grid">
                <div class="equipment-column">
                    <EquipmentSlotDisplay Slot="EquipmentSlot.Head" Label="头部" OnClick="OnSlotClick" />
                    <EquipmentSlotDisplay Slot="EquipmentSlot.Neck" Label="颈部" OnClick="OnSlotClick" />
                    <EquipmentSlotDisplay Slot="EquipmentSlot.Shoulder" Label="肩部" OnClick="OnSlotClick" />
                    <EquipmentSlotDisplay Slot="EquipmentSlot.Back" Label="背部" OnClick="OnSlotClick" />
                    <EquipmentSlotDisplay Slot="EquipmentSlot.Chest" Label="胸部" OnClick="OnSlotClick" />
                    <EquipmentSlotDisplay Slot="EquipmentSlot.Wrist" Label="手腕" OnClick="OnSlotClick" />
                </div>
                <div class="equipment-column">
                    <EquipmentSlotDisplay Slot="EquipmentSlot.Hands" Label="手部" OnClick="OnSlotClick" />
                    <EquipmentSlotDisplay Slot="EquipmentSlot.Waist" Label="腰部" OnClick="OnSlotClick" />
                    <EquipmentSlotDisplay Slot="EquipmentSlot.Legs" Label="腿部" OnClick="OnSlotClick" />
                    <EquipmentSlotDisplay Slot="EquipmentSlot.Feet" Label="脚部" OnClick="OnSlotClick" />
                    <EquipmentSlotDisplay Slot="EquipmentSlot.Finger1" Label="戒指1" OnClick="OnSlotClick" />
                    <EquipmentSlotDisplay Slot="EquipmentSlot.Finger2" Label="戒指2" OnClick="OnSlotClick" />
                    <EquipmentSlotDisplay Slot="EquipmentSlot.Trinket1" Label="饰品1" OnClick="OnSlotClick" />
                    <EquipmentSlotDisplay Slot="EquipmentSlot.Trinket2" Label="饰品2" OnClick="OnSlotClick" />
                </div>
            </div>
            <div class="equipment-weapons">
                <EquipmentSlotDisplay Slot="EquipmentSlot.MainHand" Label="主手" OnClick="OnSlotClick" />
                <EquipmentSlotDisplay Slot="EquipmentSlot.OffHand" Label="副手" OnClick="OnSlotClick" />
            </div>
        </div>

        <!-- 中间：背包网格 -->
        <div class="inventory-panel">
            <h3>@character.Name 的背包</h3>
            <div class="inventory-grid">
                @foreach (var slot in character.Inventory)
                {
                    @if (!slot.IsEmpty)
                    {
                        var item = ItemData.GetItemById(slot.ItemId!)!;
                        <div class="item-slot @(_selectedItemForDetailView?.Id == item.Id ? "selected" : "")" @onclick="() => SelectItemForDetail(item)">
                            <div class="item-icon">@item.Name.Substring(0, 1)</div>
                            @if (item.IsStackable && slot.Quantity > 1)
                            {
                                <span class="item-quantity">@slot.Quantity</span>
                            }
                            @* 改进的 Tooltip, 如果您有 ItemTooltip.razor 组件的话 *@
                            <ItemTooltip Item="item" />
                        </div>
                    }
                    else
                    {
                        <div class="item-slot empty"></div>
                    }
                }
            </div>
        </div>

        <!-- 右侧：物品详情 -->
        <div class="item-detail-panel">
            <h3>物品详情</h3>
            @if (_selectedItemForDetailView != null)
            {
                <div class="detail-card">
                    <div class="detail-header">
                        <h5>@_selectedItemForDetailView.Name</h5>
                    </div>
                    <p class="detail-description">@_selectedItemForDetailView.Description</p>
                    <p><strong>售价:</strong> @_selectedItemForDetailView.Value 金币</p>
                    <hr />

                    @if (_selectedItemForDetailView is Equipment eq)
                    {
                        <div class="detail-stats">
                            <p><strong>类型:</strong> @eq.Slot.ToString()</p>
                            @if (eq.AttackBonus > 0) { <p><strong>攻击力:</strong> <span class="stat-bonus">+@eq.AttackBonus</span></p> }
                            @if (eq.HealthBonus > 0) { <p><strong>生命值:</strong> <span class="stat-bonus">+@eq.HealthBonus</span></p> }
                            @if (eq.GatheringSpeedBonus > 0) { <p><strong>采集速度:</strong> <span class="stat-bonus">+@((eq.GatheringSpeedBonus * 100).ToString("F0"))%</span></p> }
                            @if (eq.ExtraLootChanceBonus > 0) { <p><strong>额外掉落:</strong> <span class="stat-bonus">+@((eq.ExtraLootChanceBonus * 100).ToString("F0"))%</span></p> }
                        </div>
                        <div class="d-flex gap-2 mt-3">
                            <button class="btn btn-success" @onclick="() => GameState.EquipItem(eq.Id)">装备</button>
                            <button class="btn btn-warning" @onclick="() => SellSelectedItem()">出售</button>
                        </div>
                    }
                    else if (_selectedItemForDetailView is Consumable consumable)
                    {
                        <div class="d-flex gap-2 mt-3">
                            @if (consumable.Category == ConsumableCategory.Recipe)
                            {
                                bool isLearned = !string.IsNullOrEmpty(consumable.RecipeIdToLearn) && character.LearnedRecipeIds.Contains(consumable.RecipeIdToLearn);
                                if (isLearned)
                                {
                                    <button class="btn btn-secondary" disabled>已学会</button>
                                }
                                else
                                {
                                    <button class="btn btn-primary" @onclick="() => UseSelectedItem()">学习</button>
                                }
                            }
                            else
                            {
                                <button class="btn btn-primary" @onclick="() => UseSelectedItem()">使用</button>
                            }
                            <button class="btn btn-warning" @onclick="() => SellSelectedItem()">出售</button>
                        </div>
                    }
                </div>
            }
            else
            {
                <div class="detail-card-placeholder"><p>从中间的背包中选择一件物品查看详情。</p></div>
            }
        </div>
    </div>
}
else
{
    <p>正在加载角色信息...</p>
}
@* --- ^^^ 修改结束 ^^^ --- *@

@code {
    private Item? _selectedItemForDetailView;

    protected override void OnInitialized()
    {
        GameState.OnStateChanged += StateHasChanged;
    }

    private void SelectItemForDetail(Item item)
    {
        _selectedItemForDetailView = item;
    }

    private void OnSlotClick(EquipmentSlot slot)
    {
        var character = GameState.ActiveCharacter;
        if (character != null && character.EquippedItems.TryGetValue(slot, out var itemId))
        {
            _selectedItemForDetailView = ItemData.GetItemById(itemId);
        }
    }

    private void UseSelectedItem()
    {
        if (_selectedItemForDetailView != null)
        {
            GameState.UseItem(_selectedItemForDetailView.Id);
            _selectedItemForDetailView = null; // 使用后清空详情
        }
    }

    private void SellSelectedItem()
    {
        if (_selectedItemForDetailView != null)
        {
            GameState.SellItem(_selectedItemForDetailView.Id, 1);
            _selectedItemForDetailView = null; // 出售后清空详情
        }
    }

    public void Dispose()
    {
        GameState.OnStateChanged -= StateHasChanged;
    }
}