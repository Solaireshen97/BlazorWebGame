@page "/fishing"
@using BlazorWebGame.Models
@using BlazorWebGame.Models.Items
@using BlazorWebGame.Services
@inject GameStateService GameState
@implements IDisposable

<PageTitle>钓鱼</PageTitle>

@* --- vvv 核心修改：从检查 Player 改为检查 ActiveCharacter vvv --- *@
@if (GameState.ActiveCharacter is Player character)
{
    <div class="gathering-layout">
        <div class="header-section">
            <div class="profession-info">
                <h3>钓鱼</h3>
                <div class="profession-stats">
                    <p>
                        等级: <strong>@character.GetLevel(GatheringProfession.Fishing)</strong>
                        (XP: @(character.GatheringProfessionXP.GetValueOrDefault(GatheringProfession.Fishing)))
                    </p>
                    <p>
                        采集速度加成: <strong>@((character.GetTotalGatheringSpeedBonus() * 100).ToString("F0"))%</strong>
                    </p>
                    <p>
                        额外掉落几率: <strong>@((character.GetTotalExtraLootChance() * 100).ToString("F0"))%</strong>
                    </p>
                </div>
            </div>

            <div class="consumable-bar">
                <h5>采集食物</h5>
                <div class="consumable-quick-slots">
                    @for (int i = 0; i < 2; i++)
                    {
                        var slotId = i;
                        <div class="quick-slot"
                             @onclick="() => OpenQuickSlotPicker(ConsumableCategory.Food, slotId, FoodType.Gathering)"
                             @oncontextmenu="() => GameState.ClearQuickSlotItem(ConsumableCategory.Food, slotId, FoodType.Gathering)"
                             @oncontextmenu:preventDefault>
                            @if (character.GatheringFoodQuickSlots != null && character.GatheringFoodQuickSlots.TryGetValue(slotId, out var itemId) && !string.IsNullOrEmpty(itemId))
                            {
                                var item = ItemData.GetItemById(itemId);
                                if (item != null)
                                {
                                    var cooldown = character.ConsumableCooldowns.GetValueOrDefault(itemId, 0);
                                    var count = GetItemCountInInventory(character, itemId);
                                    <div class="quick-slot-item @(count == 0 ? "depleted" : "")" title="@item.Name (@count) - 右键清空">
                                        <div class="item-icon">@item.Name.Substring(0, 1)</div>
                                        <span class="item-count">@count</span>
                                        @if (cooldown > 0)
                                        {
                                            <div class="cooldown-overlay"><span>@((int)cooldown)</span></div>
                                        }
                                    </div>
                                }
                            }
                            else
                            {
                                <div class="quick-slot-empty" title="点击设置采集食物"></div>
                            }
                        </div>
                    }
                </div>
            </div>
        </div>

        @if (character.CurrentAction == PlayerActionState.Gathering && character.CurrentGatheringNode is GatheringNode currentNode)
        {
            @if (currentNode.RequiredProfession == GatheringProfession.Fishing)
            {
                <div class="current-action-card">
                    <h4>正在钓鱼: @currentNode.Name</h4>
                    <div class="progress-bar-container">
                        <div class="progress-bar" style="width: @(GetGatheringProgress(character))%;"></div>
                        <span class="progress-text">@GetCurrentGatheringTime(character).ToString("F1")s</span>
                    </div>
                    <button class="btn btn-danger mt-3" @onclick="GameState.StopCurrentAction">停止钓鱼</button>
                </div>
            }
            else
            {
                <div class="action-blocked-card">
                    <p><strong>正在 @GetOtherGatheringActionName(character)，无法钓鱼！</strong></p>
                    <button class="btn btn-warning" @onclick="GameState.StopCurrentAction">停止当前活动</button>
                </div>
            }
        }
        else if (character.CurrentAction != PlayerActionState.Idle)
        {
            <div class="action-blocked-card">
                <p><strong>@character.Name 正在进行其他活动 (@character.CurrentAction.ToString())，无法钓鱼！</strong></p>
                <button class="btn btn-warning" @onclick="GameState.StopCurrentAction">停止当前活动</button>
            </div>
        }


        <div class="node-list">
            @foreach (var node in GameState.AvailableGatheringNodes.Where(n => n.RequiredProfession == GatheringProfession.Fishing))
            {
                var (isUnlocked, reason) = IsNodeUnlocked(character, node);
                <div class="node-card @(isUnlocked ? "" : "locked")">
                    <div class="node-header">
                        <h5>@node.Name</h5>
                        <span class="node-level">Lv. @node.RequiredLevel</span>
                    </div>
                    <p class="node-description">@node.Description</p>
                    <div class="node-footer">
                        <span>产出: @(ItemData.GetItemById(node.ResultingItemId)?.Name)</span>
                        <span>时间: @node.GatheringTimeSeconds 秒</span>
                    </div>

                    @if (isUnlocked)
                    {
                        <button class="btn btn-success" @onclick="() => GameState.StartGathering(node)" disabled="@(character.CurrentAction != PlayerActionState.Idle)">
                            @(character.CurrentAction == PlayerActionState.Idle ? "开始钓鱼" : "正在行动")
                        </button>
                    }
                    else
                    {
                        <div class="lock-reason">
                            @reason
                        </div>
                    }
                </div>
            }
        </div>
    </div>

    @if (_isPickerVisible && GameState.ActiveCharacter is Player pickerCharacter)
    {
        <div class="modal-backdrop" @onclick="CloseQuickSlotPicker"></div>
        <div class="quick-slot-picker">
            <h5>选择采集食物</h5>
            <div class="picker-item-list">
                @foreach (var item in GetAvailableConsumablesForPicker(pickerCharacter))
                {
                    <div class="picker-item" @onclick="() => SetQuickSlot(item.Id)">
                        <span class="picker-item-name">@item.Name</span>
                        <span class="picker-item-count">(x@(GetItemCountInInventory(pickerCharacter, item.Id)))</span>
                    </div>
                }
            </div>
            <button class="btn btn-secondary mt-2" @onclick="CloseQuickSlotPicker">关闭</button>
        </div>
    }
}
else
{
    <p>正在加载角色信息...</p>
}
@* --- ^^^ 修改结束 ^^^ --- *@

@code {
    private bool _isPickerVisible = false;
    private int _managingSlotId;
    private ConsumableCategory _managingCategory;
    private FoodType _managingFoodType;

    protected override void OnInitialized()
    {
        GameState.OnStateChanged += StateHasChanged;
    }

    // --- vvv 新增和修改的辅助方法 vvv ---

    private double GetCurrentGatheringTime(Player character)
    {
        if (character.CurrentGatheringNode == null) return 0;
        double speedBonus = character.GetTotalGatheringSpeedBonus();
        return character.CurrentGatheringNode.GatheringTimeSeconds / (1 + speedBonus);
    }

    private double GetGatheringProgress(Player character)
    {
        var totalTime = GetCurrentGatheringTime(character);
        if (totalTime <= 0) return 0;
        var progress = (totalTime - character.GatheringCooldown) / totalTime;
        return Math.Clamp(progress * 100, 0, 100);
    }

    private string GetOtherGatheringActionName(Player character)
    {
        return character.CurrentGatheringNode?.RequiredProfession switch
        {
            GatheringProfession.Herbalist => "采集草药",
            GatheringProfession.Miner => "采矿",
            _ => "进行其他采集"
        };
    }

    private (bool, string) IsNodeUnlocked(Player character, GatheringNode node)
    {
        if (character.GetLevel(node.RequiredProfession) < node.RequiredLevel)
        {
            return (false, $"需要 {node.RequiredProfession} 等级达到 {node.RequiredLevel}");
        }

        if (!string.IsNullOrEmpty(node.RequiredMonsterId) && !character.DefeatedMonsterIds.Contains(node.RequiredMonsterId))
        {
            var monsterName = MonsterTemplates.All.FirstOrDefault(m => m.Name == node.RequiredMonsterId)?.Name ?? "未知怪物";
            return (false, $"需要先击败 {monsterName}");
        }

        return (true, string.Empty);
    }

    private int GetItemCountInInventory(Player character, string itemId)
    {
        return character.Inventory.Where(s => s.ItemId == itemId).Sum(s => s.Quantity);
    }

    private List<Consumable> GetAvailableConsumablesForPicker(Player character)
    {
        var itemIdsInInventory = character.Inventory
            .Where(s => !s.IsEmpty && s.ItemId != null)
            .Select(s => s.ItemId!)
            .ToHashSet();

        return ItemData.AllItems
            .OfType<Consumable>()
            .Where(c => c.FoodType == _managingFoodType && itemIdsInInventory.Contains(c.Id))
            .ToList();
    }

    // --- ^^^ 方法修改结束 ^^^ ---

    private void OpenQuickSlotPicker(ConsumableCategory category, int slotId, FoodType foodType)
    {
        _managingCategory = category;
        _managingSlotId = slotId;
        _managingFoodType = foodType;
        _isPickerVisible = true;
    }

    private void CloseQuickSlotPicker()
    {
        _isPickerVisible = false;
    }

    private void SetQuickSlot(string itemId)
    {
        GameState.SetQuickSlotItem(_managingCategory, _managingSlotId, itemId);
        CloseQuickSlotPicker();
    }

    public void Dispose()
    {
        GameState.OnStateChanged -= StateHasChanged;
    }
}