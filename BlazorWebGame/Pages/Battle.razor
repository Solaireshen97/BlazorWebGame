@page "/battle"
@using BlazorWebGame.Models
@using BlazorWebGame.Services
@inject GameStateService GameState
@implements IDisposable

<PageTitle>自动战斗</PageTitle>

@if (GameState.Player != null)
{
    <div class="battle-page-layout">
        <!-- 怪物选择 -->
        <div class="monster-selection-area">
            @foreach (var monsterTemplate in GameState.AvailableMonsters)
            {
                <button class="monster-select-card @(IsCurrentEnemy(monsterTemplate) ? "active" : "")"
                        @onclick="() => SelectEnemy(monsterTemplate)"
                        disabled="@GameState.IsPlayerDead">
                    @monsterTemplate.Name
                </button>
            }
        </div>

        <!-- 战斗核心 -->
        <div class="battle-core-area">
            @if (GameState.IsPlayerDead)
            {
                <div class="player-dead-card">
                    <h3>你被击败了...</h3>
                    <p>复活倒计时: @GameState.RevivalTimeRemaining.ToString("F1")s</p>
                </div>
            }
            else if (GameState.Player.CurrentAction == PlayerActionState.Gathering)
            {
                <div class="action-blocked-card">
                    <p><strong>正在采集中，无法战斗！</strong></p>
                    <button class="btn btn-warning" @onclick="GameState.StopCurrentAction">停止采集</button>
                </div>
            }
            else if (GameState.CurrentEnemy != null)
            {
                <div class="battle-container">
                    <!-- 玩家卡片 -->
                    <div class="character-card player-card">
                        <div class="character-image-placeholder"><span>头像</span></div>
                        <h5>@GameState.Player.Name</h5>

                        <div class="profession-display">
                            <span>@GameState.Player.SelectedBattleProfession.ToChineseString()</span>
                            <span>Lv. @GameState.Player.GetLevel(GameState.Player.SelectedBattleProfession)</span>
                        </div>

                        <div class="health-bar-container">
                            <div class="health-bar player-health" style="width: @(GetPlayerHealthPercentage())%;"></div>
                        </div>
                        <p>@GameState.Player.Health / @GameState.Player.GetTotalMaxHealth()</p>

                        <div class="attack-progress-container">
                            <div class="attack-progress-bar" style="width: @(GameState.PlayerAttackProgress)%;"></div>
                        </div>

                        <!-- 技能 & 消耗品 -->
                        <div class="action-bar">
                            <!-- 技能 -->
                            <div class="equipped-skills-display">
                                @foreach (var skillId in GameState.Player.EquippedSkills[GameState.Player.SelectedBattleProfession])
                                {
                                    var skill = SkillData.GetSkillById(skillId);
                                    if (skill != null)
                                    {
                                        var cooldown = GameState.Player.SkillCooldowns.GetValueOrDefault(skillId, 0);
                                        <div class="skill-icon-container" title="@skill.Name: @skill.Description">
                                            <div class="skill-icon">@skill.Name.Substring(0, 1)</div>
                                            @if (cooldown > 0)
                                            {
                                                <div class="cooldown-overlay"><span>@cooldown</span></div>
                                            }
                                        </div>
                                    }
                                }
                            </div>
                            <!-- 消耗品 -->
                            <div class="consumable-quick-slots">
                                <!-- 药水 -->
                                @for (int i = 0; i < 2; i++)
                                {
                                    var slotId = i;
                                    <div class="quick-slot"
                                         @onclick="() => OpenQuickSlotPicker(ConsumableCategory.Potion, slotId, FoodType.None)"
                                         @oncontextmenu="() => GameState.ClearQuickSlotItem(ConsumableCategory.Potion, slotId)"
                                         @oncontextmenu:preventDefault>
                                        @if (GameState.Player.PotionQuickSlots.TryGetValue(slotId, out var itemId) && !string.IsNullOrEmpty(itemId))
                                        {
                                            var item = ItemData.GetItemById(itemId);
                                            var cooldown = GameState.Player.ConsumableCooldowns.GetValueOrDefault(itemId, 0);
                                            var count = GetItemCountInInventory(itemId);
                                            <div class="quick-slot-item @(count == 0 ? "depleted" : "")" title="@item.Name (@count) - 右键清空">
                                                <div class="item-icon">@item.Name.Substring(0, 1)</div>
                                                <span class="item-count">@count</span>
                                                @if (cooldown > 0)
                                                {
                                                    <div class="cooldown-overlay"><span>@((int)cooldown)</span></div>
                                                }
                                            </div>
                                        }
                                        else
                                        {
                                            <div class="quick-slot-empty" title="点击设置药水"></div>
                                        }
                                    </div>
                                }
                                <!-- 战斗食物 -->
                                @for (int i = 0; i < 2; i++)
                                {
                                    var slotId = i;
                                    <div class="quick-slot"
                                         @onclick="() => OpenQuickSlotPicker(ConsumableCategory.Food, slotId, FoodType.Combat)"
                                         @oncontextmenu="() => GameState.ClearQuickSlotItem(ConsumableCategory.Food, slotId, FoodType.Combat)"
                                         @oncontextmenu:preventDefault>
                                        @if (GameState.Player.CombatFoodQuickSlots.TryGetValue(slotId, out var itemId) && !string.IsNullOrEmpty(itemId))
                                        {
                                            var item = ItemData.GetItemById(itemId);
                                            var cooldown = GameState.Player.ConsumableCooldowns.GetValueOrDefault(itemId, 0);
                                            var count = GetItemCountInInventory(itemId);
                                            <div class="quick-slot-item @(count == 0 ? "depleted" : "")" title="@item.Name (@count) - 右键清空">
                                                <div class="item-icon">@item.Name.Substring(0, 1)</div>
                                                <span class="item-count">@count</span>
                                                @if (cooldown > 0)
                                                {
                                                    <div class="cooldown-overlay"><span>@((int)cooldown)</span></div>
                                                }
                                            </div>
                                        }
                                        else
                                        {
                                            <div class="quick-slot-empty" title="点击设置战斗食物"></div>
                                        }
                                    </div>
                                }
                            </div>
                        </div>
                    </div>

                    <!-- 敌人卡片 -->
                    <div class="character-card enemy-card">
                        <h4>@GameState.CurrentEnemy.Name</h4>
                        <div class="character-image-placeholder"></div>
                        <div class="health-bar-container">
                            <div class="health-bar enemy-health" style="width: @(100.0 * GameState.CurrentEnemy.Health / GameState.CurrentEnemy.MaxHealth)%;"></div>
                        </div>
                        <p>生命值: @GameState.CurrentEnemy.Health / @GameState.CurrentEnemy.MaxHealth</p>
                        <div class="attack-progress-container">
                            <div class="attack-progress-bar" style="width: @(GameState.EnemyAttackProgress)%;"></div>
                        </div>

                        <!-- *** 这是关键的修正点 *** -->
                        <div class="action-bar">
                            <div class="equipped-skills-display">
                                @foreach (var skillId in GameState.CurrentEnemy.SkillIds)
                                {
                                    var skill = SkillData.GetSkillById(skillId);
                                    if (skill != null)
                                    {
                                        var cooldown = GameState.CurrentEnemy.SkillCooldowns.GetValueOrDefault(skillId, 0);
                                        <div class="skill-icon-container" title="@skill.Name: @skill.Description">
                                            <div class="skill-icon">@skill.Name.Substring(0, 1)</div>
                                            @if (cooldown > 0)
                                            {
                                                <div class="cooldown-overlay"><span>@cooldown</span></div>
                                            }
                                        </div>
                                    }
                                }
                            </div>
                        </div>
                    </div>
                </div>
            }
            else
            {
                <p>选择一个怪物开始战斗！</p>
            }
        </div>

        <!-- 装备及细节信息 -->
        <div class="details-area">
            <div class="details-card">
                <h5>玩家属性</h5>
                <p>攻击力: @GameState.Player.GetTotalAttackPower()</p>
                <p>攻击速度: @GameState.Player.AttacksPerSecond.ToString("F2") 次/秒</p>
            </div>

            @if (GameState.CurrentEnemy != null && !GameState.IsPlayerDead)
            {
                <div class="details-card">
                    <h5>@GameState.CurrentEnemy.Name 属性</h5>
                    <p>攻击力: @GameState.CurrentEnemy.AttackPower</p>
                    <p>攻击速度: @GameState.CurrentEnemy.AttacksPerSecond.ToString("F2") 次/秒</p>
                    <p>经验奖励: @GameState.CurrentEnemy.XpReward</p>
                    <hr />
                    <h6>可能掉落</h6>
                    <div class="loot-table">
                        @foreach (var lootEntry in GameState.CurrentEnemy.LootTable)
                        {
                            var item = ItemData.GetItemById(lootEntry.Key);
                            if (item != null)
                            {
                                <div class="loot-item">
                                    <span>@item.Name (@((lootEntry.Value * 100).ToString("F0"))%)</span>
                                    <label class="auto-sell-toggle">
                                        <input type="checkbox"
                                               checked="@(GameState.Player.AutoSellItemIds.Contains(item.Id))"
                                               @onchange="() => GameState.ToggleAutoSellItem(item.Id)" />
                                        自动出售
                                    </label>
                                </div>
                            }
                        }
                    </div>
                </div>
            }
        </div>
    </div>

    @if (_isPickerVisible)
    {
        <div class="modal-backdrop" @onclick="CloseQuickSlotPicker"></div>
        <div class="quick-slot-picker">
            <h5>选择一个物品</h5>
            <div class="picker-item-list">
                @foreach (var item in GetAvailableConsumablesForPicker())
                {
                    <div class="picker-item" @onclick="() => SetQuickSlot(item.Id)">
                        <span class="picker-item-name">@item.Name</span>
                        <span class="picker-item-count">(x@(GetItemCountInInventory(item.Id)))</span>
                    </div>
                }
            </div>
            <button class="btn btn-secondary mt-2" @onclick="CloseQuickSlotPicker">关闭</button>
        </div>
    }
}

@code {
    private bool _isPickerVisible = false;
    private int _managingSlotId;
    private ConsumableCategory _managingCategory;
    private FoodType _managingFoodType;

    protected override void OnInitialized()
    {
        GameState.OnStateChanged += StateHasChanged;
    }

    private void SelectEnemy(Enemy enemyTemplate) => GameState.StartCombat(enemyTemplate);

    private bool IsCurrentEnemy(Enemy enemyTemplate) => GameState.CurrentEnemy?.Name == enemyTemplate.Name;

    private double GetPlayerHealthPercentage() => GameState.Player?.GetTotalMaxHealth() > 0 ? (double)Math.Max(0, GameState.Player.Health) / GameState.Player.GetTotalMaxHealth() * 100 : 0;

    private void OpenQuickSlotPicker(ConsumableCategory category, int slotId, FoodType foodType)
    {
        _managingCategory = category;
        _managingSlotId = slotId;
        _managingFoodType = foodType;
        _isPickerVisible = true;
    }

    private void CloseQuickSlotPicker()
    {
        _isPickerVisible = false;
    }

    private void SetQuickSlot(string itemId)
    {
        GameState.SetQuickSlotItem(_managingCategory, _managingSlotId, itemId);
        CloseQuickSlotPicker();
    }

    private List<Consumable> GetAvailableConsumablesForPicker()
    {
        var itemIdsInInventory = GameState.Player.Inventory
            .Where(s => !s.IsEmpty)
            .Select(s => s.ItemId)
            .Distinct();

        var query = ItemData.AllItems.OfType<Consumable>();

        if (_managingCategory == ConsumableCategory.Food)
        {
            query = query.Where(c => c.FoodType == _managingFoodType);
        }
        else
        {
            query = query.Where(c => c.Category == _managingCategory);
        }

        return query.Where(c => itemIdsInInventory.Contains(c.Id)).ToList();
    }

    private int GetItemCountInInventory(string itemId)
    {
        return GameState.Player.Inventory.Where(s => s.ItemId == itemId).Sum(s => s.Quantity);
    }

    public void Dispose()
    {
        GameState.OnStateChanged -= StateHasChanged;
    }
}