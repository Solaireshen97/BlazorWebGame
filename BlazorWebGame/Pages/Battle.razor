@page "/battle"
@using BlazorWebGame.Models
@using BlazorWebGame.Models.Battles
@using BlazorWebGame.Models.Dungeons
@using BlazorWebGame.Models.Items
@using BlazorWebGame.Models.Monsters
@using BlazorWebGame.Services
@using static BlazorWebGame.Services.CombatService
@inject GameStateService GameState
@implements IDisposable

<PageTitle>自动战斗</PageTitle>

@if (GameState.ActiveCharacter is Player character)
{
    var party = GameState.GetPartyForCharacter(character.Id);
    var battleContext = _combatService?.GetBattleContextForPlayer(character.Id);
    var currentEnemy = GetCurrentEnemy(character, party, battleContext);
    var isPartyMemberAndNotCaptain = party != null && party.CaptainId != character.Id;

    <div class="battle-page-layout">
        <!-- 怪物选择 -->
        <div class="monster-selection-area">
            @foreach (var monsterTemplate in GameState.AvailableMonsters)
            {
                <button class="monster-select-card @(currentEnemy?.Name == monsterTemplate.Name ? "active" : "")"
                        @onclick="() => StartBattle(monsterTemplate)"
                        disabled="@isPartyMemberAndNotCaptain">
                    @monsterTemplate.Name
                </button>
            }

            <!-- 只保留副本选项的入口，因为副本是特殊的战斗类型 -->
            @if (party != null && party.CaptainId == character.Id)
            {
                <div class="dungeon-options mt-3">
                    <button class="btn btn-info" @onclick="() => _currentView = BattleView.Party">
                        查看可用副本
                    </button>
                </div>
            }
        </div>

        <div class="view-switcher d-flex justify-content-center gap-2 mb-3 border-bottom pb-3">
            <button class="btn @(_currentView == BattleView.Battle ? "btn-primary" : "btn-outline-primary")" @onclick="() => _currentView = BattleView.Battle">
                战斗
            </button>
            <button class="btn @(_currentView == BattleView.Party ? "btn-primary" : "btn-outline-primary")" @onclick="() => _currentView = BattleView.Party">
                队伍
            </button>
        </div>

        @if (_currentView == BattleView.Battle)
        {
            <!-- 战斗模式提示 -->
            @if (party != null)
            {
                <div class="battle-mode-info mb-3 text-center small">
                    <i class="bi bi-info-circle"></i>
                    @if (_combatService?.GetBattleContextForPlayer(character.Id) != null)
                    {
                        <span>战斗模式: @GetBattleModeText(character) - 自动战斗中</span>
                    }
                    else if (_isBattleRefreshing(character.Id))
                    {
                        <span>战斗冷却中: @GetBattleRefreshTime(character.Id).ToString("F1")秒后自动开始下一场战斗</span>
                    }
                    else
                    {
                        <span>战斗模式: @GetBattleModeText(character) - 等待开始</span>
                    }
                </div>
            }
            else
            {
                <div class="battle-mode-info mb-3 text-center small">
                    <i class="bi bi-info-circle"></i>
                    战斗模式: 单人战斗
                </div>
            }
            <!-- ================= BATTLE VIEW (战斗视图) ================= -->
            <!-- 核心战斗区 -->
            <div class="battle-core-area">
                <!-- 战斗上下文信息显示 -->
                @if (battleContext != null)
                {
                    <div class="battle-context-info mb-3">
                        <h5 class="text-center">
                            @(battleContext.BattleType == BattleType.Dungeon ?
                                            $"副本战斗: {GetDungeonName(battleContext.DungeonId)} (波次 {battleContext.WaveNumber})" :
                                            "多对多战斗")
            </h5>
            <div class="enemy-count text-center mb-2">
                敌人: @battleContext.Enemies.Count 个剩余
            </div>
        </div>
                }

                <div class="battle-container">
                    <!-- 玩家卡片 -->
                    <div class="character-card player-card">
                        @if (character.IsDead)
                        {
                            <div class="player-dead-card">
                                <h3>你被击败了...</h3>
                                <p>复活倒计时: @character.RevivalTimeRemaining.ToString("F1")s</p>
                            </div>
                        }
                        else
                        {
                            <div class="character-image-placeholder"><span>头像</span></div>
                            <h5>@character.Name</h5>
                            <div class="profession-display">
                                <span>@character.SelectedBattleProfession.ToChineseString()</span>
                                <span>Lv. @character.GetLevel(character.SelectedBattleProfession)</span>
                            </div>
                            <div class="health-bar-container">
                                <div class="health-bar player-health" style="width: @(GetHealthPercentage(character.Health, character.GetTotalMaxHealth()))%;"></div>
                                <span class="health-text">@character.Health / @character.GetTotalMaxHealth()</span>
                            </div>
                            <div class="attack-progress-container">
                                <div class="attack-progress-bar" style="width: @(GetAttackProgress(character.AttackCooldown, character.AttacksPerSecond))%;"></div>
                            </div>
                            <div class="action-bar">
                                <div class="equipped-skills-display">
                                    @foreach (var skillId in character.EquippedSkills[character.SelectedBattleProfession])
                                    {
                                        var skill = SkillData.GetSkillById(skillId);
                                        if (skill != null)
                                        {
                                            <div class="skill-icon-container" title="@skill.Name: @skill.Description">
                                                <div class="skill-icon">@skill.Name.Substring(0, 1)</div>
                                                @if (character.SkillCooldowns.GetValueOrDefault(skillId, 0) > 0)
                                                {
                                                    <div class="cooldown-overlay"><span>@character.SkillCooldowns[skillId]</span></div>
                                                }
                                            </div>
                                        }
                                    }
                                </div>
                                <div class="consumable-quick-slots">
                                    @for (int i = 0; i < 2; i++)
                                    {
                                        var slotId = i;
                                        <div class="quick-slot" @onclick="() => OpenQuickSlotPicker(ConsumableCategory.Potion, slotId, FoodType.None)" @oncontextmenu:preventDefault @oncontextmenu="() => GameState.ClearQuickSlotItem(ConsumableCategory.Potion, slotId)">
                                            @if (character.PotionQuickSlots.TryGetValue(slotId, out var itemId) && !string.IsNullOrEmpty(itemId) && ItemData.GetItemById(itemId) is Consumable item)
                                            {
                                                <div class="quick-slot-item @(GetItemCountInInventory(character, itemId) == 0 ? "depleted" : "")" title="@item.Name (@GetItemCountInInventory(character, itemId)) - 右键清空">
                                                    <div class="item-icon">@item.Name.Substring(0, 1)</div>
                                                    <span class="item-count">@GetItemCountInInventory(character, itemId)</span>
                                                    @if (character.ConsumableCooldowns.GetValueOrDefault(itemId, 0) > 0)
                                                    {
                                                        <div class="cooldown-overlay"><span>@((int)character.ConsumableCooldowns[itemId])</span></div>
                                                    }
                                                </div>
                                            }
                                            else
                                            {
                                                <div class="quick-slot-empty" title="点击设置药水"></div>
                                            }
                                        </div>
                                    }
                                    @for (int i = 0; i < 2; i++)
                                    {
                                        var slotId = i;
                                        <div class="quick-slot" @onclick="() => OpenQuickSlotPicker(ConsumableCategory.Food, slotId, FoodType.Combat)" @oncontextmenu:preventDefault @oncontextmenu="() => GameState.ClearQuickSlotItem(ConsumableCategory.Food, slotId, FoodType.Combat)">
                                            @if (character.CombatFoodQuickSlots.TryGetValue(slotId, out var itemId) && !string.IsNullOrEmpty(itemId) && ItemData.GetItemById(itemId) is Consumable item)
                                            {
                                                <div class="quick-slot-item @(GetItemCountInInventory(character, itemId) == 0 ? "depleted" : "")" title="@item.Name (@GetItemCountInInventory(character, itemId)) - 右键清空">
                                                    <div class="item-icon">@item.Name.Substring(0, 1)</div>
                                                    <span class="item-count">@GetItemCountInInventory(character, itemId)</span>
                                                    @if (character.ConsumableCooldowns.GetValueOrDefault(itemId, 0) > 0)
                                                    {
                                                        <div class="cooldown-overlay"><span>@((int)character.ConsumableCooldowns[itemId])</span></div>
                                                    }
                                                </div>
                                            }
                                            else
                                            {
                                                <div class="quick-slot-empty" title="点击设置战斗食物"></div>
                                            }
                                        </div>
                                    }
                                </div>
                            </div>
                        }
                    </div>

                    <!-- 怪物卡片（在多对多战斗中显示目标敌人） -->
                    <div class="character-card enemy-card">
                        @if (currentEnemy is null)
                        {
                            <div class="character-image-placeholder"><span>怪物</span></div>
                            <h5 class="text-muted">请选择怪物</h5>
                        }
                        else
                        {
                            <div class="character-image-placeholder"><span>怪</span></div>
                            <h5>@currentEnemy.Name</h5>
                            <div class="health-bar-container">
                                <div class="health-bar enemy-health" style="width: @(GetHealthPercentage(currentEnemy.Health, currentEnemy.MaxHealth))%;"></div>
                                <span class="health-text">@currentEnemy.Health / @currentEnemy.MaxHealth</span>
                            </div>
                            <div class="attack-progress-container">
                                <div class="attack-progress-bar" style="width: @(GetAttackProgress(currentEnemy.EnemyAttackCooldown, currentEnemy.AttacksPerSecond))%;"></div>
                            </div>
                            <div class="action-bar">
                                <div class="equipped-skills-display">
                                    @foreach (var skillId in currentEnemy.SkillIds)
                                    {
                                        var skill = SkillData.GetSkillById(skillId);
                                        if (skill != null)
                                        {
                                            <div class="skill-icon-container" title="@skill.Name: @skill.Description">
                                                <div class="skill-icon">@skill.Name.Substring(0, 1)</div>
                                                @if (currentEnemy.SkillCooldowns.GetValueOrDefault(skillId, 0) > 0)
                                                {
                                                    <div class="cooldown-overlay"><span>@currentEnemy.SkillCooldowns[skillId]</span></div>
                                                }
                                            </div>
                                        }
                                    }
                                </div>
                            </div>
                        }
                    </div>
                </div>

                <!-- 多对多战斗中显示其他敌人列表 -->
                @if (battleContext != null && battleContext.Enemies.Count > 1)
                {
                    <div class="other-enemies-list mt-3">
                        <h6>其他敌人:</h6>
                        <div class="enemy-list d-flex flex-wrap gap-2">
                            @foreach (var enemy in battleContext.Enemies.Where(e => e != currentEnemy))
                            {
                                <div class="enemy-mini-card p-2 border rounded"
                                     @onclick="() => SetPlayerTarget(character.Id, enemy.Name, battleContext)">
                                    <div class="d-flex justify-content-between">
                                        <span>@enemy.Name</span>
                                        <span>Lv.@enemy.Level</span>
                                    </div>
                                    <div class="mini-health-bar">
                                        <div class="mini-health-fill" style="width: @(GetHealthPercentage(enemy.Health, enemy.MaxHealth))%"></div>
                                        <span class="mini-health-text">@enemy.Health/@enemy.MaxHealth</span>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                }

                <!-- 多对多战斗中显示其他玩家列表 -->
                @if (battleContext != null && battleContext.Players.Count > 1)
                {
                    <div class="other-players-list mt-3">
                        <h6>其他玩家:</h6>
                        <div class="player-list d-flex flex-wrap gap-2">
                            @foreach (var player in battleContext.Players.Where(p => p.Id != character.Id))
                            {
                                <div class="player-mini-card p-2 border rounded @(player.IsDead ? "bg-danger text-white" : "")">
                                    <div class="d-flex justify-content-between">
                                        <span>@player.Name</span>
                                        <span>@player.SelectedBattleProfession.ToChineseString()</span>
                                    </div>
                                    <div class="mini-health-bar">
                                        <div class="mini-health-fill" style="width: @(GetHealthPercentage(player.Health, player.GetTotalMaxHealth()))%"></div>
                                        <span class="mini-health-text">@player.Health/@player.GetTotalMaxHealth()</span>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                }
            </div>
        }
        else // _currentView == BattleView.Party
        {
            <!-- ================= PARTY VIEW (队伍视图) ================= -->
            <div class="party-management-view p-3">
                @if (party == null)
                {
                    <h4 class="mb-3">创建或加入队伍</h4>
                    <p>@character.Name 当前不在任何队伍中。</p>
                    <button class="btn btn-success mb-3" @onclick="GameState.CreateParty">创建新队伍</button>

                    var availableParties = GameState.Parties.Where(p => p.CaptainId != character.Id).ToList();
                    @if (availableParties.Any())
                    {
                        <h5>可加入的队伍:</h5>
                        <ul class="list-group">
                            @foreach (var p in availableParties)
                            {
                                @if (p.MemberIds.Count < Party.MaxMembers)
                                {
                                    var captainName = GameState.AllCharacters.FirstOrDefault(c => c.Id == p.CaptainId)?.Name;
                                    <li class="list-group-item d-flex justify-content-between align-items-center">
                                        @captainName 的队伍 (@p.MemberIds.Count/@Party.MaxMembers 人)
                                        <button class="btn btn-primary btn-sm" @onclick="() => GameState.JoinParty(p.Id)">加入</button>
                                    </li>
                                }
                            }
                        </ul>
                    }
                }
                else
                {
                    <div class="d-flex justify-content-between align-items-center mb-3">
                        <h4 class="mb-0">队伍信息 (@party.MemberIds.Count/@Party.MaxMembers)</h4>
                        <button class="btn btn-danger btn-sm" @onclick="GameState.LeaveParty">
                            @(party.CaptainId == character.Id ? "解散队伍" : "离开队伍")
                        </button>
                    </div>

                    <h5>队伍成员:</h5>
                    <ul class="list-group">
                        @foreach (var memberId in party.MemberIds)
                        {
                            var member = GameState.AllCharacters.FirstOrDefault(c => c.Id == memberId);
                            if (member != null)
                            {
                                <li class="list-group-item @(member.Id == party.CaptainId ? "list-group-item-primary" : "")">
                                    @member.Name @(member.Id == party.CaptainId ? "(队长)" : "")
                                </li>
                            }
                        }
                    </ul>

                    <!-- 队长可以选择进入副本 -->
                    @if (party.CaptainId == character.Id)
                    {
                        <div class="dungeon-options mt-4">
                            <h5>可用副本:</h5>
                            <div class="dungeon-list">
                                @foreach (var dungeon in DungeonTemplates.All.Where(d => CanEnterDungeon(character, party, d)))
                                {
                                    <div class="dungeon-card p-3 border rounded mb-2">
                                        <h6>@dungeon.Name (推荐等级: @dungeon.RecommendedLevel)</h6>
                                        <p>@dungeon.Description</p>
                                        <p><small>参与人数: @dungeon.MinPlayers-@dungeon.MaxPlayers 人</small></p>
                                        <button class="btn btn-primary btn-sm" @onclick="() => StartDungeon(dungeon.Id)">
                                            开始副本
                                        </button>
                                    </div>
                                }
                            </div>
                        </div>
                    }
                }
            </div>
        }
    </div>

    <!-- 详细信息 -->
    <div class="details-area">
        <div class="details-card">
            <h5>@character.Name 属性</h5>
            <p>攻击力: @character.GetTotalAttackPower()</p>
            <p>攻击速度: @character.AttacksPerSecond.ToString("F2") 次/秒</p>
        </div>

        @if (currentEnemy != null)
        {
            <div class="details-card">
                <h5>@currentEnemy.Name 属性</h5>
                <p>攻击力: @currentEnemy.AttackPower</p>
                <p>攻击速度: @currentEnemy.AttacksPerSecond.ToString("F2") 次/秒</p>
                <p>经验值: @currentEnemy.XpReward</p>
                <hr />
                <h6>可能掉落</h6>
                <div class="loot-table">
                    @foreach (var lootEntry in currentEnemy.LootTable)
                    {
                        var item = ItemData.GetItemById(lootEntry.Key);
                        if (item != null)
                        {
                            <div class="d-flex justify-content-between align-items-center">
                                <span>@item.Name (@((lootEntry.Value * 100).ToString("F0"))%)</span>
                                <label class="form-check-label small">
                                    <input type="checkbox" class="form-check-input"
                                           checked="@(character.AutoSellItemIds.Contains(item.Id))"
                                           @onchange="() => GameState.ToggleAutoSellItem(item.Id)" />
                                    自动出售
                                </label>
                            </div>
                        }
                    }
                </div>
            </div>
        }
    </div>

    <!-- 高级战斗选项对话框 -->
    @if (_showAdvancedOptions)
    {
        <div class="modal-backdrop" @onclick="CloseAdvancedOptions"></div>
        <div class="advanced-battle-modal">
            <h4>高级战斗选项</h4>

            <div class="mt-3">
                <h5>多对多战斗设置</h5>
                <div class="form-group mb-3">
                    <label>敌人数量</label>
                    <input type="number" class="form-control" @bind="_multiEnemyCount" min="1" max="5" />
                </div>

                <div class="form-group mb-3">
                    <label>选择敌人类型</label>
                    <select class="form-control" @bind="_selectedEnemyTemplate">
                        @foreach (var monster in GameState.AvailableMonsters)
                        {
                            <option value="@monster.Name">@monster.Name</option>
                        }
                    </select>
                </div>

                <div class="form-group mb-3">
                    <label>目标选择策略</label>
                    <select class="form-control" @bind="_targetSelectionStrategy">
                        <option value="@TargetSelectionStrategy.Random">随机目标</option>
                        <option value="@TargetSelectionStrategy.LowestHealth">最低生命值</option>
                        <option value="@TargetSelectionStrategy.HighestHealth">最高生命值</option>
                    </select>
                </div>

                <button class="btn btn-success" @onclick="StartMultiEnemyBattle">开始多对多战斗</button>
            </div>

            <button class="btn btn-secondary mt-3" @onclick="CloseAdvancedOptions">关闭</button>
        </div>
    }

    @if (_isPickerVisible)
    {
        <div class="modal-backdrop" @onclick="CloseQuickSlotPicker"></div>
        <div class="quick-slot-picker">
            <h5>选择一个物品</h5>
            <div class="picker-item-list">
                @foreach (var item in GetAvailableConsumablesForPicker(character))
                {
                    <div class="picker-item" @onclick="() => SetQuickSlot(item.Id)">
                        <span class="picker-item-name">@item.Name</span>
                        <span class="picker-item-count">(x@(GetItemCountInInventory(character, item.Id)))</span>
                    </div>
                }
            </div>
            <button class="btn btn-secondary mt-2" @onclick="CloseQuickSlotPicker">关闭</button>
        </div>
    }
}
else
{
    <p>正在加载角色信息...</p>
}

@code {
    private bool _isPickerVisible = false;
    private bool _showAdvancedOptions = false;
    private int _managingSlotId;
    private ConsumableCategory _managingCategory;
    private FoodType _managingFoodType;
    private enum BattleView { Battle, Party }
    private BattleView _currentView = BattleView.Battle; // 默认显示战斗界面

    // 获取CombatService实例
    private CombatService? _combatService;

    // 多对多战斗设置
    private int _multiEnemyCount = 3;
    private string _selectedEnemyTemplate = "";
    private TargetSelectionStrategy _targetSelectionStrategy = TargetSelectionStrategy.LowestHealth;

    protected override void OnInitialized()
    {
        GameState.OnStateChanged += StateHasChanged;
        _combatService = ServiceLocator.GetService<CombatService>();

        // 设置默认敌人模板
        if (GameState.AvailableMonsters.Any())
        {
            _selectedEnemyTemplate = GameState.AvailableMonsters.First().Name;
        }
    }

    // 添加检查战斗刷新状态的方法
    private bool _isBattleRefreshing(string playerId)
    {
        if (_combatService == null) return false;

        // 通过反射或者添加公开的API来检查战斗刷新状态
        // 这里假设CombatService有一个IsPlayerInBattleRefresh方法
        return _combatService.IsPlayerInBattleRefresh(playerId);
    }

    // 添加获取战斗刷新倒计时的方法
    private double GetBattleRefreshTime(string playerId)
    {
        if (_combatService == null) return 0;

        // 通过反射或者添加公开的API来获取战斗刷新倒计时
        // 这里假设CombatService有一个GetPlayerBattleRefreshTime方法
        return _combatService.GetPlayerBattleRefreshTime(playerId);
    }

    // 获取战斗模式文本
    private string GetBattleModeText(Player character)
    {
        var party = GameState.GetPartyForCharacter(character.Id);
        if (party != null)
        {
            return $"团队战斗 ({party.MemberIds.Count} 名玩家)";
        }
        else
        {
            return "单人战斗";
        }
    }

    private double GetHealthPercentage(int current, int max)
    {
        if (max <= 0) return 0;
        return (double)Math.Max(0, current) / max * 100;
    }

    private double GetAttackProgress(double currentCooldown, double attacksPerSecond)
    {
        if (attacksPerSecond <= 0) return 0;
        var totalCooldown = 1.0 / attacksPerSecond;
        var progress = (totalCooldown - currentCooldown) / totalCooldown;
        return Math.Clamp(progress * 100, 0, 100);
    }

    /// <summary>
    /// 获取当前目标敌人，优先级：战斗上下文中的目标 > 团队目标 > 个人目标
    /// </summary>
    private Enemy? GetCurrentEnemy(Player character, Party? party, BattleContext? battleContext)
    {
        if (battleContext != null && battleContext.Enemies.Any())
        {
            // 检查玩家是否有指定目标
            if (battleContext.PlayerTargets.TryGetValue(character.Id, out var targetName))
            {
                var target = battleContext.Enemies.FirstOrDefault(e => e.Name == targetName);
                if (target != null)
                    return target;
            }

            // 默认返回第一个敌人
            return battleContext.Enemies.First();
        }

        // 旧系统：团队目标或个人目标
        return party?.CurrentEnemy ?? character.CurrentEnemy;
    }

    /// <summary>
    /// 启动战斗，使用智能战斗系统
    /// </summary>
    private void StartBattle(Enemy enemyTemplate)
    {
        if (GameState.ActiveCharacter == null || _combatService == null)
            return;

        var party = GameState.GetPartyForCharacter(GameState.ActiveCharacter.Id);

        // 使用智能战斗系统
        _combatService.SmartStartBattle(GameState.ActiveCharacter, enemyTemplate, party);
    }

    /// <summary>
    /// 设置玩家的目标敌人
    /// </summary>
    private void SetPlayerTarget(string playerId, string enemyName, BattleContext battleContext)
    {
        if (_combatService != null && battleContext != null)
        {
            // 在BattleContext中设置玩家目标
            battleContext.PlayerTargets[playerId] = enemyName;
        }
    }

    /// <summary>
    /// 显示高级战斗选项
    /// </summary>
    private void ShowAdvancedBattleOptions()
    {
        _showAdvancedOptions = true;
    }

    /// <summary>
    /// 关闭高级战斗选项
    /// </summary>
    private void CloseAdvancedOptions()
    {
        _showAdvancedOptions = false;
    }

    /// <summary>
    /// 启动多对多战斗
    /// </summary>
    private void StartMultiEnemyBattle()
    {
        if (GameState.ActiveCharacter == null || _combatService == null || string.IsNullOrEmpty(_selectedEnemyTemplate))
            return;

        var party = GameState.GetPartyForCharacter(GameState.ActiveCharacter.Id);

        // 查找敌人模板
        var enemyTemplate = GameState.AvailableMonsters.FirstOrDefault(m => m.Name == _selectedEnemyTemplate);
        if (enemyTemplate == null)
            return;

        // 创建多个敌人
        var enemies = new List<Enemy>();
        for (int i = 0; i < _multiEnemyCount; i++)
        {
            enemies.Add(enemyTemplate.Clone());
        }

        // 使用新系统启动多对多战斗
        _combatService.StartMultiEnemyBattle(GameState.ActiveCharacter, enemies, party);

        // 关闭选项对话框
        CloseAdvancedOptions();
    }

    /// <summary>
    /// 启动副本战斗
    /// </summary>
    private void StartDungeon(string dungeonId)
    {
        var party = GameState.GetPartyForCharacter(GameState.ActiveCharacter?.Id);
        if (party != null && _combatService != null)
        {
            _combatService.StartDungeon(party, dungeonId);

            // 切换到战斗视图
            _currentView = BattleView.Battle;
        }
    }

    /// <summary>
    /// 检查是否可以进入副本
    /// </summary>
    private bool CanEnterDungeon(Player character, Party party, Dungeon dungeon)
    {
        // 检查队伍人数
        var memberCount = party.MemberIds.Count;
        if (memberCount < dungeon.MinPlayers || memberCount > dungeon.MaxPlayers)
            return false;

        // 检查队长等级
        if (character.GetLevel(character.SelectedBattleProfession) < dungeon.RecommendedLevel)
            return false;

        // 检查先决条件
        foreach (var prerequisite in dungeon.Prerequisites)
        {
            // if (!character.CompletedDungeons.Contains(prerequisite))
            //     return false;
        }

        return true;
    }

    /// <summary>
    /// 获取副本名称
    /// </summary>
    private string GetDungeonName(string? dungeonId)
    {
        if (string.IsNullOrEmpty(dungeonId))
            return "未知副本";

        var dungeon = DungeonTemplates.GetDungeonById(dungeonId);
        return dungeon?.Name ?? "未知副本";
    }

    private void OpenQuickSlotPicker(ConsumableCategory category, int slotId, FoodType foodType)
    {
        _managingCategory = category;
        _managingSlotId = slotId;
        _managingFoodType = foodType;
        _isPickerVisible = true;
    }

    private void CloseQuickSlotPicker()
    {
        _isPickerVisible = false;
    }

    private void SetQuickSlot(string itemId)
    {
        GameState.SetQuickSlotItem(_managingCategory, _managingSlotId, itemId);
        CloseQuickSlotPicker();
    }

    private List<Consumable> GetAvailableConsumablesForPicker(Player character)
    {
        var itemIdsInInventory = character.Inventory
            .Where(s => !s.IsEmpty && s.ItemId != null)
            .Select(s => s.ItemId!)
            .ToHashSet();

        var query = ItemData.AllItems.OfType<Consumable>();

        if (_managingCategory == ConsumableCategory.Food)
        {
            query = query.Where(c => c.FoodType == _managingFoodType);
        }
        else
        {
            query = query.Where(c => c.Category == _managingCategory);
        }

        return query.Where(c => itemIdsInInventory.Contains(c.Id)).ToList();
    }

    private int GetItemCountInInventory(Player character, string itemId)
    {
        return character.Inventory.Where(s => s.ItemId == itemId).Sum(s => s.Quantity);
    }

    public void Dispose()
    {
        GameState.OnStateChanged -= StateHasChanged;
    }
}