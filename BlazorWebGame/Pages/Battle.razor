@page "/battle"
@using BlazorWebGame.Models
@using BlazorWebGame.Models.Items
@using BlazorWebGame.Services
@inject GameStateService GameState
@implements IDisposable

<PageTitle>自动战斗</PageTitle>

@if (GameState.ActiveCharacter is Player character)
{
    var party = GameState.GetPartyForCharacter(character.Id);
    var currentEnemy = party?.CurrentEnemy ?? character.CurrentEnemy; // 统一获取当前目标，优先队伍目标
    var isPartyMemberAndNotCaptain = party != null && party.CaptainId != character.Id;
    <div class="battle-page-layout">
        <!-- 怪物选择 -->
        <div class="monster-selection-area">
            @foreach (var monsterTemplate in GameState.AvailableMonsters)
            {
                // --- vvv 核心修改：按钮状态和行为完全由团队逻辑决定 vvv ---
                <button class="monster-select-card @(currentEnemy?.Name == monsterTemplate.Name ? "active" : "")"
                        @onclick="() => GameState.StartCombat(character, monsterTemplate)"
                        disabled="@isPartyMemberAndNotCaptain">
                    @monsterTemplate.Name
                </button>
                // --- ^^^ 修改结束 ^^^ ---
            }
        </div>
        <div class="view-switcher d-flex justify-content-center gap-2 mb-3 border-bottom pb-3">
            <button class="btn @(_currentView == BattleView.Battle ? "btn-primary" : "btn-outline-primary")" @onclick="() => _currentView = BattleView.Battle">
                战斗
            </button>
            <button class="btn @(_currentView == BattleView.Party ? "btn-primary" : "btn-outline-primary")" @onclick="() => _currentView = BattleView.Party">
                队伍
            </button>
        </div>
        <!-- vvv 核心修改：根据视图状态动态渲染内容 vvv -->
        @if (_currentView == BattleView.Battle)
        {
            <!-- ================= BATTLE VIEW (战斗视图) ================= -->
            <!-- 核心战斗区 -->
            <div class="battle-core-area">
                <div class="battle-container">
                    <!-- 玩家卡片 -->
                    <div class="character-card player-card">
                        @if (character.IsDead)
                        {
                            <div class="player-dead-card">
                                <h3>你被击败了...</h3>
                                <p>复活倒计时: @character.RevivalTimeRemaining.ToString("F1")s</p>
                            </div>
                        }
                        else
                        {
                            <div class="character-image-placeholder"><span>头像</span></div>
                            <h5>@character.Name</h5>
                            <div class="profession-display">
                                <span>@character.SelectedBattleProfession.ToChineseString()</span>
                                <span>Lv. @character.GetLevel(character.SelectedBattleProfession)</span>
                            </div>
                            <div class="health-bar-container">
                                <div class="health-bar player-health" style="width: @(GetHealthPercentage(character.Health, character.GetTotalMaxHealth()))%;"></div>
                                <span class="health-text">@character.Health / @character.GetTotalMaxHealth()</span>
                            </div>
                            <div class="attack-progress-container">
                                <div class="attack-progress-bar" style="width: @(GetAttackProgress(character.AttackCooldown, character.AttacksPerSecond))%;"></div>
                            </div>
                            <div class="action-bar">
                                <div class="equipped-skills-display">
                                    @foreach (var skillId in character.EquippedSkills[character.SelectedBattleProfession])
                                    {
                                        var skill = SkillData.GetSkillById(skillId);
                                        if (skill != null)
                                        {
                                            <div class="skill-icon-container" title="@skill.Name: @skill.Description">
                                                <div class="skill-icon">@skill.Name.Substring(0, 1)</div>
                                                @if (character.SkillCooldowns.GetValueOrDefault(skillId, 0) > 0)
                                                {
                                                    <div class="cooldown-overlay"><span>@character.SkillCooldowns[skillId]</span></div>
                                                }
                                            </div>
                                        }
                                    }
                                </div>
                                <div class="consumable-quick-slots">
                                    @for (int i = 0; i < 2; i++)
                                    {
                                        var slotId = i;
                                        <div class="quick-slot" @onclick="() => OpenQuickSlotPicker(ConsumableCategory.Potion, slotId, FoodType.None)" @oncontextmenu:preventDefault @oncontextmenu="() => GameState.ClearQuickSlotItem(ConsumableCategory.Potion, slotId)">
                                            @if (character.PotionQuickSlots.TryGetValue(slotId, out var itemId) && !string.IsNullOrEmpty(itemId) && ItemData.GetItemById(itemId) is Consumable item)
                                            {
                                                <div class="quick-slot-item @(GetItemCountInInventory(character, itemId) == 0 ? "depleted" : "")" title="@item.Name (@GetItemCountInInventory(character, itemId)) - 右键清空">
                                                    <div class="item-icon">@item.Name.Substring(0, 1)</div>
                                                    <span class="item-count">@GetItemCountInInventory(character, itemId)</span>
                                                    @if (character.ConsumableCooldowns.GetValueOrDefault(itemId, 0) > 0)
                                                    {
                                                        <div class="cooldown-overlay"><span>@((int)character.ConsumableCooldowns[itemId])</span></div>
                                                    }
                                                </div>
                                            }
                                            else
                                            {
                                                <div class="quick-slot-empty" title="点击设置药水"></div>
                                            }
                                        </div>
                                    }
                                    @for (int i = 0; i < 2; i++)
                                    {
                                        var slotId = i;
                                        <div class="quick-slot" @onclick="() => OpenQuickSlotPicker(ConsumableCategory.Food, slotId, FoodType.Combat)" @oncontextmenu:preventDefault @oncontextmenu="() => GameState.ClearQuickSlotItem(ConsumableCategory.Food, slotId, FoodType.Combat)">
                                            @if (character.CombatFoodQuickSlots.TryGetValue(slotId, out var itemId) && !string.IsNullOrEmpty(itemId) && ItemData.GetItemById(itemId) is Consumable item)
                                            {
                                                <div class="quick-slot-item @(GetItemCountInInventory(character, itemId) == 0 ? "depleted" : "")" title="@item.Name (@GetItemCountInInventory(character, itemId)) - 右键清空">
                                                    <div class="item-icon">@item.Name.Substring(0, 1)</div>
                                                    <span class="item-count">@GetItemCountInInventory(character, itemId)</span>
                                                    @if (character.ConsumableCooldowns.GetValueOrDefault(itemId, 0) > 0)
                                                    {
                                                        <div class="cooldown-overlay"><span>@((int)character.ConsumableCooldowns[itemId])</span></div>
                                                    }
                                                </div>
                                            }
                                            else
                                            {
                                                <div class="quick-slot-empty" title="点击设置战斗食物"></div>
                                            }
                                        </div>
                                    }
                                </div>
                            </div>
                        }
                    </div>

                    <!-- 怪物卡片（始终显示） -->
                    <div class="character-card enemy-card">
                        @if (currentEnemy is null)
                        {
                            <div class="character-image-placeholder"><span>怪物</span></div>
                            <h5 class="text-muted">请选择怪物</h5>
                        }
                        else
                        {
                            <div class="character-image-placeholder"><span>怪</span></div>
                            <h5>@currentEnemy.Name</h5>
                            <div class="health-bar-container">
                                <div class="health-bar enemy-health" style="width: @(GetHealthPercentage(currentEnemy.Health, currentEnemy.MaxHealth))%;"></div>
                                <span class="health-text">@currentEnemy.Health / @currentEnemy.MaxHealth</span>
                            </div>
                            <div class="attack-progress-container">
                                <div class="attack-progress-bar" style="width: @(GetAttackProgress(currentEnemy.EnemyAttackCooldown, currentEnemy.AttacksPerSecond))%;"></div>
                            </div>
                            <div class="action-bar">
                                <div class="equipped-skills-display">
                                    @foreach (var skillId in currentEnemy.SkillIds)
                                    {
                                        var skill = SkillData.GetSkillById(skillId);
                                        if (skill != null)
                                        {
                                            <div class="skill-icon-container" title="@skill.Name: @skill.Description">
                                                <div class="skill-icon">@skill.Name.Substring(0, 1)</div>
                                                @if (currentEnemy.SkillCooldowns.GetValueOrDefault(skillId, 0) > 0)
                                                {
                                                    <div class="cooldown-overlay"><span>@currentEnemy.SkillCooldowns[skillId]</span></div>
                                                }
                                            </div>
                                        }
                                    }
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>
        }
        else // _currentView == BattleView.Party
        {
            <!-- ================= PARTY VIEW (队伍视图) ================= -->
            <div class="party-management-view p-3">
                @if (party == null)
                {
                    <h4 class="mb-3">创建或加入队伍</h4>
                    <p>@character.Name 当前不在任何队伍中。</p>
                    <button class="btn btn-success mb-3" @onclick="GameState.CreateParty">创建新队伍</button>

                    var availableParties = GameState.Parties.Where(p => p.CaptainId != character.Id).ToList();
                    @if (availableParties.Any())
                    {
                        <h5>可加入的队伍:</h5>
                        <ul class="list-group">
                            @foreach (var p in availableParties)
                            {
                                @if (p.MemberIds.Count < Party.MaxMembers)
                                {
                                    var captainName = GameState.AllCharacters.FirstOrDefault(c => c.Id == p.CaptainId)?.Name;
                                    <li class="list-group-item d-flex justify-content-between align-items-center">
                                        @captainName 的队伍 (@p.MemberIds.Count/@Party.MaxMembers 人)
                                        <button class="btn btn-primary btn-sm" @onclick="() => GameState.JoinParty(p.Id)">加入</button>
                                    </li>
                                }
                            }
                        </ul>
                    }
                }
                else
                {
                    <div class="d-flex justify-content-between align-items-center mb-3">
                        <h4 class="mb-0">队伍信息 (@party.MemberIds.Count/@Party.MaxMembers)</h4>
                        <button class="btn btn-danger btn-sm" @onclick="GameState.LeaveParty">
                            @(party.CaptainId == character.Id ? "解散队伍" : "离开队伍")
                        </button>
                    </div>

                    <h5>队伍成员:</h5>
                    <ul class="list-group">
                        @foreach (var memberId in party.MemberIds)
                        {
                            var member = GameState.AllCharacters.FirstOrDefault(c => c.Id == memberId);
                            if (member != null)
                            {
                                <li class="list-group-item @(member.Id == party.CaptainId ? "list-group-item-primary" : "")">
                                    @member.Name @(member.Id == party.CaptainId ? "(队长)" : "")
                                </li>
                            }
                        }
                    </ul>
                }
            </div>
        }
        <!-- ^^^ 修改结束 ^^^ -->
    </div>

        <!-- 详细信息 -->
        <div class="details-area">
            <div class="details-card">
                <h5>@character.Name 属性</h5>
                <p>攻击力: @character.GetTotalAttackPower()</p>
                <p>攻击速度: @character.AttacksPerSecond.ToString("F2") 次/秒</p>
            </div>

            @if (currentEnemy != null)
            {
                <div class="details-card">
                    <h5>@currentEnemy.Name 属性</h5>
                    <p>攻击力: @currentEnemy.AttackPower</p>
                    <p>攻击速度: @currentEnemy.AttacksPerSecond.ToString("F2") 次/秒</p>
                    <p>经验值: @currentEnemy.XpReward</p>
                    <hr />
                    <h6>可能掉落</h6>
                    <div class="loot-table">
                        @foreach (var lootEntry in currentEnemy.LootTable)
                        {
                            var item = ItemData.GetItemById(lootEntry.Key);
                            if (item != null)
                            {
                                <div class="d-flex justify-content-between align-items-center">
                                    <span>@item.Name (@((lootEntry.Value * 100).ToString("F0"))%)</span>
                                    <label class="form-check-label small">
                                        <input type="checkbox" class="form-check-input"
                                               checked="@(character.AutoSellItemIds.Contains(item.Id))"
                                               @onchange="() => GameState.ToggleAutoSellItem(item.Id)" />
                                        自动出售
                                    </label>
                                </div>
                            }
                        }
                    </div>
                </div>
            }
        </div>
    @if (_isPickerVisible)
    {
        <div class="modal-backdrop" @onclick="CloseQuickSlotPicker"></div>
        <div class="quick-slot-picker">
            <h5>选择一个物品</h5>
            <div class="picker-item-list">
                @foreach (var item in GetAvailableConsumablesForPicker(character))
                {
                    <div class="picker-item" @onclick="() => SetQuickSlot(item.Id)">
                        <span class="picker-item-name">@item.Name</span>
                        <span class="picker-item-count">(x@(GetItemCountInInventory(character, item.Id)))</span>
                    </div>
                }
            </div>
            <button class="btn btn-secondary mt-2" @onclick="CloseQuickSlotPicker">关闭</button>
        </div>
    }
}
else
{
    <p>正在加载角色信息...</p>
}

@code {
    private bool _isPickerVisible = false;
    private int _managingSlotId;
    private ConsumableCategory _managingCategory;
    private FoodType _managingFoodType;
    private enum BattleView { Battle, Party }
    private BattleView _currentView = BattleView.Battle; // 默认显示战斗界面

    protected override void OnInitialized()
    {
        GameState.OnStateChanged += StateHasChanged;
    }

    private double GetHealthPercentage(int current, int max)
    {
        if (max <= 0) return 0;
        return (double)Math.Max(0, current) / max * 100;
    }

    private double GetAttackProgress(double currentCooldown, double attacksPerSecond)
    {
        if (attacksPerSecond <= 0) return 0;
        var totalCooldown = 1.0 / attacksPerSecond;
        var progress = (totalCooldown - currentCooldown) / totalCooldown;
        return Math.Clamp(progress * 100, 0, 100);
    }

    private void OpenQuickSlotPicker(ConsumableCategory category, int slotId, FoodType foodType)
    {
        _managingCategory = category;
        _managingSlotId = slotId;
        _managingFoodType = foodType;
        _isPickerVisible = true;
    }

    private void CloseQuickSlotPicker()
    {
        _isPickerVisible = false;
    }

    private void SetQuickSlot(string itemId)
    {
        GameState.SetQuickSlotItem(_managingCategory, _managingSlotId, itemId);
        CloseQuickSlotPicker();
    }

    private List<Consumable> GetAvailableConsumablesForPicker(Player character)
    {
        var itemIdsInInventory = character.Inventory
            .Where(s => !s.IsEmpty && s.ItemId != null)
            .Select(s => s.ItemId!)
            .ToHashSet();

        var query = ItemData.AllItems.OfType<Consumable>();

        if (_managingCategory == ConsumableCategory.Food)
        {
            query = query.Where(c => c.FoodType == _managingFoodType);
        }
        else
        {
            query = query.Where(c => c.Category == _managingCategory);
        }

        return query.Where(c => itemIdsInInventory.Contains(c.Id)).ToList();
    }

    private int GetItemCountInInventory(Player character, string itemId)
    {
        return character.Inventory.Where(s => s.ItemId == itemId).Sum(s => s.Quantity);
    }

    public void Dispose()
    {
        GameState.OnStateChanged -= StateHasChanged;
    }
}