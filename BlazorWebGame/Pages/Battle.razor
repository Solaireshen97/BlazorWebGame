@page "/battle"
@using BlazorWebGame.Services
@using BlazorWebGame.Models
@inject GameStateService GameState
@implements IDisposable

<PageTitle>自动战斗</PageTitle>

@if (GameState.Player != null)
{
    <div class="battle-page-layout">
        <!-- 怪物选择区域 -->
        <div class="monster-selection-area">
            @foreach (var monsterTemplate in GameState.AvailableMonsters)
            {
                <button class="monster-select-card @(IsCurrentEnemy(monsterTemplate) ? "active" : "")"
                        @onclick="() => SelectEnemy(monsterTemplate)"
                        disabled="@GameState.IsPlayerDead">
                    @monsterTemplate.Name
                </button>
            }
        </div>

        <!-- 核心战斗区域 -->
        <div class="battle-core-area">
            @if (GameState.IsPlayerDead)
            {
                <div class="player-dead-card">
                    <h3>你被击败了...</h3>
                    <p>复活倒计时: @GameState.RevivalTimeRemaining.ToString("F1")s</p>
                </div>
            }
            else if (GameState.CurrentEnemy != null)
            {
                <div class="battle-container">
                    <!-- 玩家卡片 (已简化) -->
                    <div class="character-card player-card">
                        <div class="character-image-placeholder"><span>玩家头像</span></div>
                        <h5>@GameState.Player.Name</h5>

                        <!-- 只显示当前职业和等级 -->
                        <div class="profession-display">
                            <span>@GameState.Player.SelectedBattleProfession.ToChineseString()</span>
                            <span>Lv. @GameState.Player.GetLevel(GameState.Player.BattleProfessionXP[GameState.Player.SelectedBattleProfession])</span>
                        </div>

                        <div class="health-bar-container">
                            <div class="health-bar player-health" style="width: @(GetPlayerHealthPercentage())%;"></div>
                        </div>
                        <p>@GameState.Player.Health / @GameState.Player.MaxHealth</p>

                        <div class="attack-progress-container">
                            <div class="attack-progress-bar" style="width: @(GameState.PlayerAttackProgress)%;"></div>
                        </div>
                        <!-- 新增：已装备技能显示 -->
                        <div class="equipped-skills-display">
                            @foreach (var skillId in GameState.Player.EquippedSkills[GameState.Player.SelectedBattleProfession])
                            {
                                var skill = SkillData.GetSkillById(skillId);
                                if (skill != null)
                                {
                                    <div class="skill-icon" title="@skill.Name: @skill.Description">
                                        @skill.Name.Substring(0, 1)
                                    </div>
                                }
                            }
                        </div>
                    </div>

                    <!-- 敌人卡片 -->
                    <div class="character-card enemy-card">
                        <div class="character-image-placeholder"><span>怪物头像</span></div>
                        <h5>@GameState.CurrentEnemy.Name</h5>
                        <div class="health-bar-container">
                            <div class="health-bar enemy-health" style="width: @(GetEnemyHealthPercentage())%;"></div>
                        </div>
                        <p>@GameState.CurrentEnemy.Health / @GameState.CurrentEnemy.MaxHealth</p>
                        <div class="attack-progress-container">
                            <div class="attack-progress-bar" style="width: @(GameState.EnemyAttackProgress)%;"></div>
                        </div>
                    </div>
                </div>
            }
            else
            {
                <p>请选择一个怪物开始战斗。</p>
            }
        </div>

        <!-- 底部详细信息区域 -->
        <div class="details-area">
            <div class="details-card">
                <h5>玩家属性</h5>
                <p>攻击力: @GameState.Player.GetTotalAttackPower()</p>
                <p>攻击速度: @GameState.Player.AttacksPerSecond.ToString("F2") 次/秒</p>
            </div>

            @if (GameState.CurrentEnemy != null && !GameState.IsPlayerDead)
            {
                <div class="details-card">
                    <h5>@GameState.CurrentEnemy.Name 属性</h5>
                    <p>攻击力: @GameState.CurrentEnemy.AttackPower</p>
                    <p>攻击速度: @GameState.CurrentEnemy.AttacksPerSecond.ToString("F2") 次/秒</p>
                    <p>经验掉落: @GameState.CurrentEnemy.XpReward</p>
                </div>
            }
        </div>
    </div>
}
else
{
    <p>正在加载游戏...</p>
}


@code {
    protected override void OnInitialized()
    {
        GameState.OnStateChanged += StateHasChanged;
        if (GameState.CurrentEnemy == null && GameState.AvailableMonsters.Any())
        {
            SelectEnemy(GameState.AvailableMonsters.First());
        }
    }

    private void SelectEnemy(Enemy enemyTemplate) => GameState.SpawnNewEnemy(enemyTemplate);
    private bool IsCurrentEnemy(Enemy enemyTemplate) => GameState.CurrentEnemy?.Name == enemyTemplate.Name;
    private double GetPlayerHealthPercentage() => GameState.Player?.MaxHealth > 0 ? (double)Math.Max(0, GameState.Player.Health) / GameState.Player.MaxHealth * 100 : 0;
    private double GetEnemyHealthPercentage() => GameState.CurrentEnemy?.MaxHealth > 0 ? (double)Math.Max(0, GameState.CurrentEnemy.Health) / GameState.CurrentEnemy.MaxHealth * 100 : 0;

    public void Dispose()
    {
        GameState.OnStateChanged -= StateHasChanged;
    }
}