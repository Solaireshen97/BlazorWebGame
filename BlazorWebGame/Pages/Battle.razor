@page "/battle"
@using BlazorWebGame.Models
@using BlazorWebGame.Models.Battles
@using BlazorWebGame.Models.Dungeons
@using BlazorWebGame.Models.Items
@using BlazorWebGame.Models.Monsters
@using BlazorWebGame.Models.Regions
@using BlazorWebGame.Services
@using static BlazorWebGame.Services.CombatService
@inject GameStateService GameState
@implements IDisposable

<PageTitle>自动战斗</PageTitle>

@if (GameState.ActiveCharacter is Player character)
{
    var party = GameState.GetPartyForCharacter(character.Id);
    var battleContext = _combatService?.GetBattleContextForPlayer(character.Id);
    var currentEnemy = GetCurrentEnemy(character, battleContext);
    var isPartyMemberAndNotCaptain = party != null && party.CaptainId != character.Id;

    <div class="battle-page-layout">
        <!-- 怪物选择 -->
        <div class="battle-control-bar">
            <button class="btn btn-outline-primary" @onclick="ToggleMonsterSelector">
                <i class="bi bi-list-ul"></i> 选择战斗目标
            </button>

            @if (party != null && party.CaptainId == character.Id)
            {
                <button class="btn btn-outline-info" @onclick="ToggleDungeonSelector"
                        disabled="@(battleContext != null && battleContext.BattleType == BattleType.Dungeon)">
                    <i class="bi bi-dungeon"></i> 选择副本
                </button>
            }

            <div class="view-switcher d-flex gap-2">
                <button class="btn @(_currentView == BattleView.Battle ? "btn-primary" : "btn-outline-primary")" @onclick="() => _currentView = BattleView.Battle">
                    战斗
                </button>
                <button class="btn @(_currentView == BattleView.Party ? "btn-primary" : "btn-outline-primary")" @onclick="() => _currentView = BattleView.Party">
                    队伍
                </button>
            </div>
        </div>
        <!-- 怪物选择悬浮窗 -->
        @if (_showMonsterSelector)
        {
            <div class="modal-backdrop" @onclick="CloseSelectors"></div>
            <div class="monster-selector-modal">
                <div class="selector-header">
                    <h5>选择战斗目标</h5>
                    <button type="button" class="btn-close" @onclick="CloseSelectors"></button>
                </div>

                <div class="region-navigation">
                    <!-- 面包屑导航 -->
                    <div class="breadcrumb-navigation">
                        <span class="breadcrumb-item" @onclick="() => ResetNavigation()">所有区域</span>
                        @for (int i = 0; i < _navigationPath.Count; i++)
                        {
                            var index = i;
                            var region = RegionTemplates.GetById(_navigationPath[index]);
                            if (region != null)
                            {
                                <span class="breadcrumb-separator">/</span>
                                <span class="breadcrumb-item @(index == _navigationPath.Count - 1 ? "active" : "")"
                                      @onclick="() => NavigateToPathLevel(index + 1)">
                                    @region.Name
                                </span>
                            }
                        }
                    </div>

                    <!-- 当前级别区域列表 -->
                    <div class="region-level">
                        @{
                            var currentRegions = GetCurrentLevelRegions();
                        }

                        @foreach (var region in currentRegions)
                        {
                            <div class="region-item @(region.MinimumLevel > character.GetLevel(character.SelectedBattleProfession) ? "disabled" : "")"
                                 @onclick="() => NavigateToRegion(region.Id)"
                                 title="@region.Description">
                                <div class="region-name">@region.Name</div>
                                <div class="region-level-info">
                                    @if (region.MinimumLevel > 1)
                                    {
                                        <span class="level-req">需要等级: @region.MinimumLevel+</span>
                                    }
                                </div>
                            </div>
                        }
                    </div>

                    <!-- 区域内怪物列表 -->
                    @{
                        var currentRegion = GetCurrentRegion();
                        var hasSubRegions = currentRegion?.SubRegionIds?.Any() == true;

                        // 只有当当前区域没有子区域时才显示怪物列表
                        if (currentRegion != null && !hasSubRegions)
                        {
                            <div class="monsters-in-region">
                                @{
                                    var monsters = currentRegion.GetMonsters();
                                }

                                @foreach (var monster in monsters)
                                {
                                    var isFighting = IsCurrentlyFightingMonster(monster.Name, battleContext);

                                    <div class="monster-select-item @(isFighting ? "active" : "")"
                                         @onclick="() => StartBattle(monster)"
                                         title="@monster.Description">
                                        <div class="monster-name">@monster.Name</div>
                                        <div class="monster-level">Lv.@monster.Level</div>
                                    </div>
                                }

                                @if (!monsters.Any())
                                {
                                    <div class="no-monsters-message">该区域没有可选择的怪物</div>
                                }
                            </div>
                        }
                    }
                </div>

                <!-- 访问错误提示 -->
                @if (_showAccessError)
                {
                    <div class="access-error-panel">
                        <div class="error-message">
                            <h5>无法进入此区域</h5>
                            <p>@_accessErrorMessage</p>
                            <button class="btn btn-secondary btn-sm" @onclick="() => _showAccessError = false">确定</button>
                        </div>
                    </div>
                }
            </div>
        }

        <!-- 副本选择悬浮窗 -->
        @if (_showDungeonSelector)
        {
            <div class="modal-backdrop" @onclick="CloseSelectors"></div>
            <div class="dungeon-selector-modal">
                <div class="selector-header">
                    <h5>选择副本</h5>
                    <button type="button" class="btn-close" @onclick="CloseSelectors"></button>
                </div>

                <div class="dungeons-list">
                    @foreach (var dungeon in DungeonTemplates.All)
                    {
                        bool canEnter = CanEnterDungeon(character, party, dungeon);

                        <div class="dungeon-select-item @(!canEnter ? "disabled" : "")"
                             @onclick="() => { if (canEnter) StartDungeon(dungeon.Id); }">
                            <div class="dungeon-info">
                                <div class="dungeon-name">@dungeon.Name</div>
                                <div class="dungeon-level">推荐等级: @dungeon.RecommendedLevel</div>
                                <div class="dungeon-players">@dungeon.MinPlayers-@dungeon.MaxPlayers 人</div>
                            </div>
                            <div class="dungeon-description">@dungeon.Description</div>
                            @if (!canEnter)
                            {
                                <div class="dungeon-requirements">
                                    @GetDungeonRequirementText(character, party, dungeon)
                                </div>
                            }
                        </div>
                    }

                    @if (!DungeonTemplates.All.Any())
                    {
                        <div class="no-dungeons-message">没有可用的副本</div>
                    }
                </div>
            </div>
        }


        @if (_currentView == BattleView.Battle)
        {
            <div class="battle-info-panel mb-3">
                @if (battleContext != null)
                {
                    <div class="battle-status active">
                        <h5 class="battle-title">
                            @(battleContext.BattleType == BattleType.Dungeon ?
                                            $"副本战斗: {GetDungeonName(battleContext.DungeonId)} (波次 {battleContext.WaveNumber})" :
                                            battleContext.BattleType == BattleType.Party ?
                                            $"团队战斗 ({battleContext.Players.Count}v{battleContext.Enemies.Count})" :
                                            $"单人战斗 (1v{battleContext.Enemies.Count})")
                <button class="btn btn-danger btn-sm" @onclick="GameState.StopCurrentAction">
                    <i class="bi bi-stop-circle"></i> 结束战斗
                </button>
            </h5>
            <div class="battle-status-text d-flex justify-content-between align-items-center">
                <div>
                    <i class="bi bi-play-circle"></i> 自动战斗中 - 敌人: @battleContext.Enemies.Count 个剩余
                </div>
            </div>
        </div>
                }
                else if (IsInBattleRefresh(character.Id))
                {
                    <div class="battle-status cooldown">
                        <h5 class="battle-title">战斗冷却中</h5>
                        <div class="battle-status-text">
                            <i class="bi bi-hourglass-split"></i> @GetBattleRefreshTime(character.Id).ToString("F1")秒后自动开始下一场战斗
                        </div>
                    </div>
                }
                else
                {
                    <div class="battle-status waiting">
                        <h5 class="battle-title">等待开始战斗</h5>
                        <div class="battle-status-text">
                            <i class="bi bi-info-circle"></i> 请选择一个怪物进行战斗
                        </div>
                    </div>
                }
            </div>

            <!-- ================= BATTLE VIEW (战斗视图) ================= -->
            <!-- 核心战斗区 -->
            <div class="battle-core-area">
                <!-- 左侧区域：玩家和队伍成员 -->
                <div class="battle-left-side">
                    <!-- 队伍成员列表 - 放在玩家左侧 -->
                    @if (party != null)
                    {
                        <div class="party-members-container horizontal">
                            @{
                                var otherPartyMembers = party.MemberIds
                                .Where(id => id != character.Id)
                                .Select(id => GameState.AllCharacters.FirstOrDefault(c => c.Id == id))
                                .Where(p => p != null)
                                .ToList();

                                // 计算应该显示的空位数量
                                var emptySlots = Math.Max(0, Party.MaxMembers - 1 - otherPartyMembers.Count);
                            }

                            @foreach (var member in otherPartyMembers)
                            {
                                var isCaptain = party.CaptainId == member.Id;
                                var isInBattle = battleContext?.Players.Any(p => p.Id == member.Id) ?? false;
                                var memberHealth = isInBattle ?
                                battleContext.Players.First(p => p.Id == member.Id).Health :
                                member.Health;
                                var memberMaxHealth = isInBattle ?
                                battleContext.Players.First(p => p.Id == member.Id).GetTotalMaxHealth() :
                                member.GetTotalMaxHealth();

                                <div class="party-member-card @(member.IsDead ? "member-dead" : "") @(isCaptain ? "captain" : "")">
                                    <div class="member-avatar">@member.Name.Substring(0, 1)</div>
                                    <div class="member-info">
                                        <div class="member-name">
                                            @member.Name @(isCaptain ? "(队长)" : "")
                                        </div>
                                        <div class="member-profession">
                                            @member.SelectedBattleProfession.ToChineseString()
                                        </div>
                                        <div class="mini-health-bar">
                                            <div class="mini-health-fill" style="width: @(GetHealthPercentage(memberHealth, memberMaxHealth))%"></div>
                                            <span class="mini-health-text">@memberHealth/@memberMaxHealth</span>
                                        </div>
                                    </div>
                                </div>
                            }

                            @for (int i = 0; i < emptySlots; i++)
                            {
                                <div class="party-member-card empty">
                                    <div class="member-avatar empty">?</div>
                                    <div class="member-info">
                                        <div class="member-name">空位</div>
                                        <div class="member-profession">等待加入</div>
                                    </div>
                                </div>
                            }
                        </div>
                    }

                    <!-- 玩家卡片 -->
                    <div class="character-card player-card">
                        @if (character.IsDead)
                        {
                            <div class="player-dead-card">
                                <h3>你被击败了...</h3>
                                <p>复活倒计时: @character.RevivalTimeRemaining.ToString("F1")s</p>
                            </div>
                        }
                        else
                        {
                            <div class="character-image-placeholder"><span>头像</span></div>
                            <div class="player-name-container">
                                <div class="player-level-badge">
                                    @character.SelectedBattleProfession.ToChineseString() Lv.@character.GetLevel(character.SelectedBattleProfession)
                                </div>
                                <h5 class="player-name">@character.Name</h5>
                            </div>
                            <div class="health-bar-container">
                                <div class="health-bar player-health" style="width: @(GetHealthPercentage(character.Health, character.GetTotalMaxHealth()))%;"></div>
                                <span class="health-text">@character.Health / @character.GetTotalMaxHealth()</span>
                            </div>
                            <div class="attack-progress-container">
                                <div class="attack-progress-bar" style="width: @(GetAttackProgress(character.AttackCooldown, character.AttacksPerSecond))%;"></div>
                            </div>
                            <div class="action-bar">
                                <div class="equipped-skills-display">
                                    @foreach (var skillId in character.EquippedSkills[character.SelectedBattleProfession])
                                    {
                                        var skill = SkillData.GetSkillById(skillId);
                                        if (skill != null)
                                        {
                                            <div class="skill-icon-container" title="@skill.Name: @skill.Description">
                                                <div class="skill-icon">@skill.Name.Substring(0, 1)</div>
                                                @if (character.SkillCooldowns.GetValueOrDefault(skillId, 0) > 0)
                                                {
                                                    <div class="cooldown-overlay"><span>@character.SkillCooldowns[skillId]</span></div>
                                                }
                                            </div>
                                        }
                                    }
                                </div>
                            </div>
                        }
                    </div>
                </div>

                <!-- 右侧区域：敌人和其他敌人列表 -->
                <div class="battle-right-side">
                    <!-- 怪物卡片（在多对多战斗中显示目标敌人） -->
                    <div class="character-card enemy-card">
                        @if (currentEnemy is null)
                        {
                            <div class="character-image-placeholder"><span>怪物</span></div>
                            <h5 class="text-muted">请选择怪物</h5>
                        }
                        else
                        {
                            <div class="character-image-placeholder"><span>怪</span></div>
                            <h5>@currentEnemy.Name</h5>
                            <div class="health-bar-container">
                                <div class="health-bar enemy-health" style="width: @(GetHealthPercentage(currentEnemy.Health, currentEnemy.MaxHealth))%;"></div>
                                <span class="health-text">@currentEnemy.Health / @currentEnemy.MaxHealth</span>
                            </div>
                            <div class="attack-progress-container">
                                <div class="attack-progress-bar" style="width: @(GetAttackProgress(currentEnemy.EnemyAttackCooldown, currentEnemy.AttacksPerSecond))%;"></div>
                            </div>
                            <div class="action-bar">
                                <div class="equipped-skills-display">
                                    @foreach (var skillId in currentEnemy.SkillIds)
                                    {
                                        var skill = SkillData.GetSkillById(skillId);
                                        if (skill != null)
                                        {
                                            <div class="skill-icon-container" title="@skill.Name: @skill.Description">
                                                <div class="skill-icon">@skill.Name.Substring(0, 1)</div>
                                                @if (currentEnemy.SkillCooldowns.GetValueOrDefault(skillId, 0) > 0)
                                                {
                                                    <div class="cooldown-overlay"><span>@currentEnemy.SkillCooldowns[skillId]</span></div>
                                                }
                                            </div>
                                        }
                                    }
                                </div>
                            </div>
                        }
                    </div>

                    <!-- 多对多战斗中显示其他敌人列表 -->
                    @if (battleContext != null && battleContext.Enemies.Count > 1)
                    {
                        <div class="other-enemies-list horizontal">
                            <div class="enemy-list">
                                @foreach (var enemy in battleContext.Enemies.Where(e => e != currentEnemy))
                                {
                                    <div class="enemy-mini-card @(IsPlayerTarget(character.Id, enemy, battleContext) ? "border-primary" : "")"
                                         @onclick="() => SetPlayerTarget(character.Id, enemy, battleContext)">
                                        <div class="d-flex justify-content-between">
                                            <span>@enemy.Name</span>
                                            <span>Lv.@enemy.Level</span>
                                        </div>
                                        <div class="mini-health-bar">
                                            <div class="mini-health-fill" style="width: @(GetHealthPercentage(enemy.Health, enemy.MaxHealth))%"></div>
                                            <span class="mini-health-text">@enemy.Health/@enemy.MaxHealth</span>
                                        </div>
                                    </div>
                                }
                            </div>
                        </div>
                    }
                </div>
            </div>
        }
        else // _currentView == BattleView.Party
        {
            <!-- ================= PARTY VIEW (队伍视图) ================= -->
            <div class="party-management-view p-3">
                @if (party == null)
                {
                    <h4 class="mb-3">创建或加入队伍</h4>
                    <p>@character.Name 当前不在任何队伍中。</p>
                    <button class="btn btn-success mb-3" @onclick="CreatePartyAndStopBattle">创建新队伍</button>

                    var availableParties = GameState.Parties
                    .Where(p => p.CaptainId != character.Id) // 不显示自己创建的队伍
                    .Where(p => p.MemberIds.Count < Party.MaxMembers) // 队伍未满
                    .Where(p => !IsPartyInBattle(p)) // 队伍不在战斗中
                    .ToList();
                    @if (availableParties.Any())
                    {
                        <h5>可加入的队伍:</h5>
                        <ul class="list-group">
                            @foreach (var p in availableParties)
                            {
                                @if (p.MemberIds.Count < Party.MaxMembers)
                                {
                                    var captainName = GameState.AllCharacters.FirstOrDefault(c => c.Id == p.CaptainId)?.Name;
                                    var partyId = p.Id; // 创建本地变量以便在lambda中使用
                                                        <li class="list-group-item d-flex justify-content-between align-items-center">
                                                            @captainName 的队伍 (@p.MemberIds.Count/@Party.MaxMembers 人)
                                                            <button class="btn btn-primary btn-sm" @onclick="() => JoinPartyAndStopBattle(partyId)">加入</button>
                                                        </li>
                                }
                            }
                        </ul>
                    }
                }
                else
                {
                    <div class="d-flex justify-content-between align-items-center mb-3">
                        <h4 class="mb-0">队伍信息 (@party.MemberIds.Count/@Party.MaxMembers)</h4>
                        <button class="btn btn-danger btn-sm" @onclick="LeavePartyAndStopBattle">
                            @(party.CaptainId == character.Id ? "解散队伍" : "离开队伍")
                        </button>
                    </div>

                    <h5>队伍成员:</h5>
                    <ul class="list-group">
                        @foreach (var memberId in party.MemberIds)
                        {
                            var member = GameState.AllCharacters.FirstOrDefault(c => c.Id == memberId);
                            if (member != null)
                            {
                                <li class="list-group-item @(member.Id == party.CaptainId ? "list-group-item-primary" : "")">
                                    @member.Name @(member.Id == party.CaptainId ? "(队长)" : "")
                                </li>
                            }
                        }
                    </ul>

                    <!-- 队长可以选择进入副本 -->
                    @if (party.CaptainId == character.Id)
                    {
                        <div class="dungeon-options mt-4">
                            <h5>可用副本:</h5>
                            <div class="dungeon-list">
                                @foreach (var dungeon in DungeonTemplates.All.Where(d => CanEnterDungeon(character, party, d)))
                                {
                                    <div class="dungeon-card p-3 border rounded mb-2">
                                        <h6>@dungeon.Name (推荐等级: @dungeon.RecommendedLevel)</h6>
                                        <p>@dungeon.Description</p>
                                        <p><small>参与人数: @dungeon.MinPlayers-@dungeon.MaxPlayers 人</small></p>
                                        <button class="btn btn-primary btn-sm" @onclick="() => StartDungeon(dungeon.Id)">
                                            开始副本
                                        </button>
                                    </div>
                                }
                            </div>
                        </div>
                    }
                }
            </div>
        }
    </div>

    <!-- 详细信息 -->
    <div class="details-area">
        <!-- 修改后的玩家属性卡片 -->
        <div class="details-card player-details-card">
            <h5>@character.Name 属性</h5>
            <div class="player-stats">
                <div class="stats-list">
                    <p>攻击力: @character.GetTotalAttackPower()</p>
                    <p>攻击速度: @character.AttacksPerSecond.ToString("F2") 次/秒</p>
                </div>

                <!-- 快捷栏整合到玩家属性卡中 -->
                <div class="player-quick-access">
                    <div class="quick-slot-section">
                        <h6>战斗消耗品</h6>
                        <div class="quick-slots-container">
                            <!-- 药水快捷栏 -->
                            @for (int i = 0; i < 2; i++)
                            {
                                var slotId = i;
                                <div class="quick-slot" @onclick="() => OpenQuickSlotPicker(ConsumableCategory.Potion, slotId, FoodType.None)" @oncontextmenu:preventDefault @oncontextmenu="() => GameState.ClearQuickSlotItem(ConsumableCategory.Potion, slotId)">
                                    @if (character.PotionQuickSlots.TryGetValue(slotId, out var itemId) && !string.IsNullOrEmpty(itemId) && ItemData.GetItemById(itemId) is Consumable item)
                                    {
                                        <div class="quick-slot-item @(GetItemCountInInventory(character, itemId) == 0 ? "depleted" : "")" title="@item.Name (@GetItemCountInInventory(character, itemId)) - 右键清空">
                                            <div class="item-icon">@item.Name.Substring(0, 1)</div>
                                            <span class="item-count">@GetItemCountInInventory(character, itemId)</span>
                                            @if (character.ConsumableCooldowns.GetValueOrDefault(itemId, 0) > 0)
                                            {
                                                <div class="cooldown-overlay"><span>@((int)character.ConsumableCooldowns[itemId])</span></div>
                                            }
                                        </div>
                                    }
                                    else
                                    {
                                        <div class="quick-slot-empty" title="点击设置药水"></div>
                                    }
                                </div>
                            }

                            <!-- 战斗食物快捷栏 -->
                            @for (int i = 0; i < 2; i++)
                            {
                                var slotId = i;
                                <div class="quick-slot" @onclick="() => OpenQuickSlotPicker(ConsumableCategory.Food, slotId, FoodType.Combat)" @oncontextmenu:preventDefault @oncontextmenu="() => GameState.ClearQuickSlotItem(ConsumableCategory.Food, slotId, FoodType.Combat)">
                                    @if (character.CombatFoodQuickSlots.TryGetValue(slotId, out var itemId) && !string.IsNullOrEmpty(itemId) && ItemData.GetItemById(itemId) is Consumable item)
                                    {
                                        <div class="quick-slot-item @(GetItemCountInInventory(character, itemId) == 0 ? "depleted" : "")" title="@item.Name (@GetItemCountInInventory(character, itemId)) - 右键清空">
                                            <div class="item-icon">@item.Name.Substring(0, 1)</div>
                                            <span class="item-count">@GetItemCountInInventory(character, itemId)</span>
                                            @if (character.ConsumableCooldowns.GetValueOrDefault(itemId, 0) > 0)
                                            {
                                                <div class="cooldown-overlay"><span>@((int)character.ConsumableCooldowns[itemId])</span></div>
                                            }
                                        </div>
                                    }
                                    else
                                    {
                                        <div class="quick-slot-empty" title="点击设置战斗食物"></div>
                                    }
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="details-card enemy-details-card">
            <h5>@(currentEnemy != null ? currentEnemy.Name : "怪物") 属性</h5>

            @if (currentEnemy != null)
            {
                <div class="enemy-stats">
                    <p>攻击力: @currentEnemy.AttackPower</p>
                    <p>攻击速度: @currentEnemy.AttacksPerSecond.ToString("F2") 次/秒</p>
                    <p>经验值: @currentEnemy.XpReward</p>
                    <hr />
                    <h6>可能掉落</h6>
                    <div class="loot-table">
                        @foreach (var lootEntry in currentEnemy.LootTable)
                        {
                            var item = ItemData.GetItemById(lootEntry.Key);
                            if (item != null)
                            {
                                <div class="d-flex justify-content-between align-items-center">
                                    <span>@item.Name (@((lootEntry.Value * 100).ToString("F0"))%)</span>
                                    <label class="form-check-label small">
                                        <input type="checkbox" class="form-check-input"
                                               checked="@(character.AutoSellItemIds.Contains(item.Id))"
                                               @onchange="() => GameState.ToggleAutoSellItem(item.Id)" />
                                        自动出售
                                    </label>
                                </div>
                            }
                        }
                    </div>
                </div>
            }
            else
            {
                <div class="enemy-stats empty-stats">
                    <p class="text-muted">请选择怪物开始战斗</p>
                </div>
            }
        </div>
    </div>

    <!-- 快捷栏选择器 -->
    @if (_isPickerVisible)
    {
        <div class="modal-backdrop" @onclick="CloseQuickSlotPicker"></div>
        <div class="quick-slot-picker">
            <h5>选择一个物品</h5>
            <div class="picker-item-list">
                @foreach (var item in GetAvailableConsumablesForPicker(character))
                {
                    <div class="picker-item" @onclick="() => SetQuickSlot(item.Id)">
                        <span class="picker-item-name">@item.Name</span>
                        <span class="picker-item-count">(x@(GetItemCountInInventory(character, item.Id)))</span>
                    </div>
                }
            </div>
            <button class="btn btn-secondary mt-2" @onclick="CloseQuickSlotPicker">关闭</button>
        </div>
    }
}
else
{
    <p>正在加载角色信息...</p>
}

@code {
    private bool _showMonsterSelector = false;
    private bool _showDungeonSelector = false;
    private string _selectedRegion = "";
    private string _selectedSubRegion = "";
    private bool _showAccessError = false;
    private string _accessErrorMessage = string.Empty;


    private void ResetNavigation()
    {
        _navigationPath.Clear();
        _showAccessError = false;
        StateHasChanged();
    }

    private void NavigateToPathLevel(int level)
    {
        if (level < _navigationPath.Count)
        {
            _navigationPath = _navigationPath.Take(level).ToList();
            _showAccessError = false;
            StateHasChanged();
        }
    }

    // 定义怪物区域结构
    private class MonsterRegion
    {
        public string Id { get; set; }
        public string Name { get; set; }
        public List<MonsterRegion> SubRegions { get; set; } = new List<MonsterRegion>();
        public List<string> MonsterIds { get; set; } = new List<string>();
    }
    // 用于存储当前导航路径
    private List<string> _navigationPath = new List<string>();

    // 导航到指定区域
    private void NavigateToRegion(string regionId)
    {
        var region = RegionTemplates.GetById(regionId);
        if (region == null) return;

        _navigationPath.Add(regionId);

        // 检查区域访问限制
        if (GameState.ActiveCharacter is Player character)
        {
            var party = GameState.GetPartyForCharacter(character.Id);
            bool canAccess = true;

            if (party != null)
            {
                var partyMembers = party.MemberIds
                    .Select(id => GameState.AllCharacters.FirstOrDefault(c => c.Id == id))
                    .Where(p => p != null)
                    .Cast<Player>()
                    .ToList();

                canAccess = region.CanPartyAccess(party, partyMembers);
            }
            else
            {
                canAccess = region.CanPlayerAccess(character);
            }

            if (!canAccess)
            {
                // 显示无法访问的消息
                _accessErrorMessage = region.GetAccessRequirementsDescription();
                _showAccessError = true;
                _navigationPath.RemoveAt(_navigationPath.Count - 1); // 回退导航
            }
        }

        StateHasChanged();
    }

    // 获取当前导航区域
    private Region GetCurrentRegion()
    {
        if (_navigationPath.Count == 0)
            return null;

        return RegionTemplates.GetById(_navigationPath.Last());
    }

    private List<Region> GetCurrentLevelRegions()
    {
        if (_navigationPath.Count == 0)
        {
            return RegionTemplates.GetContinents();
        }

        var currentRegion = RegionTemplates.GetById(_navigationPath.Last());
        return currentRegion?.SubRegionIds
            .Select(id => RegionTemplates.GetById(id))
            .Where(r => r != null)
            .ToList();
    }

    private void ToggleMonsterSelector()
    {
        _showMonsterSelector = !_showMonsterSelector;
        if (_showMonsterSelector) _showDungeonSelector = false;
    }

    private void ToggleDungeonSelector()
    {
        _showDungeonSelector = !_showDungeonSelector;
        if (_showDungeonSelector) _showMonsterSelector = false;
    }

    private void CloseSelectors()
    {
        _showMonsterSelector = false;
        _showDungeonSelector = false;
    }

    private void SelectRegion(string regionId)
    {
        _selectedRegion = regionId;
        _selectedSubRegion = "";
    }

    private void SelectSubRegion(string subRegionId)
    {
        _selectedSubRegion = subRegionId;
    }

    private string GetDungeonRequirementText(Player character, Party party, Dungeon dungeon)
    {
        List<string> requirements = new List<string>();

        // 检查等级
        if (character.GetLevel(character.SelectedBattleProfession) < dungeon.RecommendedLevel)
        {
            requirements.Add($"需要等级 {dungeon.RecommendedLevel}+");
        }

        // 检查人数
        int memberCount = party?.MemberIds.Count ?? 0;
        if (memberCount < dungeon.MinPlayers)
        {
            requirements.Add($"至少需要 {dungeon.MinPlayers} 人");
        }
        else if (memberCount > dungeon.MaxPlayers)
        {
            requirements.Add($"最多允许 {dungeon.MaxPlayers} 人");
        }

        // 检查先决条件
        foreach (var prerequisite in dungeon.Prerequisites)
        {
            var prereqDungeon = DungeonTemplates.GetDungeonById(prerequisite);
            if (prereqDungeon != null)
            {
                requirements.Add($"需要完成 {prereqDungeon.Name}");
            }
        }

        return string.Join(", ", requirements);
    }

    private bool _isPickerVisible = false;
    private int _managingSlotId;
    private ConsumableCategory _managingCategory;
    private FoodType _managingFoodType;
    private enum BattleView { Battle, Party }
    private BattleView _currentView = BattleView.Battle;

    // 获取CombatService实例
    private CombatService? _combatService;

    protected override void OnInitialized()
    {
        GameState.OnStateChanged += StateHasChanged;
        _combatService = ServiceLocator.GetService<CombatService>();
    }

    // 检查是否处于战斗刷新状态
    private bool IsInBattleRefresh(string playerId)
    {
        return _combatService?.IsPlayerInBattleRefresh(playerId) ?? false;
    }

    /// <summary>
    /// 检查是否在副本战斗中
    /// </summary>
    private bool IsInDungeonBattle(BattleContext? battleContext)
    {
        return battleContext != null && battleContext.BattleType == BattleType.Dungeon;
    }

    // 获取战斗刷新倒计时
    private double GetBattleRefreshTime(string playerId)
    {
        return _combatService?.GetPlayerBattleRefreshTime(playerId) ?? 0;
    }

    // 获取战斗模式文本
    private string GetBattleModeText(BattleContext battleContext)
    {
        return battleContext.BattleType switch
        {
            BattleType.Dungeon => $"副本战斗 - {GetDungeonName(battleContext.DungeonId)}",
            BattleType.Party => $"团队战斗 ({battleContext.Players.Count}v{battleContext.Enemies.Count})",
            _ => $"单人战斗 (1v{battleContext.Enemies.Count})"
        };
    }

    /// <summary>
    /// 创建队伍前先停止当前战斗
    /// </summary>
    private void CreatePartyAndStopBattle()
    {
        // 如果玩家在战斗中，先停止战斗
        if (GameState.ActiveCharacter?.CurrentAction == PlayerActionState.Combat)
        {
            GameState.StopCurrentAction();
        }

        // 然后创建队伍
        GameState.CreateParty();
    }

    /// <summary>
    /// 加入队伍前先停止当前战斗
    /// </summary>
    private void JoinPartyAndStopBattle(Guid partyId)
    {
        // 如果玩家在战斗中，先停止战斗
        if (GameState.ActiveCharacter?.CurrentAction == PlayerActionState.Combat)
        {
            GameState.StopCurrentAction();
        }

        // 然后加入队伍
        GameState.JoinParty(partyId);
    }

    // 检查是否正在战斗该怪物
    private bool IsCurrentlyFightingMonster(string monsterName, BattleContext? battleContext)
    {
        // 在副本战斗中，不高亮显示任何怪物按钮
        if (battleContext == null || battleContext.BattleType == BattleType.Dungeon)
            return false;

        // 只在普通战斗或队伍战斗中高亮显示对应的怪物按钮
        return battleContext.Enemies.Any(e => e.Name == monsterName);
    }

    private double GetHealthPercentage(int current, int max)
    {
        if (max <= 0) return 0;
        return (double)Math.Max(0, current) / max * 100;
    }

    private double GetAttackProgress(double currentCooldown, double attacksPerSecond)
    {
        if (attacksPerSecond <= 0) return 0;
        var totalCooldown = 1.0 / attacksPerSecond;
        var progress = (totalCooldown - currentCooldown) / totalCooldown;
        return Math.Clamp(progress * 100, 0, 100);
    }

    /// <summary>
    /// 获取当前目标敌人 - 只从战斗上下文中获取
    /// </summary>
    private Enemy? GetCurrentEnemy(Player character, BattleContext? battleContext)
    {
        if (battleContext == null || !battleContext.Enemies.Any())
            return null;

        // 检查玩家是否有指定目标
        if (battleContext.PlayerTargets.TryGetValue(character.Id, out var targetName))
        {
            var target = battleContext.Enemies.FirstOrDefault(e => e.Name == targetName);
            if (target != null)
                return target;
        }

        // 默认返回第一个敌人
        return battleContext.Enemies.First();
    }

    /// <summary>
    /// 启动战斗，使用智能战斗系统
    /// </summary>
    private void StartBattle(Enemy enemyTemplate)
    {
        if (GameState.ActiveCharacter == null || _combatService == null)
            return;

        var party = GameState.GetPartyForCharacter(GameState.ActiveCharacter.Id);

        // 使用智能战斗系统
        _combatService.SmartStartBattle(GameState.ActiveCharacter, enemyTemplate, party);
    }

    /// <summary>
    /// 设置玩家的目标敌人
    /// </summary>
    private void SetPlayerTarget(string playerId, Enemy enemy, BattleContext battleContext)
    {
        battleContext.PlayerTargets[playerId] = enemy.Name;
    }

    /// <summary>
    /// 检查敌人是否是玩家的当前目标
    /// </summary>
    private bool IsPlayerTarget(string playerId, Enemy enemy, BattleContext battleContext)
    {
        return battleContext.PlayerTargets.TryGetValue(playerId, out var targetName) && targetName == enemy.Name;
    }

    /// <summary>
    /// 启动副本战斗
    /// </summary>
    private void StartDungeon(string dungeonId)
    {
        var party = GameState.GetPartyForCharacter(GameState.ActiveCharacter?.Id);
        if (party != null && _combatService != null)
        {
            _combatService.StartDungeon(party, dungeonId);

            // 切换到战斗视图
            _currentView = BattleView.Battle;
        }
    }

    /// <summary>
    /// 离开队伍前先停止当前战斗
    /// </summary>
    private void LeavePartyAndStopBattle()
    {
        var party = GameState.GetPartyForCharacter(GameState.ActiveCharacter?.Id);
        if (party != null)
        {
            // 如果是队伍战斗，先停止所有成员的战斗
            var battleContext = _combatService?.GetBattleContextForParty(party.Id);
            if (battleContext != null)
            {
                GameState.StopCurrentAction();
            }
        }

        // 然后离开队伍
        GameState.LeaveParty();
    }

    /// <summary>
    /// 检查队伍是否有任何成员在战斗中
    /// </summary>
    private bool IsPartyInBattle(Party party)
    {
        // 检查队伍是否有战斗上下文
        if (_combatService?.GetBattleContextForParty(party.Id) != null)
        {
            return true;
        }

        // 检查队伍中的每个成员是否有人在战斗中
        foreach (var memberId in party.MemberIds)
        {
            var member = GameState.AllCharacters.FirstOrDefault(c => c.Id == memberId);
            if (member != null && member.CurrentAction == PlayerActionState.Combat)
            {
                return true;
            }
        }

        return false;
    }

    /// <summary>
    /// 检查是否可以进入副本
    /// </summary>
    private bool CanEnterDungeon(Player character, Party party, Dungeon dungeon)
    {
        // 检查队伍人数
        var memberCount = party.MemberIds.Count;
        if (memberCount < dungeon.MinPlayers || memberCount > dungeon.MaxPlayers)
            return false;

        // 检查队长等级
        if (character.GetLevel(character.SelectedBattleProfession) < dungeon.RecommendedLevel)
            return false;

        // 检查先决条件
        foreach (var prerequisite in dungeon.Prerequisites)
        {
            // if (!character.CompletedDungeons.Contains(prerequisite))
            //     return false;
        }

        return true;
    }

    /// <summary>
    /// 获取副本名称
    /// </summary>
    private string GetDungeonName(string? dungeonId)
    {
        if (string.IsNullOrEmpty(dungeonId))
            return "未知副本";

        var dungeon = DungeonTemplates.GetDungeonById(dungeonId);
        return dungeon?.Name ?? "未知副本";
    }

    private void OpenQuickSlotPicker(ConsumableCategory category, int slotId, FoodType foodType)
    {
        _managingCategory = category;
        _managingSlotId = slotId;
        _managingFoodType = foodType;
        _isPickerVisible = true;
    }

    private void CloseQuickSlotPicker()
    {
        _isPickerVisible = false;
    }

    private void SetQuickSlot(string itemId)
    {
        GameState.SetQuickSlotItem(_managingCategory, _managingSlotId, itemId);
        CloseQuickSlotPicker();
    }

    private List<Consumable> GetAvailableConsumablesForPicker(Player character)
    {
        var itemIdsInInventory = character.Inventory
            .Where(s => !s.IsEmpty && s.ItemId != null)
            .Select(s => s.ItemId!)
            .ToHashSet();

        var query = ItemData.AllItems.OfType<Consumable>();

        if (_managingCategory == ConsumableCategory.Food)
        {
            query = query.Where(c => c.FoodType == _managingFoodType);
        }
        else
        {
            query = query.Where(c => c.Category == _managingCategory);
        }

        return query.Where(c => itemIdsInInventory.Contains(c.Id)).ToList();
    }

    private int GetItemCountInInventory(Player character, string itemId)
    {
        return character.Inventory.Where(s => s.ItemId == itemId).Sum(s => s.Quantity);
    }

    public void Dispose()
    {
        GameState.OnStateChanged -= StateHasChanged;
    }
}